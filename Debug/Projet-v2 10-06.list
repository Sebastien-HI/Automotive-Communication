
Projet-v2 10-06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ca4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a4  08008e34  08008e34  00018e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090d8  080090d8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080090d8  080090d8  000190d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090e0  080090e0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090e0  080090e0  000190e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090e4  080090e4  000190e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080090e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004698  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000470c  2000470c  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bbc3  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000042ee  00000000  00000000  0003bc67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001730  00000000  00000000  0003ff58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001578  00000000  00000000  00041688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024a5f  00000000  00000000  00042c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b324  00000000  00000000  0006765f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ddb71  00000000  00000000  00082983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001604f4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006474  00000000  00000000  00160544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008e1c 	.word	0x08008e1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08008e1c 	.word	0x08008e1c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_d2uiz>:
 80005e8:	004a      	lsls	r2, r1, #1
 80005ea:	d211      	bcs.n	8000610 <__aeabi_d2uiz+0x28>
 80005ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005f0:	d211      	bcs.n	8000616 <__aeabi_d2uiz+0x2e>
 80005f2:	d50d      	bpl.n	8000610 <__aeabi_d2uiz+0x28>
 80005f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005fc:	d40e      	bmi.n	800061c <__aeabi_d2uiz+0x34>
 80005fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800060a:	fa23 f002 	lsr.w	r0, r3, r2
 800060e:	4770      	bx	lr
 8000610:	f04f 0000 	mov.w	r0, #0
 8000614:	4770      	bx	lr
 8000616:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800061a:	d102      	bne.n	8000622 <__aeabi_d2uiz+0x3a>
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	4770      	bx	lr
 8000622:	f04f 0000 	mov.w	r0, #0
 8000626:	4770      	bx	lr

08000628 <__aeabi_uldivmod>:
 8000628:	b953      	cbnz	r3, 8000640 <__aeabi_uldivmod+0x18>
 800062a:	b94a      	cbnz	r2, 8000640 <__aeabi_uldivmod+0x18>
 800062c:	2900      	cmp	r1, #0
 800062e:	bf08      	it	eq
 8000630:	2800      	cmpeq	r0, #0
 8000632:	bf1c      	itt	ne
 8000634:	f04f 31ff 	movne.w	r1, #4294967295
 8000638:	f04f 30ff 	movne.w	r0, #4294967295
 800063c:	f000 b974 	b.w	8000928 <__aeabi_idiv0>
 8000640:	f1ad 0c08 	sub.w	ip, sp, #8
 8000644:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000648:	f000 f806 	bl	8000658 <__udivmoddi4>
 800064c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000650:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000654:	b004      	add	sp, #16
 8000656:	4770      	bx	lr

08000658 <__udivmoddi4>:
 8000658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800065c:	9d08      	ldr	r5, [sp, #32]
 800065e:	4604      	mov	r4, r0
 8000660:	468e      	mov	lr, r1
 8000662:	2b00      	cmp	r3, #0
 8000664:	d14d      	bne.n	8000702 <__udivmoddi4+0xaa>
 8000666:	428a      	cmp	r2, r1
 8000668:	4694      	mov	ip, r2
 800066a:	d969      	bls.n	8000740 <__udivmoddi4+0xe8>
 800066c:	fab2 f282 	clz	r2, r2
 8000670:	b152      	cbz	r2, 8000688 <__udivmoddi4+0x30>
 8000672:	fa01 f302 	lsl.w	r3, r1, r2
 8000676:	f1c2 0120 	rsb	r1, r2, #32
 800067a:	fa20 f101 	lsr.w	r1, r0, r1
 800067e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000682:	ea41 0e03 	orr.w	lr, r1, r3
 8000686:	4094      	lsls	r4, r2
 8000688:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800068c:	0c21      	lsrs	r1, r4, #16
 800068e:	fbbe f6f8 	udiv	r6, lr, r8
 8000692:	fa1f f78c 	uxth.w	r7, ip
 8000696:	fb08 e316 	mls	r3, r8, r6, lr
 800069a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800069e:	fb06 f107 	mul.w	r1, r6, r7
 80006a2:	4299      	cmp	r1, r3
 80006a4:	d90a      	bls.n	80006bc <__udivmoddi4+0x64>
 80006a6:	eb1c 0303 	adds.w	r3, ip, r3
 80006aa:	f106 30ff 	add.w	r0, r6, #4294967295
 80006ae:	f080 811f 	bcs.w	80008f0 <__udivmoddi4+0x298>
 80006b2:	4299      	cmp	r1, r3
 80006b4:	f240 811c 	bls.w	80008f0 <__udivmoddi4+0x298>
 80006b8:	3e02      	subs	r6, #2
 80006ba:	4463      	add	r3, ip
 80006bc:	1a5b      	subs	r3, r3, r1
 80006be:	b2a4      	uxth	r4, r4
 80006c0:	fbb3 f0f8 	udiv	r0, r3, r8
 80006c4:	fb08 3310 	mls	r3, r8, r0, r3
 80006c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006cc:	fb00 f707 	mul.w	r7, r0, r7
 80006d0:	42a7      	cmp	r7, r4
 80006d2:	d90a      	bls.n	80006ea <__udivmoddi4+0x92>
 80006d4:	eb1c 0404 	adds.w	r4, ip, r4
 80006d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80006dc:	f080 810a 	bcs.w	80008f4 <__udivmoddi4+0x29c>
 80006e0:	42a7      	cmp	r7, r4
 80006e2:	f240 8107 	bls.w	80008f4 <__udivmoddi4+0x29c>
 80006e6:	4464      	add	r4, ip
 80006e8:	3802      	subs	r0, #2
 80006ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006ee:	1be4      	subs	r4, r4, r7
 80006f0:	2600      	movs	r6, #0
 80006f2:	b11d      	cbz	r5, 80006fc <__udivmoddi4+0xa4>
 80006f4:	40d4      	lsrs	r4, r2
 80006f6:	2300      	movs	r3, #0
 80006f8:	e9c5 4300 	strd	r4, r3, [r5]
 80006fc:	4631      	mov	r1, r6
 80006fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000702:	428b      	cmp	r3, r1
 8000704:	d909      	bls.n	800071a <__udivmoddi4+0xc2>
 8000706:	2d00      	cmp	r5, #0
 8000708:	f000 80ef 	beq.w	80008ea <__udivmoddi4+0x292>
 800070c:	2600      	movs	r6, #0
 800070e:	e9c5 0100 	strd	r0, r1, [r5]
 8000712:	4630      	mov	r0, r6
 8000714:	4631      	mov	r1, r6
 8000716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800071a:	fab3 f683 	clz	r6, r3
 800071e:	2e00      	cmp	r6, #0
 8000720:	d14a      	bne.n	80007b8 <__udivmoddi4+0x160>
 8000722:	428b      	cmp	r3, r1
 8000724:	d302      	bcc.n	800072c <__udivmoddi4+0xd4>
 8000726:	4282      	cmp	r2, r0
 8000728:	f200 80f9 	bhi.w	800091e <__udivmoddi4+0x2c6>
 800072c:	1a84      	subs	r4, r0, r2
 800072e:	eb61 0303 	sbc.w	r3, r1, r3
 8000732:	2001      	movs	r0, #1
 8000734:	469e      	mov	lr, r3
 8000736:	2d00      	cmp	r5, #0
 8000738:	d0e0      	beq.n	80006fc <__udivmoddi4+0xa4>
 800073a:	e9c5 4e00 	strd	r4, lr, [r5]
 800073e:	e7dd      	b.n	80006fc <__udivmoddi4+0xa4>
 8000740:	b902      	cbnz	r2, 8000744 <__udivmoddi4+0xec>
 8000742:	deff      	udf	#255	; 0xff
 8000744:	fab2 f282 	clz	r2, r2
 8000748:	2a00      	cmp	r2, #0
 800074a:	f040 8092 	bne.w	8000872 <__udivmoddi4+0x21a>
 800074e:	eba1 010c 	sub.w	r1, r1, ip
 8000752:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000756:	fa1f fe8c 	uxth.w	lr, ip
 800075a:	2601      	movs	r6, #1
 800075c:	0c20      	lsrs	r0, r4, #16
 800075e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000762:	fb07 1113 	mls	r1, r7, r3, r1
 8000766:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800076a:	fb0e f003 	mul.w	r0, lr, r3
 800076e:	4288      	cmp	r0, r1
 8000770:	d908      	bls.n	8000784 <__udivmoddi4+0x12c>
 8000772:	eb1c 0101 	adds.w	r1, ip, r1
 8000776:	f103 38ff 	add.w	r8, r3, #4294967295
 800077a:	d202      	bcs.n	8000782 <__udivmoddi4+0x12a>
 800077c:	4288      	cmp	r0, r1
 800077e:	f200 80cb 	bhi.w	8000918 <__udivmoddi4+0x2c0>
 8000782:	4643      	mov	r3, r8
 8000784:	1a09      	subs	r1, r1, r0
 8000786:	b2a4      	uxth	r4, r4
 8000788:	fbb1 f0f7 	udiv	r0, r1, r7
 800078c:	fb07 1110 	mls	r1, r7, r0, r1
 8000790:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000794:	fb0e fe00 	mul.w	lr, lr, r0
 8000798:	45a6      	cmp	lr, r4
 800079a:	d908      	bls.n	80007ae <__udivmoddi4+0x156>
 800079c:	eb1c 0404 	adds.w	r4, ip, r4
 80007a0:	f100 31ff 	add.w	r1, r0, #4294967295
 80007a4:	d202      	bcs.n	80007ac <__udivmoddi4+0x154>
 80007a6:	45a6      	cmp	lr, r4
 80007a8:	f200 80bb 	bhi.w	8000922 <__udivmoddi4+0x2ca>
 80007ac:	4608      	mov	r0, r1
 80007ae:	eba4 040e 	sub.w	r4, r4, lr
 80007b2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007b6:	e79c      	b.n	80006f2 <__udivmoddi4+0x9a>
 80007b8:	f1c6 0720 	rsb	r7, r6, #32
 80007bc:	40b3      	lsls	r3, r6
 80007be:	fa22 fc07 	lsr.w	ip, r2, r7
 80007c2:	ea4c 0c03 	orr.w	ip, ip, r3
 80007c6:	fa20 f407 	lsr.w	r4, r0, r7
 80007ca:	fa01 f306 	lsl.w	r3, r1, r6
 80007ce:	431c      	orrs	r4, r3
 80007d0:	40f9      	lsrs	r1, r7
 80007d2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007d6:	fa00 f306 	lsl.w	r3, r0, r6
 80007da:	fbb1 f8f9 	udiv	r8, r1, r9
 80007de:	0c20      	lsrs	r0, r4, #16
 80007e0:	fa1f fe8c 	uxth.w	lr, ip
 80007e4:	fb09 1118 	mls	r1, r9, r8, r1
 80007e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007ec:	fb08 f00e 	mul.w	r0, r8, lr
 80007f0:	4288      	cmp	r0, r1
 80007f2:	fa02 f206 	lsl.w	r2, r2, r6
 80007f6:	d90b      	bls.n	8000810 <__udivmoddi4+0x1b8>
 80007f8:	eb1c 0101 	adds.w	r1, ip, r1
 80007fc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000800:	f080 8088 	bcs.w	8000914 <__udivmoddi4+0x2bc>
 8000804:	4288      	cmp	r0, r1
 8000806:	f240 8085 	bls.w	8000914 <__udivmoddi4+0x2bc>
 800080a:	f1a8 0802 	sub.w	r8, r8, #2
 800080e:	4461      	add	r1, ip
 8000810:	1a09      	subs	r1, r1, r0
 8000812:	b2a4      	uxth	r4, r4
 8000814:	fbb1 f0f9 	udiv	r0, r1, r9
 8000818:	fb09 1110 	mls	r1, r9, r0, r1
 800081c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000820:	fb00 fe0e 	mul.w	lr, r0, lr
 8000824:	458e      	cmp	lr, r1
 8000826:	d908      	bls.n	800083a <__udivmoddi4+0x1e2>
 8000828:	eb1c 0101 	adds.w	r1, ip, r1
 800082c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000830:	d26c      	bcs.n	800090c <__udivmoddi4+0x2b4>
 8000832:	458e      	cmp	lr, r1
 8000834:	d96a      	bls.n	800090c <__udivmoddi4+0x2b4>
 8000836:	3802      	subs	r0, #2
 8000838:	4461      	add	r1, ip
 800083a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800083e:	fba0 9402 	umull	r9, r4, r0, r2
 8000842:	eba1 010e 	sub.w	r1, r1, lr
 8000846:	42a1      	cmp	r1, r4
 8000848:	46c8      	mov	r8, r9
 800084a:	46a6      	mov	lr, r4
 800084c:	d356      	bcc.n	80008fc <__udivmoddi4+0x2a4>
 800084e:	d053      	beq.n	80008f8 <__udivmoddi4+0x2a0>
 8000850:	b15d      	cbz	r5, 800086a <__udivmoddi4+0x212>
 8000852:	ebb3 0208 	subs.w	r2, r3, r8
 8000856:	eb61 010e 	sbc.w	r1, r1, lr
 800085a:	fa01 f707 	lsl.w	r7, r1, r7
 800085e:	fa22 f306 	lsr.w	r3, r2, r6
 8000862:	40f1      	lsrs	r1, r6
 8000864:	431f      	orrs	r7, r3
 8000866:	e9c5 7100 	strd	r7, r1, [r5]
 800086a:	2600      	movs	r6, #0
 800086c:	4631      	mov	r1, r6
 800086e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000872:	f1c2 0320 	rsb	r3, r2, #32
 8000876:	40d8      	lsrs	r0, r3
 8000878:	fa0c fc02 	lsl.w	ip, ip, r2
 800087c:	fa21 f303 	lsr.w	r3, r1, r3
 8000880:	4091      	lsls	r1, r2
 8000882:	4301      	orrs	r1, r0
 8000884:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000888:	fa1f fe8c 	uxth.w	lr, ip
 800088c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000890:	fb07 3610 	mls	r6, r7, r0, r3
 8000894:	0c0b      	lsrs	r3, r1, #16
 8000896:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800089a:	fb00 f60e 	mul.w	r6, r0, lr
 800089e:	429e      	cmp	r6, r3
 80008a0:	fa04 f402 	lsl.w	r4, r4, r2
 80008a4:	d908      	bls.n	80008b8 <__udivmoddi4+0x260>
 80008a6:	eb1c 0303 	adds.w	r3, ip, r3
 80008aa:	f100 38ff 	add.w	r8, r0, #4294967295
 80008ae:	d22f      	bcs.n	8000910 <__udivmoddi4+0x2b8>
 80008b0:	429e      	cmp	r6, r3
 80008b2:	d92d      	bls.n	8000910 <__udivmoddi4+0x2b8>
 80008b4:	3802      	subs	r0, #2
 80008b6:	4463      	add	r3, ip
 80008b8:	1b9b      	subs	r3, r3, r6
 80008ba:	b289      	uxth	r1, r1
 80008bc:	fbb3 f6f7 	udiv	r6, r3, r7
 80008c0:	fb07 3316 	mls	r3, r7, r6, r3
 80008c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008c8:	fb06 f30e 	mul.w	r3, r6, lr
 80008cc:	428b      	cmp	r3, r1
 80008ce:	d908      	bls.n	80008e2 <__udivmoddi4+0x28a>
 80008d0:	eb1c 0101 	adds.w	r1, ip, r1
 80008d4:	f106 38ff 	add.w	r8, r6, #4294967295
 80008d8:	d216      	bcs.n	8000908 <__udivmoddi4+0x2b0>
 80008da:	428b      	cmp	r3, r1
 80008dc:	d914      	bls.n	8000908 <__udivmoddi4+0x2b0>
 80008de:	3e02      	subs	r6, #2
 80008e0:	4461      	add	r1, ip
 80008e2:	1ac9      	subs	r1, r1, r3
 80008e4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008e8:	e738      	b.n	800075c <__udivmoddi4+0x104>
 80008ea:	462e      	mov	r6, r5
 80008ec:	4628      	mov	r0, r5
 80008ee:	e705      	b.n	80006fc <__udivmoddi4+0xa4>
 80008f0:	4606      	mov	r6, r0
 80008f2:	e6e3      	b.n	80006bc <__udivmoddi4+0x64>
 80008f4:	4618      	mov	r0, r3
 80008f6:	e6f8      	b.n	80006ea <__udivmoddi4+0x92>
 80008f8:	454b      	cmp	r3, r9
 80008fa:	d2a9      	bcs.n	8000850 <__udivmoddi4+0x1f8>
 80008fc:	ebb9 0802 	subs.w	r8, r9, r2
 8000900:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000904:	3801      	subs	r0, #1
 8000906:	e7a3      	b.n	8000850 <__udivmoddi4+0x1f8>
 8000908:	4646      	mov	r6, r8
 800090a:	e7ea      	b.n	80008e2 <__udivmoddi4+0x28a>
 800090c:	4620      	mov	r0, r4
 800090e:	e794      	b.n	800083a <__udivmoddi4+0x1e2>
 8000910:	4640      	mov	r0, r8
 8000912:	e7d1      	b.n	80008b8 <__udivmoddi4+0x260>
 8000914:	46d0      	mov	r8, sl
 8000916:	e77b      	b.n	8000810 <__udivmoddi4+0x1b8>
 8000918:	3b02      	subs	r3, #2
 800091a:	4461      	add	r1, ip
 800091c:	e732      	b.n	8000784 <__udivmoddi4+0x12c>
 800091e:	4630      	mov	r0, r6
 8000920:	e709      	b.n	8000736 <__udivmoddi4+0xde>
 8000922:	4464      	add	r4, ip
 8000924:	3802      	subs	r0, #2
 8000926:	e742      	b.n	80007ae <__udivmoddi4+0x156>

08000928 <__aeabi_idiv0>:
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop

0800092c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
void MX_CAN1_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08c      	sub	sp, #48	; 0x30
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000932:	4b2a      	ldr	r3, [pc, #168]	; (80009dc <MX_CAN1_Init+0xb0>)
 8000934:	4a2a      	ldr	r2, [pc, #168]	; (80009e0 <MX_CAN1_Init+0xb4>)
 8000936:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 17;
 8000938:	4b28      	ldr	r3, [pc, #160]	; (80009dc <MX_CAN1_Init+0xb0>)
 800093a:	2211      	movs	r2, #17
 800093c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800093e:	4b27      	ldr	r3, [pc, #156]	; (80009dc <MX_CAN1_Init+0xb0>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000944:	4b25      	ldr	r3, [pc, #148]	; (80009dc <MX_CAN1_Init+0xb0>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 800094a:	4b24      	ldr	r3, [pc, #144]	; (80009dc <MX_CAN1_Init+0xb0>)
 800094c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8000950:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000952:	4b22      	ldr	r3, [pc, #136]	; (80009dc <MX_CAN1_Init+0xb0>)
 8000954:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000958:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800095a:	4b20      	ldr	r3, [pc, #128]	; (80009dc <MX_CAN1_Init+0xb0>)
 800095c:	2200      	movs	r2, #0
 800095e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000960:	4b1e      	ldr	r3, [pc, #120]	; (80009dc <MX_CAN1_Init+0xb0>)
 8000962:	2200      	movs	r2, #0
 8000964:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000966:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <MX_CAN1_Init+0xb0>)
 8000968:	2200      	movs	r2, #0
 800096a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800096c:	4b1b      	ldr	r3, [pc, #108]	; (80009dc <MX_CAN1_Init+0xb0>)
 800096e:	2200      	movs	r2, #0
 8000970:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000972:	4b1a      	ldr	r3, [pc, #104]	; (80009dc <MX_CAN1_Init+0xb0>)
 8000974:	2200      	movs	r2, #0
 8000976:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000978:	4b18      	ldr	r3, [pc, #96]	; (80009dc <MX_CAN1_Init+0xb0>)
 800097a:	2200      	movs	r2, #0
 800097c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800097e:	4817      	ldr	r0, [pc, #92]	; (80009dc <MX_CAN1_Init+0xb0>)
 8000980:	f001 fc9e 	bl	80022c0 <HAL_CAN_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800098a:	f001 f95f 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef Filtre_Reception;
  Filtre_Reception.FilterBank = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
  Filtre_Reception.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
  Filtre_Reception.FilterActivation = CAN_FILTER_ENABLE;
 8000996:	2301      	movs	r3, #1
 8000998:	623b      	str	r3, [r7, #32]
  Filtre_Reception.FilterScale = CAN_FILTERSCALE_32BIT;
 800099a:	2301      	movs	r3, #1
 800099c:	61fb      	str	r3, [r7, #28]
  Filtre_Reception.FilterMode = CAN_FILTERMODE_IDMASK;
 800099e:	2300      	movs	r3, #0
 80009a0:	61bb      	str	r3, [r7, #24]

  uint32_t IDref =  0x10005002 << 3 | 0b100; //IDs venant d'un esclave envoyant pour tout le réseau
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <MX_CAN1_Init+0xb8>)
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t Masque = 0x1F00FF00 << 3 | 0b000; //Valeurs qui filtreront les arrivages -> 0 parce que tout est canné
 80009a6:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <MX_CAN1_Init+0xbc>)
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28

  Filtre_Reception.FilterIdHigh = IDref >> 16;
 80009aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009ac:	0c1b      	lsrs	r3, r3, #16
 80009ae:	603b      	str	r3, [r7, #0]
  Filtre_Reception.FilterIdLow = IDref & 0xFFFF;
 80009b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	607b      	str	r3, [r7, #4]
  Filtre_Reception.FilterMaskIdHigh = Masque >> 16;
 80009b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009b8:	0c1b      	lsrs	r3, r3, #16
 80009ba:	60bb      	str	r3, [r7, #8]
  Filtre_Reception.FilterMaskIdLow = Masque & 0xFFFF;
 80009bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009be:	b29b      	uxth	r3, r3
 80009c0:	60fb      	str	r3, [r7, #12]

  HAL_CAN_ConfigFilter (&hcan1, &Filtre_Reception);
 80009c2:	463b      	mov	r3, r7
 80009c4:	4619      	mov	r1, r3
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <MX_CAN1_Init+0xb0>)
 80009c8:	f001 fd76 	bl	80024b8 <HAL_CAN_ConfigFilter>

  //Exemple d'ID d'esclave à tout le réseau :  0x 1000 630F
  //Exemple d'ID de STM répondant à l'esclave :0x 1063 100F

  HAL_CAN_ActivateNotification (&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING);
 80009cc:	2102      	movs	r1, #2
 80009ce:	4803      	ldr	r0, [pc, #12]	; (80009dc <MX_CAN1_Init+0xb0>)
 80009d0:	f001 ff71 	bl	80028b6 <HAL_CAN_ActivateNotification>

  /* USER CODE END CAN1_Init 2 */

}
 80009d4:	bf00      	nop
 80009d6:	3730      	adds	r7, #48	; 0x30
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	200007c4 	.word	0x200007c4
 80009e0:	40006400 	.word	0x40006400
 80009e4:	80028014 	.word	0x80028014
 80009e8:	f807f800 	.word	0xf807f800

080009ec <CAN_Act>:

void CAN_Act(uint8_t Slave_Addr, uint8_t Port_Addr, int8_t Data){
 80009ec:	b5b0      	push	{r4, r5, r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	71fb      	strb	r3, [r7, #7]
 80009f6:	460b      	mov	r3, r1
 80009f8:	71bb      	strb	r3, [r7, #6]
 80009fa:	4613      	mov	r3, r2
 80009fc:	717b      	strb	r3, [r7, #5]
	int32_t Adresse = 0x10000000 | (Slave_Addr << 16) | (CAN_MASTER_ADDR << 8) | Port_Addr; //Esclave + Port Read A
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	041b      	lsls	r3, r3, #16
 8000a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a06:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8000a0a:	79ba      	ldrb	r2, [r7, #6]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	60fb      	str	r3, [r7, #12]
	CAN_Send(Adresse,Data);
 8000a10:	68f8      	ldr	r0, [r7, #12]
 8000a12:	f7ff fd7f 	bl	8000514 <__aeabi_i2d>
 8000a16:	4604      	mov	r4, r0
 8000a18:	460d      	mov	r5, r1
 8000a1a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	ec45 4b10 	vmov	d0, r4, r5
 8000a24:	f000 f804 	bl	8000a30 <CAN_Send>
}
 8000a28:	bf00      	nop
 8000a2a:	3710      	adds	r7, #16
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bdb0      	pop	{r4, r5, r7, pc}

08000a30 <CAN_Send>:
/**
 * @brief CAN Send message
 * @retval none
 * Dans l'hypothèse qu'on aura pas besoin d'envoyer de trames avec plus d'un octet
 */
void CAN_Send(double Addr, int8_t Data){
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08e      	sub	sp, #56	; 0x38
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	ed87 0b02 	vstr	d0, [r7, #8]
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
	CAN_TxHeaderTypeDef   TxHeader;
	uint8_t               TxData[8];
	uint32_t              TxMailbox;

	TxHeader.IDE = CAN_ID_EXT; //MODE CAN ETENDU
 8000a3e:	2304      	movs	r3, #4
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.ExtId = Addr;
 8000a42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000a46:	f7ff fdcf 	bl	80005e8 <__aeabi_d2uiz>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.RTR = CAN_RTR_DATA;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	62fb      	str	r3, [r7, #44]	; 0x2c
	TxHeader.DLC = 1;
 8000a52:	2301      	movs	r3, #1
 8000a54:	633b      	str	r3, [r7, #48]	; 0x30
	TxData[0] = Data;
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	763b      	strb	r3, [r7, #24]

	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	f107 0218 	add.w	r2, r7, #24
 8000a62:	f107 0120 	add.w	r1, r7, #32
 8000a66:	4806      	ldr	r0, [pc, #24]	; (8000a80 <CAN_Send+0x50>)
 8000a68:	f001 fe4a 	bl	8002700 <HAL_CAN_AddTxMessage>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <CAN_Send+0x46>
	{
	 Error_Handler ();
 8000a72:	f001 f8eb 	bl	8001c4c <Error_Handler>
	}
	//Message envoyé ?
	//while(HAL_CAN_IsTxMessagePending(&hcan1, &TxMailbox));

}
 8000a76:	bf00      	nop
 8000a78:	3738      	adds	r7, #56	; 0x38
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200007c4 	.word	0x200007c4

08000a84 <temporisation>:
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f245 2208 	movw	r2, #21000	; 0x5208
 8000a92:	fb02 f303 	mul.w	r3, r2, r3
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	bf00      	nop
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	1e5a      	subs	r2, r3, #1
 8000a9e:	60fa      	str	r2, [r7, #12]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	dcfa      	bgt.n	8000a9a <temporisation+0x16>
 8000aa4:	bf00      	nop
 8000aa6:	bf00      	nop
 8000aa8:	3714      	adds	r7, #20
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
	...

08000ab4 <LED_Blink>:
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <LED_Blink+0x6c>)
 8000abe:	695b      	ldr	r3, [r3, #20]
 8000ac0:	73fb      	strb	r3, [r7, #15]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	bf14      	ite	ne
 8000ac8:	2301      	movne	r3, #1
 8000aca:	2300      	moveq	r3, #0
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	73bb      	strb	r3, [r7, #14]
 8000ad0:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <LED_Blink+0x6c>)
 8000ad2:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 8000ad6:	615a      	str	r2, [r3, #20]
 8000ad8:	2096      	movs	r0, #150	; 0x96
 8000ada:	f7ff ffd3 	bl	8000a84 <temporisation>
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <LED_Blink+0x6c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	615a      	str	r2, [r3, #20]
 8000ae4:	2096      	movs	r0, #150	; 0x96
 8000ae6:	f7ff ffcd 	bl	8000a84 <temporisation>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	3b01      	subs	r3, #1
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	bfcc      	ite	gt
 8000af6:	2301      	movgt	r3, #1
 8000af8:	2300      	movle	r3, #0
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	7bbb      	ldrb	r3, [r7, #14]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	bf0c      	ite	eq
 8000b02:	2301      	moveq	r3, #1
 8000b04:	2300      	movne	r3, #0
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d1df      	bne.n	8000ad0 <LED_Blink+0x1c>
 8000b10:	4a03      	ldr	r2, [pc, #12]	; (8000b20 <LED_Blink+0x6c>)
 8000b12:	7bfb      	ldrb	r3, [r7, #15]
 8000b14:	6153      	str	r3, [r2, #20]
 8000b16:	bf00      	nop
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40020c00 	.word	0x40020c00

08000b24 <LED_Operate>:
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	71fb      	strb	r3, [r7, #7]
 8000b2e:	79fa      	ldrb	r2, [r7, #7]
 8000b30:	4613      	mov	r3, r2
 8000b32:	011b      	lsls	r3, r3, #4
 8000b34:	1a9b      	subs	r3, r3, r2
 8000b36:	031b      	lsls	r3, r3, #12
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <LED_Operate+0x28>)
 8000b3c:	615a      	str	r2, [r3, #20]
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	40020c00 	.word	0x40020c00

08000b50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b54:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <__NVIC_GetPriorityGrouping+0x18>)
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	0a1b      	lsrs	r3, r3, #8
 8000b5a:	f003 0307 	and.w	r3, r3, #7
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	db0b      	blt.n	8000b96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	f003 021f 	and.w	r2, r3, #31
 8000b84:	4907      	ldr	r1, [pc, #28]	; (8000ba4 <__NVIC_EnableIRQ+0x38>)
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	095b      	lsrs	r3, r3, #5
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	e000e100 	.word	0xe000e100

08000ba8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	6039      	str	r1, [r7, #0]
 8000bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	db0a      	blt.n	8000bd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	490c      	ldr	r1, [pc, #48]	; (8000bf4 <__NVIC_SetPriority+0x4c>)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	0112      	lsls	r2, r2, #4
 8000bc8:	b2d2      	uxtb	r2, r2
 8000bca:	440b      	add	r3, r1
 8000bcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd0:	e00a      	b.n	8000be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	4908      	ldr	r1, [pc, #32]	; (8000bf8 <__NVIC_SetPriority+0x50>)
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	f003 030f 	and.w	r3, r3, #15
 8000bde:	3b04      	subs	r3, #4
 8000be0:	0112      	lsls	r2, r2, #4
 8000be2:	b2d2      	uxtb	r2, r2
 8000be4:	440b      	add	r3, r1
 8000be6:	761a      	strb	r2, [r3, #24]
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000e100 	.word	0xe000e100
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b089      	sub	sp, #36	; 0x24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	f1c3 0307 	rsb	r3, r3, #7
 8000c16:	2b04      	cmp	r3, #4
 8000c18:	bf28      	it	cs
 8000c1a:	2304      	movcs	r3, #4
 8000c1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3304      	adds	r3, #4
 8000c22:	2b06      	cmp	r3, #6
 8000c24:	d902      	bls.n	8000c2c <NVIC_EncodePriority+0x30>
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	3b03      	subs	r3, #3
 8000c2a:	e000      	b.n	8000c2e <NVIC_EncodePriority+0x32>
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c30:	f04f 32ff 	mov.w	r2, #4294967295
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43da      	mvns	r2, r3
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	401a      	ands	r2, r3
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c44:	f04f 31ff 	mov.w	r1, #4294967295
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4e:	43d9      	mvns	r1, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	4313      	orrs	r3, r2
         );
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3724      	adds	r7, #36	; 0x24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
	...

08000c64 <UART_Init>:
extern osThreadId LIN_SelectorHandle;

//UART_Init() sets up the UART for a 8-bit data, No Parity, 1 Stop bit
//at 9600 baud with transmitter interrupts enabled
void UART_Init (void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
	/* Enable interrupt */
	NVIC_EnableIRQ(USART3_IRQn);
 8000c6a:	2027      	movs	r0, #39	; 0x27
 8000c6c:	f7ff ff7e 	bl	8000b6c <__NVIC_EnableIRQ>

	//enable GPIO
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c70:	2300      	movs	r3, #0
 8000c72:	60bb      	str	r3, [r7, #8]
 8000c74:	4b36      	ldr	r3, [pc, #216]	; (8000d50 <UART_Init+0xec>)
 8000c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c78:	4a35      	ldr	r2, [pc, #212]	; (8000d50 <UART_Init+0xec>)
 8000c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c80:	4b33      	ldr	r3, [pc, #204]	; (8000d50 <UART_Init+0xec>)
 8000c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	4b2f      	ldr	r3, [pc, #188]	; (8000d50 <UART_Init+0xec>)
 8000c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c94:	4a2e      	ldr	r2, [pc, #184]	; (8000d50 <UART_Init+0xec>)
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9c:	4b2c      	ldr	r3, [pc, #176]	; (8000d50 <UART_Init+0xec>)
 8000c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca0:	f003 0301 	and.w	r3, r3, #1
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca8:	2300      	movs	r3, #0
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	4b28      	ldr	r3, [pc, #160]	; (8000d50 <UART_Init+0xec>)
 8000cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb0:	4a27      	ldr	r2, [pc, #156]	; (8000d50 <UART_Init+0xec>)
 8000cb2:	f043 0302 	orr.w	r3, r3, #2
 8000cb6:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb8:	4b25      	ldr	r3, [pc, #148]	; (8000d50 <UART_Init+0xec>)
 8000cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbc:	f003 0302 	and.w	r3, r3, #2
 8000cc0:	603b      	str	r3, [r7, #0]
 8000cc2:	683b      	ldr	r3, [r7, #0]

  
    //enable USART3
	  huart3.Instance = USART3;
 8000cc4:	4b23      	ldr	r3, [pc, #140]	; (8000d54 <UART_Init+0xf0>)
 8000cc6:	4a24      	ldr	r2, [pc, #144]	; (8000d58 <UART_Init+0xf4>)
 8000cc8:	601a      	str	r2, [r3, #0]
	  huart3.Init.BaudRate = 9600;
 8000cca:	4b22      	ldr	r3, [pc, #136]	; (8000d54 <UART_Init+0xf0>)
 8000ccc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000cd0:	605a      	str	r2, [r3, #4]
	  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cd2:	4b20      	ldr	r3, [pc, #128]	; (8000d54 <UART_Init+0xf0>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
	  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cd8:	4b1e      	ldr	r3, [pc, #120]	; (8000d54 <UART_Init+0xf0>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	60da      	str	r2, [r3, #12]
	  huart3.Init.Parity = UART_PARITY_NONE;
 8000cde:	4b1d      	ldr	r3, [pc, #116]	; (8000d54 <UART_Init+0xf0>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	611a      	str	r2, [r3, #16]
	  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ce4:	4b1b      	ldr	r3, [pc, #108]	; (8000d54 <UART_Init+0xf0>)
 8000ce6:	220c      	movs	r2, #12
 8000ce8:	615a      	str	r2, [r3, #20]
	  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cea:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <UART_Init+0xf0>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	619a      	str	r2, [r3, #24]
	  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf0:	4b18      	ldr	r3, [pc, #96]	; (8000d54 <UART_Init+0xf0>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	61da      	str	r2, [r3, #28]
	  if (HAL_LIN_Init(&huart3, UART_LINBREAKDETECTLENGTH_10B) != HAL_OK)
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4816      	ldr	r0, [pc, #88]	; (8000d54 <UART_Init+0xf0>)
 8000cfa:	f003 fceb 	bl	80046d4 <HAL_LIN_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <UART_Init+0xa4>
	  {
	    Error_Handler();
 8000d04:	f000 ffa2 	bl	8001c4c <Error_Handler>
	  }
		uint32_t prioritygroup = 0x00U;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60fb      	str	r3, [r7, #12]
		prioritygroup = NVIC_GetPriorityGrouping();
 8000d0c:	f7ff ff20 	bl	8000b50 <__NVIC_GetPriorityGrouping>
 8000d10:	60f8      	str	r0, [r7, #12]
		NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(prioritygroup, 15, 15));
 8000d12:	220f      	movs	r2, #15
 8000d14:	210f      	movs	r1, #15
 8000d16:	68f8      	ldr	r0, [r7, #12]
 8000d18:	f7ff ff70 	bl	8000bfc <NVIC_EncodePriority>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	4619      	mov	r1, r3
 8000d20:	2027      	movs	r0, #39	; 0x27
 8000d22:	f7ff ff41 	bl	8000ba8 <__NVIC_SetPriority>

	  __HAL_UART_ENABLE_IT(&huart3,UART_IT_RXNE);
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <UART_Init+0xf0>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	68da      	ldr	r2, [r3, #12]
 8000d2c:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <UART_Init+0xf0>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f042 0220 	orr.w	r2, r2, #32
 8000d34:	60da      	str	r2, [r3, #12]
  
    //USART3->CR2 |= 0x00004020;	//enable LIN mode and LBDL a desactiver pour dernier test final interruption com
    USART3->CR2 |= 0x00004060;	//enable LIN mode, LBDIE and LBDL for break detection
 8000d36:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <UART_Init+0xf4>)
 8000d38:	691b      	ldr	r3, [r3, #16]
 8000d3a:	4a07      	ldr	r2, [pc, #28]	; (8000d58 <UART_Init+0xf4>)
 8000d3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d40:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000d44:	6113      	str	r3, [r2, #16]
}
 8000d46:	bf00      	nop
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40023800 	.word	0x40023800
 8000d54:	20000090 	.word	0x20000090
 8000d58:	40004800 	.word	0x40004800

08000d5c <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
	uint8_t calcul;
	uint8_t checksum1;
	uint8_t trash;
	uint8_t trash2;
	int timeout=100000;
 8000d62:	4b59      	ldr	r3, [pc, #356]	; (8000ec8 <USART3_IRQHandler+0x16c>)
 8000d64:	60fb      	str	r3, [r7, #12]
	volatile int compteur=0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	607b      	str	r3, [r7, #4]

	HAL_UART_IRQHandler(&huart3);
 8000d6a:	4858      	ldr	r0, [pc, #352]	; (8000ecc <USART3_IRQHandler+0x170>)
 8000d6c:	f003 fd18 	bl	80047a0 <HAL_UART_IRQHandler>
	if (USART3->SR & USART_SR_LBD_Msk) //Si une trame arrive
 8000d70:	4b57      	ldr	r3, [pc, #348]	; (8000ed0 <USART3_IRQHandler+0x174>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	f000 809b 	beq.w	8000eb4 <USART3_IRQHandler+0x158>
	{
		USART3->SR &= ~(USART_SR_LBD_Msk);//RAZ flag
 8000d7e:	4b54      	ldr	r3, [pc, #336]	; (8000ed0 <USART3_IRQHandler+0x174>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a53      	ldr	r2, [pc, #332]	; (8000ed0 <USART3_IRQHandler+0x174>)
 8000d84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d88:	6013      	str	r3, [r2, #0]
		while(!(USART3->SR & 0x00000020) && timeout>compteur) //RXNE donnée prete a être lue
 8000d8a:	e002      	b.n	8000d92 <USART3_IRQHandler+0x36>
		{
			compteur++;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	607b      	str	r3, [r7, #4]
		while(!(USART3->SR & 0x00000020) && timeout>compteur) //RXNE donnée prete a être lue
 8000d92:	4b4f      	ldr	r3, [pc, #316]	; (8000ed0 <USART3_IRQHandler+0x174>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 0320 	and.w	r3, r3, #32
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d103      	bne.n	8000da6 <USART3_IRQHandler+0x4a>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	68fa      	ldr	r2, [r7, #12]
 8000da2:	429a      	cmp	r2, r3
 8000da4:	dcf2      	bgt.n	8000d8c <USART3_IRQHandler+0x30>
		}
		compteur=0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	607b      	str	r3, [r7, #4]
		trash = USART3->DR;
 8000daa:	4b49      	ldr	r3, [pc, #292]	; (8000ed0 <USART3_IRQHandler+0x174>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	72fb      	strb	r3, [r7, #11]
		while(!(USART3->SR & 0x00000020) && timeout>compteur) //RXNE donnée prete a être lue
 8000db0:	e002      	b.n	8000db8 <USART3_IRQHandler+0x5c>
		{
			compteur++;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	3301      	adds	r3, #1
 8000db6:	607b      	str	r3, [r7, #4]
		while(!(USART3->SR & 0x00000020) && timeout>compteur) //RXNE donnée prete a être lue
 8000db8:	4b45      	ldr	r3, [pc, #276]	; (8000ed0 <USART3_IRQHandler+0x174>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f003 0320 	and.w	r3, r3, #32
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d103      	bne.n	8000dcc <USART3_IRQHandler+0x70>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	68fa      	ldr	r2, [r7, #12]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	dcf2      	bgt.n	8000db2 <USART3_IRQHandler+0x56>
		}
		compteur=0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	607b      	str	r3, [r7, #4]
		trash2 = USART3->DR;
 8000dd0:	4b3f      	ldr	r3, [pc, #252]	; (8000ed0 <USART3_IRQHandler+0x174>)
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	72bb      	strb	r3, [r7, #10]
		while(!(USART3->SR & 0x00000020) && timeout>compteur) //RXNE donnée prete a être lue
 8000dd6:	e002      	b.n	8000dde <USART3_IRQHandler+0x82>
		{
			compteur++;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	607b      	str	r3, [r7, #4]
		while(!(USART3->SR & 0x00000020) && timeout>compteur) //RXNE donnée prete a être lue
 8000dde:	4b3c      	ldr	r3, [pc, #240]	; (8000ed0 <USART3_IRQHandler+0x174>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f003 0320 	and.w	r3, r3, #32
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d103      	bne.n	8000df2 <USART3_IRQHandler+0x96>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	68fa      	ldr	r2, [r7, #12]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	dcf2      	bgt.n	8000dd8 <USART3_IRQHandler+0x7c>
		}
		compteur=0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]
		//mode requete intégrer new_request

		Rx_Msg.ID = USART3->DR;
 8000df6:	4b36      	ldr	r3, [pc, #216]	; (8000ed0 <USART3_IRQHandler+0x174>)
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	4b35      	ldr	r3, [pc, #212]	; (8000ed4 <USART3_IRQHandler+0x178>)
 8000dfe:	701a      	strb	r2, [r3, #0]
		if( Rx_Msg.ID | 0xF > 0 ) //On a besoin de récup des données
		{
			//mode reception message
			while(!(USART3->SR & 0x00000020) && timeout>compteur) //RXNE donnée prete a être lue
 8000e00:	e002      	b.n	8000e08 <USART3_IRQHandler+0xac>
			{
				compteur++;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	3301      	adds	r3, #1
 8000e06:	607b      	str	r3, [r7, #4]
			while(!(USART3->SR & 0x00000020) && timeout>compteur) //RXNE donnée prete a être lue
 8000e08:	4b31      	ldr	r3, [pc, #196]	; (8000ed0 <USART3_IRQHandler+0x174>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f003 0320 	and.w	r3, r3, #32
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d103      	bne.n	8000e1c <USART3_IRQHandler+0xc0>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	68fa      	ldr	r2, [r7, #12]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	dcf2      	bgt.n	8000e02 <USART3_IRQHandler+0xa6>
			}
			compteur=0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	607b      	str	r3, [r7, #4]
			Rx_Msg.length = Rx_Msg.ID & 0xF;
 8000e20:	4b2c      	ldr	r3, [pc, #176]	; (8000ed4 <USART3_IRQHandler+0x178>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	f003 030f 	and.w	r3, r3, #15
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4b2a      	ldr	r3, [pc, #168]	; (8000ed4 <USART3_IRQHandler+0x178>)
 8000e2c:	705a      	strb	r2, [r3, #1]
			for(int i = 0; i<Rx_Msg.length-1;i++)
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
 8000e32:	e01b      	b.n	8000e6c <USART3_IRQHandler+0x110>
			{
				Rx_Msg.data[i] = USART3->DR;
 8000e34:	4b26      	ldr	r3, [pc, #152]	; (8000ed0 <USART3_IRQHandler+0x174>)
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	b2d9      	uxtb	r1, r3
 8000e3a:	4a26      	ldr	r2, [pc, #152]	; (8000ed4 <USART3_IRQHandler+0x178>)
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	4413      	add	r3, r2
 8000e40:	3302      	adds	r3, #2
 8000e42:	460a      	mov	r2, r1
 8000e44:	701a      	strb	r2, [r3, #0]
				while(!(USART3->SR & 0x00000020) && timeout>compteur) //RXNE donnée prete a être lue
 8000e46:	e002      	b.n	8000e4e <USART3_IRQHandler+0xf2>
				{
					compteur++;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	607b      	str	r3, [r7, #4]
				while(!(USART3->SR & 0x00000020) && timeout>compteur) //RXNE donnée prete a être lue
 8000e4e:	4b20      	ldr	r3, [pc, #128]	; (8000ed0 <USART3_IRQHandler+0x174>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f003 0320 	and.w	r3, r3, #32
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d103      	bne.n	8000e62 <USART3_IRQHandler+0x106>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	68fa      	ldr	r2, [r7, #12]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	dcf2      	bgt.n	8000e48 <USART3_IRQHandler+0xec>
				}
				compteur=0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	607b      	str	r3, [r7, #4]
			for(int i = 0; i<Rx_Msg.length-1;i++)
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <USART3_IRQHandler+0x178>)
 8000e6e:	785b      	ldrb	r3, [r3, #1]
 8000e70:	3b01      	subs	r3, #1
 8000e72:	697a      	ldr	r2, [r7, #20]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	dbdd      	blt.n	8000e34 <USART3_IRQHandler+0xd8>
			}
			checksum1 = USART3->DR;
 8000e78:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <USART3_IRQHandler+0x174>)
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	727b      	strb	r3, [r7, #9]
			calcul=checksum(Rx_Msg.length, Rx_Msg.data);
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <USART3_IRQHandler+0x178>)
 8000e80:	785b      	ldrb	r3, [r3, #1]
 8000e82:	4915      	ldr	r1, [pc, #84]	; (8000ed8 <USART3_IRQHandler+0x17c>)
 8000e84:	4618      	mov	r0, r3
 8000e86:	f000 f8a7 	bl	8000fd8 <checksum>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	723b      	strb	r3, [r7, #8]

			//Si le checksum est mauvais, on flushe toutes les données
			if(checksum1 != calcul)
 8000e8e:	7a7a      	ldrb	r2, [r7, #9]
 8000e90:	7a3b      	ldrb	r3, [r7, #8]
 8000e92:	429a      	cmp	r2, r3
 8000e94:	d00e      	beq.n	8000eb4 <USART3_IRQHandler+0x158>
			{
				for(int i=0;i<10;i++)
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	e008      	b.n	8000eae <USART3_IRQHandler+0x152>
				{
					Rx_Msg.data[i] = 0;
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ed4 <USART3_IRQHandler+0x178>)
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	3302      	adds	r3, #2
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	701a      	strb	r2, [r3, #0]
				for(int i=0;i<10;i++)
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	2b09      	cmp	r3, #9
 8000eb2:	ddf3      	ble.n	8000e9c <USART3_IRQHandler+0x140>
				}
			}
		}
	}

	osSignalSet(LIN_SelectorHandle,SIGNAL_LIN_INTERRUPT);
 8000eb4:	4b09      	ldr	r3, [pc, #36]	; (8000edc <USART3_IRQHandler+0x180>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2101      	movs	r1, #1
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f004 fbfc 	bl	80056b8 <osSignalSet>

	//fin de l'interruption
}
 8000ec0:	bf00      	nop
 8000ec2:	3718      	adds	r7, #24
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	000186a0 	.word	0x000186a0
 8000ecc:	20000090 	.word	0x20000090
 8000ed0:	40004800 	.word	0x40004800
 8000ed4:	20000788 	.word	0x20000788
 8000ed8:	2000078a 	.word	0x2000078a
 8000edc:	200007f4 	.word	0x200007f4

08000ee0 <SendLINMessage>:

/*--- Transmit LIN Message ---*/

void SendLINMessage(LINMSG *data)
  {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	 uint8_t calcul;
	 for(int i = (Tx_Msg.length-1); i>-1; i--)
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <SendLINMessage+0x50>)
 8000eea:	785b      	ldrb	r3, [r3, #1]
 8000eec:	3b01      	subs	r3, #1
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	e00a      	b.n	8000f08 <SendLINMessage+0x28>
	 {
		 UART_PutChar(Tx_Msg.data[i]);
 8000ef2:	4a0f      	ldr	r2, [pc, #60]	; (8000f30 <SendLINMessage+0x50>)
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	3302      	adds	r3, #2
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f000 f84b 	bl	8000f98 <UART_PutChar>
	 for(int i = (Tx_Msg.length-1); i>-1; i--)
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	3b01      	subs	r3, #1
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	daf1      	bge.n	8000ef2 <SendLINMessage+0x12>
	 }
	 calcul=checksum(Tx_Msg.length, Tx_Msg.data);
 8000f0e:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <SendLINMessage+0x50>)
 8000f10:	785b      	ldrb	r3, [r3, #1]
 8000f12:	4908      	ldr	r1, [pc, #32]	; (8000f34 <SendLINMessage+0x54>)
 8000f14:	4618      	mov	r0, r3
 8000f16:	f000 f85f 	bl	8000fd8 <checksum>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	72fb      	strb	r3, [r7, #11]
	 UART_PutChar(calcul);
 8000f1e:	7afb      	ldrb	r3, [r7, #11]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f000 f839 	bl	8000f98 <UART_PutChar>
  }
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	2000077c 	.word	0x2000077c
 8000f34:	2000077e 	.word	0x2000077e

08000f38 <SendLINRequest>:

/*--- Transmit LIN Request ---*/

void SendLINRequest(LINMSG *msg)
  {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	HAL_NVIC_DisableIRQ(USART3_IRQn);
 8000f40:	2027      	movs	r0, #39	; 0x27
 8000f42:	f002 f81d 	bl	8002f80 <HAL_NVIC_DisableIRQ>
	sync_break();
 8000f46:	f000 f817 	bl	8000f78 <sync_break>
	 //ID
	UART_PutChar(Tx_Msg.ID);
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <SendLINRequest+0x3c>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 f822 	bl	8000f98 <UART_PutChar>
	HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f54:	2027      	movs	r0, #39	; 0x27
 8000f56:	f002 f805 	bl	8002f64 <HAL_NVIC_EnableIRQ>
	if(Tx_Msg.ID & 0xF > 0) //si adresse > 0x24 alors il s'agit d'envoi maitre data
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <SendLINRequest+0x3c>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d002      	beq.n	8000f6c <SendLINRequest+0x34>
	{
		SendLINMessage(&Tx_Msg);
 8000f66:	4803      	ldr	r0, [pc, #12]	; (8000f74 <SendLINRequest+0x3c>)
 8000f68:	f7ff ffba 	bl	8000ee0 <SendLINMessage>
	}
  }
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	2000077c 	.word	0x2000077c

08000f78 <sync_break>:


/*--- Send sync field +Tdel and break ---*/

void sync_break(void)
  {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
	USART3->CR1 |= 0x00000001;   	//send Breaks
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <sync_break+0x1c>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	4a04      	ldr	r2, [pc, #16]	; (8000f94 <sync_break+0x1c>)
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	60d3      	str	r3, [r2, #12]
	UART_PutChar(0x55);				//send Syncs
 8000f88:	2055      	movs	r0, #85	; 0x55
 8000f8a:	f000 f805 	bl	8000f98 <UART_PutChar>
  }
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40004800 	.word	0x40004800

08000f98 <UART_PutChar>:

/*--- Transmit char ---*/
 
void UART_PutChar(uint8_t data)
  {
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
		//while(!(USART3->SR & 0x00000020)); 	//attends que registre envoi/reception libre
		USART3->DR = data;				//envoi la donnée
 8000fa2:	4a0c      	ldr	r2, [pc, #48]	; (8000fd4 <UART_PutChar+0x3c>)
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	6053      	str	r3, [r2, #4]
		while(!(USART3->SR & 0x00000080));	// donnee transferee au registre de decalage
 8000fa8:	bf00      	nop
 8000faa:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <UART_PutChar+0x3c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d0f9      	beq.n	8000faa <UART_PutChar+0x12>
		while(!(USART3->SR & 0x00000040));	//fin de transmission
 8000fb6:	bf00      	nop
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <UART_PutChar+0x3c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d0f9      	beq.n	8000fb8 <UART_PutChar+0x20>
  }
 8000fc4:	bf00      	nop
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	40004800 	.word	0x40004800

08000fd8 <checksum>:
}

/*--- Calculate lin checksum ---*/

uint8_t checksum(uint8_t length, uint8_t *data)
  {
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	6039      	str	r1, [r7, #0]
 8000fe2:	71fb      	strb	r3, [r7, #7]
  uint8_t ix;
  uint16_t check_sum = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	81bb      	strh	r3, [r7, #12]

  for(ix = 0; ix < length-1; ix++)
 8000fe8:	2300      	movs	r3, #0
 8000fea:	73fb      	strb	r3, [r7, #15]
 8000fec:	e010      	b.n	8001010 <checksum+0x38>
    {
    check_sum += data[ix];
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	683a      	ldr	r2, [r7, #0]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	89bb      	ldrh	r3, [r7, #12]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	81bb      	strh	r3, [r7, #12]
    if(check_sum >= 256){
 8000ffe:	89bb      	ldrh	r3, [r7, #12]
 8001000:	2bff      	cmp	r3, #255	; 0xff
 8001002:	d902      	bls.n	800100a <checksum+0x32>
      check_sum -= 255;
 8001004:	89bb      	ldrh	r3, [r7, #12]
 8001006:	3bff      	subs	r3, #255	; 0xff
 8001008:	81bb      	strh	r3, [r7, #12]
  for(ix = 0; ix < length-1; ix++)
 800100a:	7bfb      	ldrb	r3, [r7, #15]
 800100c:	3301      	adds	r3, #1
 800100e:	73fb      	strb	r3, [r7, #15]
 8001010:	7bfa      	ldrb	r2, [r7, #15]
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	3b01      	subs	r3, #1
 8001016:	429a      	cmp	r2, r3
 8001018:	dbe9      	blt.n	8000fee <checksum+0x16>
      }
    }

  return (uint8_t)(0xff - check_sum);
 800101a:	89bb      	ldrh	r3, [r7, #12]
 800101c:	b2db      	uxtb	r3, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	b2db      	uxtb	r3, r3
  }
 8001022:	4618      	mov	r0, r3
 8001024:	3714      	adds	r7, #20
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4a07      	ldr	r2, [pc, #28]	; (800105c <vApplicationGetIdleTaskMemory+0x2c>)
 8001040:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	4a06      	ldr	r2, [pc, #24]	; (8001060 <vApplicationGetIdleTaskMemory+0x30>)
 8001046:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2280      	movs	r2, #128	; 0x80
 800104c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800104e:	bf00      	nop
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	200000d4 	.word	0x200000d4
 8001060:	20000128 	.word	0x20000128

08001064 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	4a07      	ldr	r2, [pc, #28]	; (8001090 <vApplicationGetTimerTaskMemory+0x2c>)
 8001074:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	4a06      	ldr	r2, [pc, #24]	; (8001094 <vApplicationGetTimerTaskMemory+0x30>)
 800107a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001082:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001084:	bf00      	nop
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	20000328 	.word	0x20000328
 8001094:	2000037c 	.word	0x2000037c

08001098 <Init_PortB>:

#include "stm32f4xx_hal.h"
#include "lcd_displaytech162.h"

void Init_PortB(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
	  /* Activate Port B and D for LCD Display */
	  SET_BIT(RCC->AHB1ENR,RCC_AHB1ENR_GPIOBEN);
 800109c:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <Init_PortB+0x58>)
 800109e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a0:	4a13      	ldr	r2, [pc, #76]	; (80010f0 <Init_PortB+0x58>)
 80010a2:	f043 0302 	orr.w	r3, r3, #2
 80010a6:	6313      	str	r3, [r2, #48]	; 0x30
	  /* Setup GPIO 15,14 and 13 to Output (RS, R/W, E) */
	  GPIOB->MODER |= 0x54000000;
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <Init_PortB+0x5c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a11      	ldr	r2, [pc, #68]	; (80010f4 <Init_PortB+0x5c>)
 80010ae:	f043 43a8 	orr.w	r3, r3, #1409286144	; 0x54000000
 80010b2:	6013      	str	r3, [r2, #0]
	  /* Output in push-pull mode */
	  GPIOB->OTYPER &= 0xFFFF1FFF;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <Init_PortB+0x5c>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	4a0e      	ldr	r2, [pc, #56]	; (80010f4 <Init_PortB+0x5c>)
 80010ba:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80010be:	6053      	str	r3, [r2, #4]
	  /* Output speed set to High */
	  GPIOB->OSPEEDR |= 0xFC000000;
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <Init_PortB+0x5c>)
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	4a0b      	ldr	r2, [pc, #44]	; (80010f4 <Init_PortB+0x5c>)
 80010c6:	f043 437c 	orr.w	r3, r3, #4227858432	; 0xfc000000
 80010ca:	6093      	str	r3, [r2, #8]
	  /* No PU/PD resistor */
	  GPIOB->PUPDR &= 0x03FFFFFF;
 80010cc:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <Init_PortB+0x5c>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	4a08      	ldr	r2, [pc, #32]	; (80010f4 <Init_PortB+0x5c>)
 80010d2:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 80010d6:	60d3      	str	r3, [r2, #12]
	  /* Set all to 0 */
	  GPIOB->ODR &= 0xFFFF1FFF;
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <Init_PortB+0x5c>)
 80010da:	695b      	ldr	r3, [r3, #20]
 80010dc:	4a05      	ldr	r2, [pc, #20]	; (80010f4 <Init_PortB+0x5c>)
 80010de:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80010e2:	6153      	str	r3, [r2, #20]

}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40020400 	.word	0x40020400

080010f8 <Init_PortDasRead>:

void Init_PortDasRead(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
	  /* Activate Port D for LCD Display */
	  SET_BIT(RCC->AHB1ENR,RCC_AHB1ENR_GPIODEN);
 80010fc:	4b0b      	ldr	r3, [pc, #44]	; (800112c <Init_PortDasRead+0x34>)
 80010fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001100:	4a0a      	ldr	r2, [pc, #40]	; (800112c <Init_PortDasRead+0x34>)
 8001102:	f043 0308 	orr.w	r3, r3, #8
 8001106:	6313      	str	r3, [r2, #48]	; 0x30
	  /* Setup GPIO 11,10,9 and 8 to input (b7,b6,b5,b4) */
	  GPIOD->MODER &= 0xFF00FFFF;
 8001108:	4b09      	ldr	r3, [pc, #36]	; (8001130 <Init_PortDasRead+0x38>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a08      	ldr	r2, [pc, #32]	; (8001130 <Init_PortDasRead+0x38>)
 800110e:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001112:	6013      	str	r3, [r2, #0]
	  /* No PU/PD resistor */
	  GPIOD->PUPDR &= 0xFF00FFFF;
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <Init_PortDasRead+0x38>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	4a05      	ldr	r2, [pc, #20]	; (8001130 <Init_PortDasRead+0x38>)
 800111a:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800111e:	60d3      	str	r3, [r2, #12]

}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	40023800 	.word	0x40023800
 8001130:	40020c00 	.word	0x40020c00

08001134 <Init_PortDasWrite>:

void Init_PortDasWrite(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
	  /* Activate Port D for LCD Display */
	  SET_BIT(RCC->AHB1ENR,RCC_AHB1ENR_GPIODEN);
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <Init_PortDasWrite+0x4c>)
 800113a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113c:	4a10      	ldr	r2, [pc, #64]	; (8001180 <Init_PortDasWrite+0x4c>)
 800113e:	f043 0308 	orr.w	r3, r3, #8
 8001142:	6313      	str	r3, [r2, #48]	; 0x30
	  /* Setup GPIO 11,10,9 and 8 to Output (b7,b6,b5,b4) */
	  GPIOD->MODER |= 0x00550000;
 8001144:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <Init_PortDasWrite+0x50>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a0e      	ldr	r2, [pc, #56]	; (8001184 <Init_PortDasWrite+0x50>)
 800114a:	f443 03aa 	orr.w	r3, r3, #5570560	; 0x550000
 800114e:	6013      	str	r3, [r2, #0]
	  /* Output in push-pull mode */
	  GPIOD->OTYPER &= 0xFFFFF0FF;
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <Init_PortDasWrite+0x50>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	4a0b      	ldr	r2, [pc, #44]	; (8001184 <Init_PortDasWrite+0x50>)
 8001156:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800115a:	6053      	str	r3, [r2, #4]
	  /* Output speed set to High */
	  GPIOD->OSPEEDR |= 0x00FF0000;
 800115c:	4b09      	ldr	r3, [pc, #36]	; (8001184 <Init_PortDasWrite+0x50>)
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	4a08      	ldr	r2, [pc, #32]	; (8001184 <Init_PortDasWrite+0x50>)
 8001162:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001166:	6093      	str	r3, [r2, #8]
	  /* No PU/PD resistor */
	  GPIOD->PUPDR &= 0xFF00FFFF;
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <Init_PortDasWrite+0x50>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	4a05      	ldr	r2, [pc, #20]	; (8001184 <Init_PortDasWrite+0x50>)
 800116e:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001172:	60d3      	str	r3, [r2, #12]
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40023800 	.word	0x40023800
 8001184:	40020c00 	.word	0x40020c00

08001188 <lcd_read_nibble>:

char lcd_read_nibble()
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
	uint32_t data_received;
	Init_PortDasRead();
 800118e:	f7ff ffb3 	bl	80010f8 <Init_PortDasRead>
	Clear_RS;
 8001192:	4b16      	ldr	r3, [pc, #88]	; (80011ec <lcd_read_nibble+0x64>)
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	4a15      	ldr	r2, [pc, #84]	; (80011ec <lcd_read_nibble+0x64>)
 8001198:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800119c:	6193      	str	r3, [r2, #24]
	Set_RW;
 800119e:	4b13      	ldr	r3, [pc, #76]	; (80011ec <lcd_read_nibble+0x64>)
 80011a0:	699b      	ldr	r3, [r3, #24]
 80011a2:	4a12      	ldr	r2, [pc, #72]	; (80011ec <lcd_read_nibble+0x64>)
 80011a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a8:	6193      	str	r3, [r2, #24]
	HAL_Delay(1);
 80011aa:	2001      	movs	r0, #1
 80011ac:	f001 f864 	bl	8002278 <HAL_Delay>
	Set_E;
 80011b0:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <lcd_read_nibble+0x64>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	4a0d      	ldr	r2, [pc, #52]	; (80011ec <lcd_read_nibble+0x64>)
 80011b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011ba:	6193      	str	r3, [r2, #24]
	HAL_Delay(1);
 80011bc:	2001      	movs	r0, #1
 80011be:	f001 f85b 	bl	8002278 <HAL_Delay>
	data_received=GPIOD->IDR & 0x00000F00 >> 8;
 80011c2:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <lcd_read_nibble+0x68>)
 80011c4:	691b      	ldr	r3, [r3, #16]
 80011c6:	f003 030f 	and.w	r3, r3, #15
 80011ca:	607b      	str	r3, [r7, #4]
	Clear_E;
 80011cc:	4b07      	ldr	r3, [pc, #28]	; (80011ec <lcd_read_nibble+0x64>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	4a06      	ldr	r2, [pc, #24]	; (80011ec <lcd_read_nibble+0x64>)
 80011d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80011d6:	6193      	str	r3, [r2, #24]
	HAL_Delay(1);
 80011d8:	2001      	movs	r0, #1
 80011da:	f001 f84d 	bl	8002278 <HAL_Delay>
	return(data_received);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	b2db      	uxtb	r3, r3
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40020400 	.word	0x40020400
 80011f0:	40020c00 	.word	0x40020c00

080011f4 <lcd_read_byte>:

char lcd_read_byte(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
	char data;
	data =  lcd_read_nibble() <<4;
 80011fa:	f7ff ffc5 	bl	8001188 <lcd_read_nibble>
 80011fe:	4603      	mov	r3, r0
 8001200:	011b      	lsls	r3, r3, #4
 8001202:	71fb      	strb	r3, [r7, #7]
	data =  lcd_read_nibble();
 8001204:	f7ff ffc0 	bl	8001188 <lcd_read_nibble>
 8001208:	4603      	mov	r3, r0
 800120a:	71fb      	strb	r3, [r7, #7]
	return(data);
 800120c:	79fb      	ldrb	r3, [r7, #7]
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <lcd_send_nibble>:

void lcd_send_nibble(char n)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
	Init_PortDasWrite();
 8001222:	f7ff ff87 	bl	8001134 <Init_PortDasWrite>
	Clear_RW;
 8001226:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <lcd_send_nibble+0x78>)
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	4a19      	ldr	r2, [pc, #100]	; (8001290 <lcd_send_nibble+0x78>)
 800122c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001230:	6193      	str	r3, [r2, #24]
	Clear_E;
 8001232:	4b17      	ldr	r3, [pc, #92]	; (8001290 <lcd_send_nibble+0x78>)
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	4a16      	ldr	r2, [pc, #88]	; (8001290 <lcd_send_nibble+0x78>)
 8001238:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800123c:	6193      	str	r3, [r2, #24]
	HAL_Delay(1);
 800123e:	2001      	movs	r0, #1
 8001240:	f001 f81a 	bl	8002278 <HAL_Delay>
	GPIOD->ODR = GPIOD->ODR & 0xFFFFF0FF;
 8001244:	4b13      	ldr	r3, [pc, #76]	; (8001294 <lcd_send_nibble+0x7c>)
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	4a12      	ldr	r2, [pc, #72]	; (8001294 <lcd_send_nibble+0x7c>)
 800124a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800124e:	6153      	str	r3, [r2, #20]
	GPIOD->ODR = GPIOD->ODR | (n & 0x0F) <<8;
 8001250:	4b10      	ldr	r3, [pc, #64]	; (8001294 <lcd_send_nibble+0x7c>)
 8001252:	695a      	ldr	r2, [r3, #20]
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	021b      	lsls	r3, r3, #8
 8001258:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800125c:	490d      	ldr	r1, [pc, #52]	; (8001294 <lcd_send_nibble+0x7c>)
 800125e:	4313      	orrs	r3, r2
 8001260:	614b      	str	r3, [r1, #20]
	HAL_Delay(1);
 8001262:	2001      	movs	r0, #1
 8001264:	f001 f808 	bl	8002278 <HAL_Delay>
	Set_E;
 8001268:	4b09      	ldr	r3, [pc, #36]	; (8001290 <lcd_send_nibble+0x78>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	4a08      	ldr	r2, [pc, #32]	; (8001290 <lcd_send_nibble+0x78>)
 800126e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001272:	6193      	str	r3, [r2, #24]
	HAL_Delay(2);
 8001274:	2002      	movs	r0, #2
 8001276:	f000 ffff 	bl	8002278 <HAL_Delay>
	Clear_E;
 800127a:	4b05      	ldr	r3, [pc, #20]	; (8001290 <lcd_send_nibble+0x78>)
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	4a04      	ldr	r2, [pc, #16]	; (8001290 <lcd_send_nibble+0x78>)
 8001280:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001284:	6193      	str	r3, [r2, #24]
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40020400 	.word	0x40020400
 8001294:	40020c00 	.word	0x40020c00

08001298 <lcd_send_byte>:
void lcd_send_byte(char c, char addr)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	460a      	mov	r2, r1
 80012a2:	71fb      	strb	r3, [r7, #7]
 80012a4:	4613      	mov	r3, r2
 80012a6:	71bb      	strb	r3, [r7, #6]
	while ( lcd_read_byte() & 0x80 ) ;
 80012a8:	bf00      	nop
 80012aa:	f7ff ffa3 	bl	80011f4 <lcd_read_byte>
 80012ae:	4603      	mov	r3, r0
 80012b0:	b25b      	sxtb	r3, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	dbf9      	blt.n	80012aa <lcd_send_byte+0x12>
	if (addr == 1)
 80012b6:	79bb      	ldrb	r3, [r7, #6]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d106      	bne.n	80012ca <lcd_send_byte+0x32>
	{
		Set_RS;
 80012bc:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <lcd_send_byte+0x60>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	4a0d      	ldr	r2, [pc, #52]	; (80012f8 <lcd_send_byte+0x60>)
 80012c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012c6:	6193      	str	r3, [r2, #24]
 80012c8:	e005      	b.n	80012d6 <lcd_send_byte+0x3e>
	}
	else
	{
		Clear_RS;
 80012ca:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <lcd_send_byte+0x60>)
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	4a0a      	ldr	r2, [pc, #40]	; (80012f8 <lcd_send_byte+0x60>)
 80012d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80012d4:	6193      	str	r3, [r2, #24]
	}
	lcd_send_nibble(c>>4);
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	091b      	lsrs	r3, r3, #4
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ff9b 	bl	8001218 <lcd_send_nibble>
	lcd_send_nibble(c & 0x0F);
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	f003 030f 	and.w	r3, r3, #15
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff ff94 	bl	8001218 <lcd_send_nibble>

}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40020400 	.word	0x40020400

080012fc <lcd_init>:
void lcd_init()
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
	Clear_RS;
 8001302:	4b21      	ldr	r3, [pc, #132]	; (8001388 <lcd_init+0x8c>)
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	4a20      	ldr	r2, [pc, #128]	; (8001388 <lcd_init+0x8c>)
 8001308:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800130c:	6193      	str	r3, [r2, #24]
	//Wait 2ms
	HAL_Delay(2);
 800130e:	2002      	movs	r0, #2
 8001310:	f000 ffb2 	bl	8002278 <HAL_Delay>
	for(int i=0;i<3;i++)
 8001314:	2300      	movs	r3, #0
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	e008      	b.n	800132c <lcd_init+0x30>
	{
		// send dummy nibble
		lcd_send_nibble(0x03);
 800131a:	2003      	movs	r0, #3
 800131c:	f7ff ff7c 	bl	8001218 <lcd_send_nibble>
		// wait 5ms
		HAL_Delay(5);
 8001320:	2005      	movs	r0, #5
 8001322:	f000 ffa9 	bl	8002278 <HAL_Delay>
	for(int i=0;i<3;i++)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	3301      	adds	r3, #1
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b02      	cmp	r3, #2
 8001330:	ddf3      	ble.n	800131a <lcd_init+0x1e>
	}

	// set 4bits mode, 2 lines, 5*8 cells
	lcd_send_byte(0x38,0);
 8001332:	2100      	movs	r1, #0
 8001334:	2038      	movs	r0, #56	; 0x38
 8001336:	f7ff ffaf 	bl	8001298 <lcd_send_byte>
	HAL_Delay(5);
 800133a:	2005      	movs	r0, #5
 800133c:	f000 ff9c 	bl	8002278 <HAL_Delay>
	// Turn off screen, stop blink
	lcd_send_byte(0x08,0);
 8001340:	2100      	movs	r1, #0
 8001342:	2008      	movs	r0, #8
 8001344:	f7ff ffa8 	bl	8001298 <lcd_send_byte>
	HAL_Delay(5);
 8001348:	2005      	movs	r0, #5
 800134a:	f000 ff95 	bl	8002278 <HAL_Delay>
	// Turn on screen, cursor is blinking
	lcd_send_byte(0x0C,0);
 800134e:	2100      	movs	r1, #0
 8001350:	200c      	movs	r0, #12
 8001352:	f7ff ffa1 	bl	8001298 <lcd_send_byte>
	HAL_Delay(5);
 8001356:	2005      	movs	r0, #5
 8001358:	f000 ff8e 	bl	8002278 <HAL_Delay>
	// Reset to initial position
	lcd_send_byte(0x02,0);
 800135c:	2100      	movs	r1, #0
 800135e:	2002      	movs	r0, #2
 8001360:	f7ff ff9a 	bl	8001298 <lcd_send_byte>
	HAL_Delay(1);
 8001364:	2001      	movs	r0, #1
 8001366:	f000 ff87 	bl	8002278 <HAL_Delay>
	// Left shift for write
	lcd_send_byte(0x6,0);
 800136a:	2100      	movs	r1, #0
 800136c:	2006      	movs	r0, #6
 800136e:	f7ff ff93 	bl	8001298 <lcd_send_byte>
	HAL_Delay(1);
 8001372:	2001      	movs	r0, #1
 8001374:	f000 ff80 	bl	8002278 <HAL_Delay>
	// Reset screen
	lcd_send_byte(0x01,0);
 8001378:	2100      	movs	r1, #0
 800137a:	2001      	movs	r0, #1
 800137c:	f7ff ff8c 	bl	8001298 <lcd_send_byte>
}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40020400 	.word	0x40020400

0800138c <lcd_gotoxy>:

void lcd_gotoxy(int x, int y)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
   int address;

   if(y==2) address=0x40;
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	2b02      	cmp	r3, #2
 800139a:	d102      	bne.n	80013a2 <lcd_gotoxy+0x16>
 800139c:	2340      	movs	r3, #64	; 0x40
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	e001      	b.n	80013a6 <lcd_gotoxy+0x1a>
   else address=0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]

   address+=x-1;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	3b01      	subs	r3, #1
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	4413      	add	r3, r2
 80013ae:	60fb      	str	r3, [r7, #12]
   lcd_send_byte(0x80|address,0);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	b25b      	sxtb	r3, r3
 80013b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013b8:	b25b      	sxtb	r3, r3
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	2100      	movs	r1, #0
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff ff6a 	bl	8001298 <lcd_send_byte>
}
 80013c4:	bf00      	nop
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <lcd_putc>:

void lcd_putc(char c)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	71fb      	strb	r3, [r7, #7]
	lcd_send_byte(c,1);
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	2101      	movs	r1, #1
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff ff5c 	bl	8001298 <lcd_send_byte>
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <lcd_puts>:

void lcd_puts(char line, char *str)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	6039      	str	r1, [r7, #0]
 80013f2:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	73fb      	strb	r3, [r7, #15]

    if (line == 1) lcd_gotoxy(1, 1);
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d104      	bne.n	8001408 <lcd_puts+0x20>
 80013fe:	2101      	movs	r1, #1
 8001400:	2001      	movs	r0, #1
 8001402:	f7ff ffc3 	bl	800138c <lcd_gotoxy>
 8001406:	e00e      	b.n	8001426 <lcd_puts+0x3e>
    else if (line == 2) lcd_gotoxy(1, 2);
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	2b02      	cmp	r3, #2
 800140c:	d10b      	bne.n	8001426 <lcd_puts+0x3e>
 800140e:	2102      	movs	r1, #2
 8001410:	2001      	movs	r0, #1
 8001412:	f7ff ffbb 	bl	800138c <lcd_gotoxy>

    while(*str && (i++ < 16))
 8001416:	e006      	b.n	8001426 <lcd_puts+0x3e>
    {
	lcd_putc(*str++);
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	1c5a      	adds	r2, r3, #1
 800141c:	603a      	str	r2, [r7, #0]
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff ffd3 	bl	80013cc <lcd_putc>
    while(*str && (i++ < 16))
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d008      	beq.n	8001440 <lcd_puts+0x58>
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	1c5a      	adds	r2, r3, #1
 8001432:	73fa      	strb	r2, [r7, #15]
 8001434:	2b0f      	cmp	r3, #15
 8001436:	d9ef      	bls.n	8001418 <lcd_puts+0x30>
    }
    while(i++ < 16){
 8001438:	e002      	b.n	8001440 <lcd_puts+0x58>
    	lcd_putc(' ');
 800143a:	2020      	movs	r0, #32
 800143c:	f7ff ffc6 	bl	80013cc <lcd_putc>
    while(i++ < 16){
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	1c5a      	adds	r2, r3, #1
 8001444:	73fa      	strb	r2, [r7, #15]
 8001446:	2b0f      	cmp	r3, #15
 8001448:	d9f7      	bls.n	800143a <lcd_puts+0x52>
    }
}
 800144a:	bf00      	nop
 800144c:	bf00      	nop
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001454:	b5b0      	push	{r4, r5, r7, lr}
 8001456:	b0d0      	sub	sp, #320	; 0x140
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800145a:	f000 fecb 	bl	80021f4 <HAL_Init>
  /* USER CODE BEGIN Init */
	//SendLINRequest(&Tx_Msg);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800145e:	f000 f949 	bl	80016f4 <SystemClock_Config>

  //Supprimer MX_USART3_Init
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001462:	f000 f9b3 	bl	80017cc <MX_GPIO_Init>
  MX_CAN1_Init();
 8001466:	f7ff fa61 	bl	800092c <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  clock_Init();
 800146a:	f000 fbf7 	bl	8001c5c <clock_Init>
  UART_Init();
 800146e:	f7ff fbf9 	bl	8000c64 <UART_Init>
  HAL_NVIC_DisableIRQ(USART3_IRQn);
 8001472:	2027      	movs	r0, #39	; 0x27
 8001474:	f001 fd84 	bl	8002f80 <HAL_NVIC_DisableIRQ>

  //MX_CAN1_Init();

  Init_PortB();
 8001478:	f7ff fe0e 	bl	8001098 <Init_PortB>
  lcd_init();
 800147c:	f7ff ff3e 	bl	80012fc <lcd_init>
  lcd_puts(1, "Initialisation");
 8001480:	4980      	ldr	r1, [pc, #512]	; (8001684 <main+0x230>)
 8001482:	2001      	movs	r0, #1
 8001484:	f7ff ffb0 	bl	80013e8 <lcd_puts>

  HAL_CAN_Start(&hcan1);
 8001488:	487f      	ldr	r0, [pc, #508]	; (8001688 <main+0x234>)
 800148a:	f001 f8f5 	bl	8002678 <HAL_CAN_Start>

  LED_Blink(3);
 800148e:	2003      	movs	r0, #3
 8001490:	f7ff fb10 	bl	8000ab4 <LED_Blink>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of TimerClock */
  osTimerDef(TimerClock, CBClock);
 8001494:	4b7d      	ldr	r3, [pc, #500]	; (800168c <main+0x238>)
 8001496:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800149a:	2300      	movs	r3, #0
 800149c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  TimerClockHandle = osTimerCreate(osTimer(TimerClock), osTimerPeriodic, NULL);
 80014a0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80014a4:	2200      	movs	r2, #0
 80014a6:	2101      	movs	r1, #1
 80014a8:	4618      	mov	r0, r3
 80014aa:	f004 f8d1 	bl	8005650 <osTimerCreate>
 80014ae:	4603      	mov	r3, r0
 80014b0:	4a77      	ldr	r2, [pc, #476]	; (8001690 <main+0x23c>)
 80014b2:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones,   .. */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of Queue_CAN_Interrupt */
  osMessageQDef(Queue_CAN_Interrupt, 128, uint8_t);
 80014b4:	4b77      	ldr	r3, [pc, #476]	; (8001694 <main+0x240>)
 80014b6:	f507 7494 	add.w	r4, r7, #296	; 0x128
 80014ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Queue_CAN_InterruptHandle = osMessageCreate(osMessageQ(Queue_CAN_Interrupt), NULL);
 80014c0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80014c4:	2100      	movs	r1, #0
 80014c6:	4618      	mov	r0, r3
 80014c8:	f004 f982 	bl	80057d0 <osMessageCreate>
 80014cc:	4603      	mov	r3, r0
 80014ce:	4a72      	ldr	r2, [pc, #456]	; (8001698 <main+0x244>)
 80014d0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  osMessageQDef(Queue_LIN_TO_RTC, 128, sizeof( Time ));
 80014d2:	4b72      	ldr	r3, [pc, #456]	; (800169c <main+0x248>)
 80014d4:	f507 748c 	add.w	r4, r7, #280	; 0x118
 80014d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Queue_LIN_TO_RTCHandle = osMessageCreate(osMessageQ(Queue_LIN_TO_RTC), NULL);
 80014de:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80014e2:	2100      	movs	r1, #0
 80014e4:	4618      	mov	r0, r3
 80014e6:	f004 f973 	bl	80057d0 <osMessageCreate>
 80014ea:	4603      	mov	r3, r0
 80014ec:	4a6c      	ldr	r2, [pc, #432]	; (80016a0 <main+0x24c>)
 80014ee:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of UpdateExtClock */
  osThreadDef(UpdateExtClock, CallUpdateExtClock, osPriorityNormal , 0, 128);
 80014f0:	4b6c      	ldr	r3, [pc, #432]	; (80016a4 <main+0x250>)
 80014f2:	f107 04fc 	add.w	r4, r7, #252	; 0xfc
 80014f6:	461d      	mov	r5, r3
 80014f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001500:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UpdateExtClockHandle = osThreadCreate(osThread(UpdateExtClock), NULL);
 8001504:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f004 f83f 	bl	800558e <osThreadCreate>
 8001510:	4603      	mov	r3, r0
 8001512:	4a65      	ldr	r2, [pc, #404]	; (80016a8 <main+0x254>)
 8001514:	6013      	str	r3, [r2, #0]

  /* definition and creation of UpdateOwnClock */
  osThreadDef(UpdateOwnClock, CallUpdateOwnClock, osPriorityNormal , 0, 128);
 8001516:	4b65      	ldr	r3, [pc, #404]	; (80016ac <main+0x258>)
 8001518:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 800151c:	461d      	mov	r5, r3
 800151e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001520:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001522:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001526:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UpdateOwnClockHandle = osThreadCreate(osThread(UpdateOwnClock), NULL);
 800152a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800152e:	2100      	movs	r1, #0
 8001530:	4618      	mov	r0, r3
 8001532:	f004 f82c 	bl	800558e <osThreadCreate>
 8001536:	4603      	mov	r3, r0
 8001538:	4a5d      	ldr	r2, [pc, #372]	; (80016b0 <main+0x25c>)
 800153a:	6013      	str	r3, [r2, #0]

  /* definition and creation of LIN_Selector */
  osThreadDef(LIN_Selector, StartTask_LIN_Selector, osPriorityNormal, 0, 128);
 800153c:	4b5d      	ldr	r3, [pc, #372]	; (80016b4 <main+0x260>)
 800153e:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 8001542:	461d      	mov	r5, r3
 8001544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001548:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800154c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LIN_SelectorHandle = osThreadCreate(osThread(LIN_Selector), NULL);
 8001550:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001554:	2100      	movs	r1, #0
 8001556:	4618      	mov	r0, r3
 8001558:	f004 f819 	bl	800558e <osThreadCreate>
 800155c:	4603      	mov	r3, r0
 800155e:	4a56      	ldr	r2, [pc, #344]	; (80016b8 <main+0x264>)
 8001560:	6013      	str	r3, [r2, #0]

  /* definition and creation of Op_RTCtoLIN */
  osThreadDef(Op_RTCtoLIN, StartOp_RTCtoLIN, osPriorityNormal, 0, 128);
 8001562:	4b56      	ldr	r3, [pc, #344]	; (80016bc <main+0x268>)
 8001564:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8001568:	461d      	mov	r5, r3
 800156a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800156c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800156e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001572:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Op_RTCtoLINHandle = osThreadCreate(osThread(Op_RTCtoLIN), NULL);
 8001576:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800157a:	2100      	movs	r1, #0
 800157c:	4618      	mov	r0, r3
 800157e:	f004 f806 	bl	800558e <osThreadCreate>
 8001582:	4603      	mov	r3, r0
 8001584:	4a4e      	ldr	r2, [pc, #312]	; (80016c0 <main+0x26c>)
 8001586:	6013      	str	r3, [r2, #0]

  /* definition and creation of Op_LINtoRTC */
  osThreadDef(Op_LINtoRTC, StartOp_LINtoRTC, osPriorityNormal, 0, 128);
 8001588:	4b4e      	ldr	r3, [pc, #312]	; (80016c4 <main+0x270>)
 800158a:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800158e:	461d      	mov	r5, r3
 8001590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001594:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001598:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Op_LINtoRTCHandle = osThreadCreate(osThread(Op_LINtoRTC), NULL);
 800159c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80015a0:	2100      	movs	r1, #0
 80015a2:	4618      	mov	r0, r3
 80015a4:	f003 fff3 	bl	800558e <osThreadCreate>
 80015a8:	4603      	mov	r3, r0
 80015aa:	4a47      	ldr	r2, [pc, #284]	; (80016c8 <main+0x274>)
 80015ac:	6013      	str	r3, [r2, #0]

  /* definition and creation of Op_LINtoCAN */
  osThreadDef(Op_LINtoCAN, StartTaskOp_LINtoCAN, osPriorityNormal, 0, 128);
 80015ae:	4b47      	ldr	r3, [pc, #284]	; (80016cc <main+0x278>)
 80015b0:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80015b4:	461d      	mov	r5, r3
 80015b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Op_LINtoCANHandle = osThreadCreate(osThread(Op_LINtoCAN), NULL);
 80015c2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80015c6:	2100      	movs	r1, #0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f003 ffe0 	bl	800558e <osThreadCreate>
 80015ce:	4603      	mov	r3, r0
 80015d0:	4a3f      	ldr	r2, [pc, #252]	; (80016d0 <main+0x27c>)
 80015d2:	6013      	str	r3, [r2, #0]

  /* definition and creation of Op_LEDtoLIN */
  osThreadDef(Op_LEDtoLIN, StartTaskOp_LEDtoLIN, osPriorityNormal, 0, 128);
 80015d4:	4b3f      	ldr	r3, [pc, #252]	; (80016d4 <main+0x280>)
 80015d6:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80015da:	461d      	mov	r5, r3
 80015dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Op_LEDtoLINHandle = osThreadCreate(osThread(Op_LEDtoLIN), NULL);
 80015e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015ec:	2100      	movs	r1, #0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f003 ffcd 	bl	800558e <osThreadCreate>
 80015f4:	4603      	mov	r3, r0
 80015f6:	4a38      	ldr	r2, [pc, #224]	; (80016d8 <main+0x284>)
 80015f8:	6013      	str	r3, [r2, #0]

  /* definition and creation of Op_CANtoLIN */
  osThreadDef(Op_CANtoLIN, StartTask_Op_CANtoLIN, osPriorityNormal, 0, 128);
 80015fa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80015fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001602:	4a36      	ldr	r2, [pc, #216]	; (80016dc <main+0x288>)
 8001604:	461c      	mov	r4, r3
 8001606:	4615      	mov	r5, r2
 8001608:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800160a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800160c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001610:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Op_CANtoLINHandle = osThreadCreate(osThread(Op_CANtoLIN), NULL);
 8001614:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001618:	2100      	movs	r1, #0
 800161a:	4618      	mov	r0, r3
 800161c:	f003 ffb7 	bl	800558e <osThreadCreate>
 8001620:	4603      	mov	r3, r0
 8001622:	4a2f      	ldr	r2, [pc, #188]	; (80016e0 <main+0x28c>)
 8001624:	6013      	str	r3, [r2, #0]

  /* definition and creation of IDLE */
  osThreadDef(IDLE, StartTaskIDLE, osPriorityIdle, 0, 128);
 8001626:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800162a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800162e:	4a2d      	ldr	r2, [pc, #180]	; (80016e4 <main+0x290>)
 8001630:	461c      	mov	r4, r3
 8001632:	4615      	mov	r5, r2
 8001634:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001636:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001638:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800163c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IDLEHandle = osThreadCreate(osThread(IDLE), NULL);
 8001640:	f107 031c 	add.w	r3, r7, #28
 8001644:	2100      	movs	r1, #0
 8001646:	4618      	mov	r0, r3
 8001648:	f003 ffa1 	bl	800558e <osThreadCreate>
 800164c:	4603      	mov	r3, r0
 800164e:	4a26      	ldr	r2, [pc, #152]	; (80016e8 <main+0x294>)
 8001650:	6013      	str	r3, [r2, #0]

  /* definition and creation of Op_LINtoLED */
  osThreadDef(Op_LINtoLED, StartTask_Op_LINtoLED, osPriorityLow, 0, 128);
 8001652:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001656:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800165a:	4a24      	ldr	r2, [pc, #144]	; (80016ec <main+0x298>)
 800165c:	461c      	mov	r4, r3
 800165e:	4615      	mov	r5, r2
 8001660:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001662:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001664:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001668:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Op_LINtoLEDHandle = osThreadCreate(osThread(Op_LINtoLED), NULL);
 800166c:	463b      	mov	r3, r7
 800166e:	2100      	movs	r1, #0
 8001670:	4618      	mov	r0, r3
 8001672:	f003 ff8c 	bl	800558e <osThreadCreate>
 8001676:	4603      	mov	r3, r0
 8001678:	4a1d      	ldr	r2, [pc, #116]	; (80016f0 <main+0x29c>)
 800167a:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */

  osKernelStart();
 800167c:	f003 ff80 	bl	8005580 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while(1){
 8001680:	e7fe      	b.n	8001680 <main+0x22c>
 8001682:	bf00      	nop
 8001684:	08008eb4 	.word	0x08008eb4
 8001688:	200007c4 	.word	0x200007c4
 800168c:	08001c15 	.word	0x08001c15
 8001690:	2000081c 	.word	0x2000081c
 8001694:	08008ec4 	.word	0x08008ec4
 8001698:	20000814 	.word	0x20000814
 800169c:	08008ed4 	.word	0x08008ed4
 80016a0:	20000818 	.word	0x20000818
 80016a4:	08008ee4 	.word	0x08008ee4
 80016a8:	200007ec 	.word	0x200007ec
 80016ac:	08008f00 	.word	0x08008f00
 80016b0:	200007f0 	.word	0x200007f0
 80016b4:	08008f1c 	.word	0x08008f1c
 80016b8:	200007f4 	.word	0x200007f4
 80016bc:	08008f38 	.word	0x08008f38
 80016c0:	200007f8 	.word	0x200007f8
 80016c4:	08008f54 	.word	0x08008f54
 80016c8:	200007fc 	.word	0x200007fc
 80016cc:	08008f70 	.word	0x08008f70
 80016d0:	20000800 	.word	0x20000800
 80016d4:	08008f8c 	.word	0x08008f8c
 80016d8:	20000804 	.word	0x20000804
 80016dc:	08008fa8 	.word	0x08008fa8
 80016e0:	20000808 	.word	0x20000808
 80016e4:	08008fc4 	.word	0x08008fc4
 80016e8:	2000080c 	.word	0x2000080c
 80016ec:	08008fe0 	.word	0x08008fe0
 80016f0:	20000810 	.word	0x20000810

080016f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b094      	sub	sp, #80	; 0x50
 80016f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016fa:	f107 0320 	add.w	r3, r7, #32
 80016fe:	2230      	movs	r2, #48	; 0x30
 8001700:	2100      	movs	r1, #0
 8001702:	4618      	mov	r0, r3
 8001704:	f006 ff22 	bl	800854c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001708:	f107 030c 	add.w	r3, r7, #12
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001718:	2300      	movs	r3, #0
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	4b29      	ldr	r3, [pc, #164]	; (80017c4 <SystemClock_Config+0xd0>)
 800171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001720:	4a28      	ldr	r2, [pc, #160]	; (80017c4 <SystemClock_Config+0xd0>)
 8001722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001726:	6413      	str	r3, [r2, #64]	; 0x40
 8001728:	4b26      	ldr	r3, [pc, #152]	; (80017c4 <SystemClock_Config+0xd0>)
 800172a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001734:	2300      	movs	r3, #0
 8001736:	607b      	str	r3, [r7, #4]
 8001738:	4b23      	ldr	r3, [pc, #140]	; (80017c8 <SystemClock_Config+0xd4>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a22      	ldr	r2, [pc, #136]	; (80017c8 <SystemClock_Config+0xd4>)
 800173e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001742:	6013      	str	r3, [r2, #0]
 8001744:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <SystemClock_Config+0xd4>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800174c:	607b      	str	r3, [r7, #4]
 800174e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001750:	2309      	movs	r3, #9
 8001752:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001754:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800175a:	2301      	movs	r3, #1
 800175c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800175e:	2302      	movs	r3, #2
 8001760:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001762:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001766:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001768:	2308      	movs	r3, #8
 800176a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800176c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001770:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001772:	2302      	movs	r3, #2
 8001774:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001776:	2307      	movs	r3, #7
 8001778:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800177a:	f107 0320 	add.w	r3, r7, #32
 800177e:	4618      	mov	r0, r3
 8001780:	f001 fe54 	bl	800342c <HAL_RCC_OscConfig>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800178a:	f000 fa5f 	bl	8001c4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800178e:	230f      	movs	r3, #15
 8001790:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001792:	2302      	movs	r3, #2
 8001794:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800179a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800179e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017a6:	f107 030c 	add.w	r3, r7, #12
 80017aa:	2105      	movs	r1, #5
 80017ac:	4618      	mov	r0, r3
 80017ae:	f002 f8b5 	bl	800391c <HAL_RCC_ClockConfig>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80017b8:	f000 fa48 	bl	8001c4c <Error_Handler>
  }
}
 80017bc:	bf00      	nop
 80017be:	3750      	adds	r7, #80	; 0x50
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40007000 	.word	0x40007000

080017cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08a      	sub	sp, #40	; 0x28
 80017d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d2:	f107 0314 	add.w	r3, r7, #20
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	609a      	str	r2, [r3, #8]
 80017de:	60da      	str	r2, [r3, #12]
 80017e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
 80017e6:	4b2d      	ldr	r3, [pc, #180]	; (800189c <MX_GPIO_Init+0xd0>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a2c      	ldr	r2, [pc, #176]	; (800189c <MX_GPIO_Init+0xd0>)
 80017ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b2a      	ldr	r3, [pc, #168]	; (800189c <MX_GPIO_Init+0xd0>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	4b26      	ldr	r3, [pc, #152]	; (800189c <MX_GPIO_Init+0xd0>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a25      	ldr	r2, [pc, #148]	; (800189c <MX_GPIO_Init+0xd0>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b23      	ldr	r3, [pc, #140]	; (800189c <MX_GPIO_Init+0xd0>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	4b1f      	ldr	r3, [pc, #124]	; (800189c <MX_GPIO_Init+0xd0>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	4a1e      	ldr	r2, [pc, #120]	; (800189c <MX_GPIO_Init+0xd0>)
 8001824:	f043 0302 	orr.w	r3, r3, #2
 8001828:	6313      	str	r3, [r2, #48]	; 0x30
 800182a:	4b1c      	ldr	r3, [pc, #112]	; (800189c <MX_GPIO_Init+0xd0>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	607b      	str	r3, [r7, #4]
 800183a:	4b18      	ldr	r3, [pc, #96]	; (800189c <MX_GPIO_Init+0xd0>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4a17      	ldr	r2, [pc, #92]	; (800189c <MX_GPIO_Init+0xd0>)
 8001840:	f043 0308 	orr.w	r3, r3, #8
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4b15      	ldr	r3, [pc, #84]	; (800189c <MX_GPIO_Init+0xd0>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8001852:	2200      	movs	r2, #0
 8001854:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001858:	4811      	ldr	r0, [pc, #68]	; (80018a0 <MX_GPIO_Init+0xd4>)
 800185a:	f001 fdcd 	bl	80033f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
 800185e:	2301      	movs	r3, #1
 8001860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001862:	2300      	movs	r3, #0
 8001864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 800186a:	f107 0314 	add.w	r3, r7, #20
 800186e:	4619      	mov	r1, r3
 8001870:	480c      	ldr	r0, [pc, #48]	; (80018a4 <MX_GPIO_Init+0xd8>)
 8001872:	f001 fc25 	bl	80030c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 8001876:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800187a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187c:	2301      	movs	r3, #1
 800187e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001884:	2300      	movs	r3, #0
 8001886:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	4619      	mov	r1, r3
 800188e:	4804      	ldr	r0, [pc, #16]	; (80018a0 <MX_GPIO_Init+0xd4>)
 8001890:	f001 fc16 	bl	80030c0 <HAL_GPIO_Init>

}
 8001894:	bf00      	nop
 8001896:	3728      	adds	r7, #40	; 0x28
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40023800 	.word	0x40023800
 80018a0:	40020c00 	.word	0x40020c00
 80018a4:	40020000 	.word	0x40020000

080018a8 <CallUpdateExtClock>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_CallUpdateExtClock */
void CallUpdateExtClock(void const * argument)	//Envoi requete RTC par LIN
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */

	HAL_NVIC_EnableIRQ(USART3_IRQn);
 80018b0:	2027      	movs	r0, #39	; 0x27
 80018b2:	f001 fb57 	bl	8002f64 <HAL_NVIC_EnableIRQ>
	/* Infinite loop */
	for(;;)
	{
		Tx_Msg.length = 0;
 80018b6:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <CallUpdateExtClock+0x2c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	705a      	strb	r2, [r3, #1]
		Tx_Msg.ID = 0x90;
 80018bc:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <CallUpdateExtClock+0x2c>)
 80018be:	2290      	movs	r2, #144	; 0x90
 80018c0:	701a      	strb	r2, [r3, #0]
		SendLINRequest(&Tx_Msg);
 80018c2:	4804      	ldr	r0, [pc, #16]	; (80018d4 <CallUpdateExtClock+0x2c>)
 80018c4:	f7ff fb38 	bl	8000f38 <SendLINRequest>
		osDelay(800);
 80018c8:	f44f 7048 	mov.w	r0, #800	; 0x320
 80018cc:	f003 feab 	bl	8005626 <osDelay>
		Tx_Msg.length = 0;
 80018d0:	e7f1      	b.n	80018b6 <CallUpdateExtClock+0xe>
 80018d2:	bf00      	nop
 80018d4:	2000077c 	.word	0x2000077c

080018d8 <CallUpdateOwnClock>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CallUpdateOwnClock */
void CallUpdateOwnClock(void const * argument)	//RTC to LCD
{
 80018d8:	b5b0      	push	{r4, r5, r7, lr}
 80018da:	b08c      	sub	sp, #48	; 0x30
 80018dc:	af02      	add	r7, sp, #8
 80018de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallUpdateOwnClock */
	Time Data;
  /* Infinite loop */
  for(;;)
  {
    getCurrentTime(&Data);
 80018e0:	f107 031c 	add.w	r3, r7, #28
 80018e4:	4618      	mov	r0, r3
 80018e6:	f000 f9cd 	bl	8001c84 <getCurrentTime>
    char chaine[17] = "                ";
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <CallUpdateOwnClock+0x54>)
 80018ec:	f107 0408 	add.w	r4, r7, #8
 80018f0:	461d      	mov	r5, r3
 80018f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018f6:	682b      	ldr	r3, [r5, #0]
 80018f8:	7023      	strb	r3, [r4, #0]
    sprintf(chaine, "RTC : %02d:%02d:%02d" , Data.hou.BIN, Data.min.BIN, Data.sec.BIN);
 80018fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80018fe:	461a      	mov	r2, r3
 8001900:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001904:	4619      	mov	r1, r3
 8001906:	7f7b      	ldrb	r3, [r7, #29]
 8001908:	f107 0008 	add.w	r0, r7, #8
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	460b      	mov	r3, r1
 8001910:	4907      	ldr	r1, [pc, #28]	; (8001930 <CallUpdateOwnClock+0x58>)
 8001912:	f006 fe23 	bl	800855c <siprintf>
    lcd_puts(1, chaine);
 8001916:	f107 0308 	add.w	r3, r7, #8
 800191a:	4619      	mov	r1, r3
 800191c:	2001      	movs	r0, #1
 800191e:	f7ff fd63 	bl	80013e8 <lcd_puts>
    osDelay(800);
 8001922:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001926:	f003 fe7e 	bl	8005626 <osDelay>
  {
 800192a:	e7d9      	b.n	80018e0 <CallUpdateOwnClock+0x8>
 800192c:	08009014 	.word	0x08009014
 8001930:	08008ffc 	.word	0x08008ffc

08001934 <StartTask_LIN_Selector>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_LIN_Selector */
void StartTask_LIN_Selector(void const * argument)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08a      	sub	sp, #40	; 0x28
 8001938:	af00      	add	r7, sp, #0
 800193a:	6178      	str	r0, [r7, #20]
	/* USER CODE BEGIN StartTask_LIN_Selector */
	/* Infinite loop */
	for(;;)
	{
		osSignalWait(SIGNAL_LIN_INTERRUPT,osWaitForever);
 800193c:	463b      	mov	r3, r7
 800193e:	f04f 32ff 	mov.w	r2, #4294967295
 8001942:	2101      	movs	r1, #1
 8001944:	4618      	mov	r0, r3
 8001946:	f003 fef7 	bl	8005738 <osSignalWait>
		Rx_Msg.ID >>= 4;
 800194a:	4b28      	ldr	r3, [pc, #160]	; (80019ec <StartTask_LIN_Selector+0xb8>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	091b      	lsrs	r3, r3, #4
 8001950:	b2da      	uxtb	r2, r3
 8001952:	4b26      	ldr	r3, [pc, #152]	; (80019ec <StartTask_LIN_Selector+0xb8>)
 8001954:	701a      	strb	r2, [r3, #0]
		char mode = Rx_Msg.ID>>3;
 8001956:	4b25      	ldr	r3, [pc, #148]	; (80019ec <StartTask_LIN_Selector+0xb8>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	08db      	lsrs	r3, r3, #3
 800195c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		//Sinon ID = ID >> 4;

		switch (Rx_Msg.ID & 0b111){
 8001960:	4b22      	ldr	r3, [pc, #136]	; (80019ec <StartTask_LIN_Selector+0xb8>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	2b04      	cmp	r3, #4
 800196a:	d037      	beq.n	80019dc <StartTask_LIN_Selector+0xa8>
 800196c:	2b04      	cmp	r3, #4
 800196e:	dce5      	bgt.n	800193c <StartTask_LIN_Selector+0x8>
 8001970:	2b01      	cmp	r3, #1
 8001972:	d002      	beq.n	800197a <StartTask_LIN_Selector+0x46>
 8001974:	2b02      	cmp	r3, #2
 8001976:	d01f      	beq.n	80019b8 <StartTask_LIN_Selector+0x84>
 8001978:	e037      	b.n	80019ea <StartTask_LIN_Selector+0xb6>
		case LIN_ID_RTC :
			//RTC
			if (mode){
 800197a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800197e:	2b00      	cmp	r3, #0
 8001980:	d006      	beq.n	8001990 <StartTask_LIN_Selector+0x5c>
				osSignalSet(Op_RTCtoLINHandle,SIGNAL_RTC_TO_LIN);	 //RTC to LIN Task
 8001982:	4b1b      	ldr	r3, [pc, #108]	; (80019f0 <StartTask_LIN_Selector+0xbc>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2101      	movs	r1, #1
 8001988:	4618      	mov	r0, r3
 800198a:	f003 fe95 	bl	80056b8 <osSignalSet>
				LINTime.hou.BIN = Tx_Msg.data[0];
				LINTime.min.BIN = Tx_Msg.data[1];
				LINTime.sec.BIN = Tx_Msg.data[2];
				xQueueSend (Queue_LIN_TO_RTCHandle , (void *) &LINTime , 100);	 //LIN to RTC Task
			}
			break;
 800198e:	e02c      	b.n	80019ea <StartTask_LIN_Selector+0xb6>
				LINTime.hou.BIN = Tx_Msg.data[0];
 8001990:	4b18      	ldr	r3, [pc, #96]	; (80019f4 <StartTask_LIN_Selector+0xc0>)
 8001992:	789b      	ldrb	r3, [r3, #2]
 8001994:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				LINTime.min.BIN = Tx_Msg.data[1];
 8001998:	4b16      	ldr	r3, [pc, #88]	; (80019f4 <StartTask_LIN_Selector+0xc0>)
 800199a:	78db      	ldrb	r3, [r3, #3]
 800199c:	f887 3020 	strb.w	r3, [r7, #32]
				LINTime.sec.BIN = Tx_Msg.data[2];
 80019a0:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <StartTask_LIN_Selector+0xc0>)
 80019a2:	791b      	ldrb	r3, [r3, #4]
 80019a4:	777b      	strb	r3, [r7, #29]
				xQueueSend (Queue_LIN_TO_RTCHandle , (void *) &LINTime , 100);	 //LIN to RTC Task
 80019a6:	4b14      	ldr	r3, [pc, #80]	; (80019f8 <StartTask_LIN_Selector+0xc4>)
 80019a8:	6818      	ldr	r0, [r3, #0]
 80019aa:	f107 011c 	add.w	r1, r7, #28
 80019ae:	2300      	movs	r3, #0
 80019b0:	2264      	movs	r2, #100	; 0x64
 80019b2:	f004 f923 	bl	8005bfc <xQueueGenericSend>
			break;
 80019b6:	e018      	b.n	80019ea <StartTask_LIN_Selector+0xb6>
		case LIN_ID_LED :
			//LED
			if (mode){
 80019b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d006      	beq.n	80019ce <StartTask_LIN_Selector+0x9a>
				osSignalSet(Op_LEDtoLINHandle,SIGNAL_LED_TO_LIN);	 //LED to LIN Task
 80019c0:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <StartTask_LIN_Selector+0xc8>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2101      	movs	r1, #1
 80019c6:	4618      	mov	r0, r3
 80019c8:	f003 fe76 	bl	80056b8 <osSignalSet>
			}
			else{
				osSignalSet(Op_LINtoLEDHandle,SIGNAL_LIN_TO_LED);	 //RTC to LIN Task
			}
			break;
 80019cc:	e00d      	b.n	80019ea <StartTask_LIN_Selector+0xb6>
				osSignalSet(Op_LINtoLEDHandle,SIGNAL_LIN_TO_LED);	 //RTC to LIN Task
 80019ce:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <StartTask_LIN_Selector+0xcc>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2101      	movs	r1, #1
 80019d4:	4618      	mov	r0, r3
 80019d6:	f003 fe6f 	bl	80056b8 <osSignalSet>
			break;
 80019da:	e006      	b.n	80019ea <StartTask_LIN_Selector+0xb6>
		case LIN_ID_CAN :
			//CAN
			osSignalSet(Op_LINtoCANHandle,SIGNAL_LIN_TO_CAN);	 //RTC to LIN Task
 80019dc:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <StartTask_LIN_Selector+0xd0>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2101      	movs	r1, #1
 80019e2:	4618      	mov	r0, r3
 80019e4:	f003 fe68 	bl	80056b8 <osSignalSet>
			break;
 80019e8:	bf00      	nop
	{
 80019ea:	e7a7      	b.n	800193c <StartTask_LIN_Selector+0x8>
 80019ec:	20000788 	.word	0x20000788
 80019f0:	200007f8 	.word	0x200007f8
 80019f4:	2000077c 	.word	0x2000077c
 80019f8:	20000818 	.word	0x20000818
 80019fc:	20000804 	.word	0x20000804
 8001a00:	20000810 	.word	0x20000810
 8001a04:	20000800 	.word	0x20000800

08001a08 <StartOp_RTCtoLIN>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOp_RTCtoLIN */
void StartOp_RTCtoLIN(void const * argument)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartOp_RTCtoLIN */
  /* Infinite loop */
  for(;;)
  {
	  osSignalWait(SIGNAL_RTC_TO_LIN,osWaitForever);
 8001a10:	463b      	mov	r3, r7
 8001a12:	f04f 32ff 	mov.w	r2, #4294967295
 8001a16:	2101      	movs	r1, #1
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f003 fe8d 	bl	8005738 <osSignalWait>

	  getCurrentTime(&RTCget);
 8001a1e:	480e      	ldr	r0, [pc, #56]	; (8001a58 <StartOp_RTCtoLIN+0x50>)
 8001a20:	f000 f930 	bl	8001c84 <getCurrentTime>

	  Tx_Msg.data[0] = RTCget.hou.BIN;
 8001a24:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <StartOp_RTCtoLIN+0x50>)
 8001a26:	79da      	ldrb	r2, [r3, #7]
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <StartOp_RTCtoLIN+0x54>)
 8001a2a:	709a      	strb	r2, [r3, #2]
	  Tx_Msg.data[1] = RTCget.min.BIN;
 8001a2c:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <StartOp_RTCtoLIN+0x50>)
 8001a2e:	791a      	ldrb	r2, [r3, #4]
 8001a30:	4b0a      	ldr	r3, [pc, #40]	; (8001a5c <StartOp_RTCtoLIN+0x54>)
 8001a32:	70da      	strb	r2, [r3, #3]
	  Tx_Msg.data[2] = RTCget.sec.BIN;
 8001a34:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <StartOp_RTCtoLIN+0x50>)
 8001a36:	785a      	ldrb	r2, [r3, #1]
 8001a38:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <StartOp_RTCtoLIN+0x54>)
 8001a3a:	711a      	strb	r2, [r3, #4]
	  Tx_Msg.length = 3;
 8001a3c:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <StartOp_RTCtoLIN+0x54>)
 8001a3e:	2203      	movs	r2, #3
 8001a40:	705a      	strb	r2, [r3, #1]
	  Tx_Msg.ID = LIN_ID(LIN_MODE_DATA, LIN_ID_RTC, Tx_Msg.length);
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <StartOp_RTCtoLIN+0x54>)
 8001a44:	785b      	ldrb	r3, [r3, #1]
 8001a46:	f043 0310 	orr.w	r3, r3, #16
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <StartOp_RTCtoLIN+0x54>)
 8001a4e:	701a      	strb	r2, [r3, #0]
	  SendLINMessage(&Tx_Msg);
 8001a50:	4802      	ldr	r0, [pc, #8]	; (8001a5c <StartOp_RTCtoLIN+0x54>)
 8001a52:	f7ff fa45 	bl	8000ee0 <SendLINMessage>
	  osSignalWait(SIGNAL_RTC_TO_LIN,osWaitForever);
 8001a56:	e7db      	b.n	8001a10 <StartOp_RTCtoLIN+0x8>
 8001a58:	20000794 	.word	0x20000794
 8001a5c:	2000077c 	.word	0x2000077c

08001a60 <StartOp_LINtoRTC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOp_LINtoRTC */
void StartOp_LINtoRTC(void const * argument)
{
 8001a60:	b5b0      	push	{r4, r5, r7, lr}
 8001a62:	b08c      	sub	sp, #48	; 0x30
 8001a64:	af02      	add	r7, sp, #8
 8001a66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOp_LINtoRTC */
	Time Data;
	/* Infinite loop */
	for(;;)
	{
		osDelay(100);
 8001a68:	2064      	movs	r0, #100	; 0x64
 8001a6a:	f003 fddc 	bl	8005626 <osDelay>
		xQueueReceive(Queue_LIN_TO_RTCHandle, &(Data), osWaitForever);
 8001a6e:	4b13      	ldr	r3, [pc, #76]	; (8001abc <StartOp_LINtoRTC+0x5c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f107 011c 	add.w	r1, r7, #28
 8001a76:	f04f 32ff 	mov.w	r2, #4294967295
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f004 fa58 	bl	8005f30 <xQueueReceive>
		//Recevra une donnée de type RTC Time
		char chaine[17] = "                ";
 8001a80:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <StartOp_LINtoRTC+0x60>)
 8001a82:	f107 0408 	add.w	r4, r7, #8
 8001a86:	461d      	mov	r5, r3
 8001a88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a8c:	682b      	ldr	r3, [r5, #0]
 8001a8e:	7023      	strb	r3, [r4, #0]
		sprintf(chaine, "Ext : %02d:%02d:%02d", Data.hou.BIN,Data.min.BIN,Data.sec.BIN);
 8001a90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a94:	461a      	mov	r2, r3
 8001a96:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	7f7b      	ldrb	r3, [r7, #29]
 8001a9e:	f107 0008 	add.w	r0, r7, #8
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	4907      	ldr	r1, [pc, #28]	; (8001ac4 <StartOp_LINtoRTC+0x64>)
 8001aa8:	f006 fd58 	bl	800855c <siprintf>
		lcd_puts(2, chaine);
 8001aac:	f107 0308 	add.w	r3, r7, #8
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	2002      	movs	r0, #2
 8001ab4:	f7ff fc98 	bl	80013e8 <lcd_puts>
	{
 8001ab8:	e7d6      	b.n	8001a68 <StartOp_LINtoRTC+0x8>
 8001aba:	bf00      	nop
 8001abc:	20000818 	.word	0x20000818
 8001ac0:	08009014 	.word	0x08009014
 8001ac4:	08009028 	.word	0x08009028

08001ac8 <StartTaskOp_LINtoCAN>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskOp_LINtoCAN */
void StartTaskOp_LINtoCAN(void const * argument)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6178      	str	r0, [r7, #20]
	/* USER CODE BEGIN StartTaskOp_LINtoCAN */
	/* Infinite loop */
	for(;;)
	{
		osSignalWait(SIGNAL_LIN_TO_CAN,osWaitForever);
 8001ad0:	463b      	mov	r3, r7
 8001ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f003 fe2d 	bl	8005738 <osSignalWait>
		if(Rx_Msg.data[0] == 0b1){
 8001ade:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <StartTaskOp_LINtoCAN+0x48>)
 8001ae0:	789b      	ldrb	r3, [r3, #2]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d105      	bne.n	8001af2 <StartTaskOp_LINtoCAN+0x2a>
			CAN_Act(0x52, PORT_A, PIN_0_ON);
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	2110      	movs	r1, #16
 8001aea:	2052      	movs	r0, #82	; 0x52
 8001aec:	f7fe ff7e 	bl	80009ec <CAN_Act>
 8001af0:	e004      	b.n	8001afc <StartTaskOp_LINtoCAN+0x34>
		}
		else{ //Afin d'éviter toute erreur d'envoi
			CAN_Act(0x52, PORT_A, PIN_ALL_OFF);
 8001af2:	2200      	movs	r2, #0
 8001af4:	2110      	movs	r1, #16
 8001af6:	2052      	movs	r0, #82	; 0x52
 8001af8:	f7fe ff78 	bl	80009ec <CAN_Act>
		}
		lcd_puts(1, "CAN Operation");
 8001afc:	4905      	ldr	r1, [pc, #20]	; (8001b14 <StartTaskOp_LINtoCAN+0x4c>)
 8001afe:	2001      	movs	r0, #1
 8001b00:	f7ff fc72 	bl	80013e8 <lcd_puts>
		lcd_puts(2, "Received     ");
 8001b04:	4904      	ldr	r1, [pc, #16]	; (8001b18 <StartTaskOp_LINtoCAN+0x50>)
 8001b06:	2002      	movs	r0, #2
 8001b08:	f7ff fc6e 	bl	80013e8 <lcd_puts>
		osSignalWait(SIGNAL_LIN_TO_CAN,osWaitForever);
 8001b0c:	e7e0      	b.n	8001ad0 <StartTaskOp_LINtoCAN+0x8>
 8001b0e:	bf00      	nop
 8001b10:	20000788 	.word	0x20000788
 8001b14:	08009040 	.word	0x08009040
 8001b18:	08009050 	.word	0x08009050

08001b1c <StartTaskOp_LEDtoLIN>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskOp_LEDtoLIN */
void StartTaskOp_LEDtoLIN(void const * argument)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartTaskOp_LEDtoLIN */
  /* Infinite loop */
  for(;;)
  {
	  osSignalWait(SIGNAL_LED_TO_LIN,osWaitForever);
 8001b24:	463b      	mov	r3, r7
 8001b26:	f04f 32ff 	mov.w	r2, #4294967295
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f003 fe03 	bl	8005738 <osSignalWait>
	  Tx_Msg.data[0] = 	(GPIOD->ODR >> 12 > 0);
 8001b32:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <StartTaskOp_LEDtoLIN+0x48>)
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	0b1b      	lsrs	r3, r3, #12
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	bf14      	ite	ne
 8001b3c:	2301      	movne	r3, #1
 8001b3e:	2300      	moveq	r3, #0
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	461a      	mov	r2, r3
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <StartTaskOp_LEDtoLIN+0x4c>)
 8001b46:	709a      	strb	r2, [r3, #2]
	  Tx_Msg.length = 1;
 8001b48:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <StartTaskOp_LEDtoLIN+0x4c>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	705a      	strb	r2, [r3, #1]
	  Tx_Msg.ID = LIN_ID(LIN_MODE_DATA, LIN_ID_LED, Tx_Msg.length);
 8001b4e:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <StartTaskOp_LEDtoLIN+0x4c>)
 8001b50:	785b      	ldrb	r3, [r3, #1]
 8001b52:	f043 0320 	orr.w	r3, r3, #32
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	4b03      	ldr	r3, [pc, #12]	; (8001b68 <StartTaskOp_LEDtoLIN+0x4c>)
 8001b5a:	701a      	strb	r2, [r3, #0]
	  SendLINMessage(&Tx_Msg);
 8001b5c:	4802      	ldr	r0, [pc, #8]	; (8001b68 <StartTaskOp_LEDtoLIN+0x4c>)
 8001b5e:	f7ff f9bf 	bl	8000ee0 <SendLINMessage>
	  osSignalWait(SIGNAL_LED_TO_LIN,osWaitForever);
 8001b62:	e7df      	b.n	8001b24 <StartTaskOp_LEDtoLIN+0x8>
 8001b64:	40020c00 	.word	0x40020c00
 8001b68:	2000077c 	.word	0x2000077c

08001b6c <StartTask_Op_CANtoLIN>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_Op_CANtoLIN */
void StartTask_Op_CANtoLIN(void const * argument)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_Op_CANtoLIN */
	uint8_t Data;
  /* Infinite loop */
  for(;;)
  {
	  osDelay(100);
 8001b74:	2064      	movs	r0, #100	; 0x64
 8001b76:	f003 fd56 	bl	8005626 <osDelay>
	  xQueueReceive(Queue_CAN_InterruptHandle, &Data, osWaitForever);
 8001b7a:	4b14      	ldr	r3, [pc, #80]	; (8001bcc <StartTask_Op_CANtoLIN+0x60>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f107 010f 	add.w	r1, r7, #15
 8001b82:	f04f 32ff 	mov.w	r2, #4294967295
 8001b86:	4618      	mov	r0, r3
 8001b88:	f004 f9d2 	bl	8005f30 <xQueueReceive>
	  //revalue=osMessageGet(Op_CANtoLINHandle,10000);
	  Tx_Msg.data[0] = (Data > 0);
 8001b8c:	7bfb      	ldrb	r3, [r7, #15]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	bf14      	ite	ne
 8001b92:	2301      	movne	r3, #1
 8001b94:	2300      	moveq	r3, #0
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <StartTask_Op_CANtoLIN+0x64>)
 8001b9c:	709a      	strb	r2, [r3, #2]
	  Tx_Msg.length = 1;
 8001b9e:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <StartTask_Op_CANtoLIN+0x64>)
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	705a      	strb	r2, [r3, #1]
	  Tx_Msg.ID = LIN_ID(LIN_MODE_DATA, LIN_ID_CAN, Tx_Msg.length);
 8001ba4:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <StartTask_Op_CANtoLIN+0x64>)
 8001ba6:	785b      	ldrb	r3, [r3, #1]
 8001ba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <StartTask_Op_CANtoLIN+0x64>)
 8001bb0:	701a      	strb	r2, [r3, #0]
	  	SendLINMessage(&Tx_Msg);
 8001bb2:	4807      	ldr	r0, [pc, #28]	; (8001bd0 <StartTask_Op_CANtoLIN+0x64>)
 8001bb4:	f7ff f994 	bl	8000ee0 <SendLINMessage>

	  	lcd_puts(1, "CAN Operation");
 8001bb8:	4906      	ldr	r1, [pc, #24]	; (8001bd4 <StartTask_Op_CANtoLIN+0x68>)
 8001bba:	2001      	movs	r0, #1
 8001bbc:	f7ff fc14 	bl	80013e8 <lcd_puts>
	  	lcd_puts(2, "Transmitted  ");
 8001bc0:	4905      	ldr	r1, [pc, #20]	; (8001bd8 <StartTask_Op_CANtoLIN+0x6c>)
 8001bc2:	2002      	movs	r0, #2
 8001bc4:	f7ff fc10 	bl	80013e8 <lcd_puts>
	  osDelay(100);
 8001bc8:	e7d4      	b.n	8001b74 <StartTask_Op_CANtoLIN+0x8>
 8001bca:	bf00      	nop
 8001bcc:	20000814 	.word	0x20000814
 8001bd0:	2000077c 	.word	0x2000077c
 8001bd4:	08009040 	.word	0x08009040
 8001bd8:	08009060 	.word	0x08009060

08001bdc <StartTaskIDLE>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskIDLE */
void StartTaskIDLE(void const * argument)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskIDLE */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001be4:	2001      	movs	r0, #1
 8001be6:	f003 fd1e 	bl	8005626 <osDelay>
 8001bea:	e7fb      	b.n	8001be4 <StartTaskIDLE+0x8>

08001bec <StartTask_Op_LINtoLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_Op_LINtoLED */
void StartTask_Op_LINtoLED(void const * argument)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartTask_Op_LINtoLED */
  /* Infinite loop */
  for(;;)
  {
	  osSignalWait(SIGNAL_LIN_TO_LED,osWaitForever);
 8001bf4:	463b      	mov	r3, r7
 8001bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f003 fd9b 	bl	8005738 <osSignalWait>
		LED_Operate(Rx_Msg.data[0]);
 8001c02:	4b03      	ldr	r3, [pc, #12]	; (8001c10 <StartTask_Op_LINtoLED+0x24>)
 8001c04:	789b      	ldrb	r3, [r3, #2]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe ff8c 	bl	8000b24 <LED_Operate>
	  osSignalWait(SIGNAL_LIN_TO_LED,osWaitForever);
 8001c0c:	e7f2      	b.n	8001bf4 <StartTask_Op_LINtoLED+0x8>
 8001c0e:	bf00      	nop
 8001c10:	20000788 	.word	0x20000788

08001c14 <CBClock>:
  /* USER CODE END StartTask_Op_LINtoLED */
}

/* CBClock function */
void CBClock(void const * argument)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CBClock */

  /* USER CODE END CBClock */
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d101      	bne.n	8001c3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c3a:	f000 fafd 	bl	8002238 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40001000 	.word	0x40001000

08001c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c50:	b672      	cpsid	i
}
 8001c52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  LED_Blink(0);
 8001c54:	2000      	movs	r0, #0
 8001c56:	f7fe ff2d 	bl	8000ab4 <LED_Blink>
 8001c5a:	e7fb      	b.n	8001c54 <Error_Handler+0x8>

08001c5c <clock_Init>:
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <clock_Init+0x18>)
 8001c62:	4a05      	ldr	r2, [pc, #20]	; (8001c78 <clock_Init+0x1c>)
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <clock_Init+0x20>)
 8001c68:	4a05      	ldr	r2, [pc, #20]	; (8001c80 <clock_Init+0x24>)
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	f000 f89c 	bl	8001da8 <MX_RTC_Init>
 8001c70:	bf00      	nop
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000820 	.word	0x20000820
 8001c78:	40002800 	.word	0x40002800
 8001c7c:	20000824 	.word	0x20000824
 8001c80:	40007000 	.word	0x40007000

08001c84 <getCurrentTime>:
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	4b37      	ldr	r3, [pc, #220]	; (8001d6c <getCurrentTime+0xe8>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c9c:	72fb      	strb	r3, [r7, #11]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	091b      	lsrs	r3, r3, #4
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	709a      	strb	r2, [r3, #2]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	f003 030f 	and.w	r3, r3, #15
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	70da      	strb	r2, [r3, #3]
 8001cbc:	7afb      	ldrb	r3, [r7, #11]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f000 f856 	bl	8001d70 <BCDtoBinary>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	705a      	strb	r2, [r3, #1]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	0a1b      	lsrs	r3, r3, #8
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cd6:	72bb      	strb	r3, [r7, #10]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	0b1b      	lsrs	r3, r3, #12
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	715a      	strb	r2, [r3, #5]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	0a1b      	lsrs	r3, r3, #8
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	719a      	strb	r2, [r3, #6]
 8001cf8:	7abb      	ldrb	r3, [r7, #10]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 f838 	bl	8001d70 <BCDtoBinary>
 8001d00:	4603      	mov	r3, r0
 8001d02:	461a      	mov	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	711a      	strb	r2, [r3, #4]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	0c1b      	lsrs	r3, r3, #16
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d12:	727b      	strb	r3, [r7, #9]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	0d1b      	lsrs	r3, r3, #20
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	721a      	strb	r2, [r3, #8]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	0c1b      	lsrs	r3, r3, #16
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	725a      	strb	r2, [r3, #9]
 8001d34:	7a7b      	ldrb	r3, [r7, #9]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f000 f81a 	bl	8001d70 <BCDtoBinary>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	461a      	mov	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	71da      	strb	r2, [r3, #7]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	0d9b      	lsrs	r3, r3, #22
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	723b      	strb	r3, [r7, #8]
 8001d50:	7a3b      	ldrb	r3, [r7, #8]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <getCurrentTime+0xda>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	701a      	strb	r2, [r3, #0]
 8001d5c:	e002      	b.n	8001d64 <getCurrentTime+0xe0>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2201      	movs	r2, #1
 8001d62:	701a      	strb	r2, [r3, #0]
 8001d64:	bf00      	nop
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20000820 	.word	0x20000820

08001d70 <BCDtoBinary>:
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	71fb      	strb	r3, [r7, #7]
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	091b      	lsrs	r3, r3, #4
 8001d7e:	73fb      	strb	r3, [r7, #15]
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	73bb      	strb	r3, [r7, #14]
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	0092      	lsls	r2, r2, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	7bbb      	ldrb	r3, [r7, #14]
 8001d96:	4413      	add	r3, r2
 8001d98:	737b      	strb	r3, [r7, #13]
 8001d9a:	7b7b      	ldrb	r3, [r7, #13]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3714      	adds	r7, #20
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <MX_RTC_Init>:
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	4b0f      	ldr	r3, [pc, #60]	; (8001dec <MX_RTC_Init+0x44>)
 8001dae:	4a10      	ldr	r2, [pc, #64]	; (8001df0 <MX_RTC_Init+0x48>)
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <MX_RTC_Init+0x44>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	605a      	str	r2, [r3, #4]
 8001db8:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <MX_RTC_Init+0x44>)
 8001dba:	227f      	movs	r2, #127	; 0x7f
 8001dbc:	609a      	str	r2, [r3, #8]
 8001dbe:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <MX_RTC_Init+0x44>)
 8001dc0:	22ff      	movs	r2, #255	; 0xff
 8001dc2:	60da      	str	r2, [r3, #12]
 8001dc4:	4b09      	ldr	r3, [pc, #36]	; (8001dec <MX_RTC_Init+0x44>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	611a      	str	r2, [r3, #16]
 8001dca:	4b08      	ldr	r3, [pc, #32]	; (8001dec <MX_RTC_Init+0x44>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	615a      	str	r2, [r3, #20]
 8001dd0:	4b06      	ldr	r3, [pc, #24]	; (8001dec <MX_RTC_Init+0x44>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	619a      	str	r2, [r3, #24]
 8001dd6:	4805      	ldr	r0, [pc, #20]	; (8001dec <MX_RTC_Init+0x44>)
 8001dd8:	f002 f8d4 	bl	8003f84 <HAL_RTC_Init>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_RTC_Init+0x3e>
 8001de2:	f7ff ff33 	bl	8001c4c <Error_Handler>
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000828 	.word	0x20000828
 8001df0:	40002800 	.word	0x40002800

08001df4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	607b      	str	r3, [r7, #4]
 8001dfe:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <HAL_MspInit+0x54>)
 8001e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e02:	4a11      	ldr	r2, [pc, #68]	; (8001e48 <HAL_MspInit+0x54>)
 8001e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e08:	6453      	str	r3, [r2, #68]	; 0x44
 8001e0a:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <HAL_MspInit+0x54>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e12:	607b      	str	r3, [r7, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	603b      	str	r3, [r7, #0]
 8001e1a:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <HAL_MspInit+0x54>)
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	4a0a      	ldr	r2, [pc, #40]	; (8001e48 <HAL_MspInit+0x54>)
 8001e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e24:	6413      	str	r3, [r2, #64]	; 0x40
 8001e26:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <HAL_MspInit+0x54>)
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2e:	603b      	str	r3, [r7, #0]
 8001e30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e32:	2200      	movs	r2, #0
 8001e34:	210f      	movs	r1, #15
 8001e36:	f06f 0001 	mvn.w	r0, #1
 8001e3a:	f001 f877 	bl	8002f2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40023800 	.word	0x40023800

08001e4c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08a      	sub	sp, #40	; 0x28
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
 8001e62:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a1d      	ldr	r2, [pc, #116]	; (8001ee0 <HAL_CAN_MspInit+0x94>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d134      	bne.n	8001ed8 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	613b      	str	r3, [r7, #16]
 8001e72:	4b1c      	ldr	r3, [pc, #112]	; (8001ee4 <HAL_CAN_MspInit+0x98>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	4a1b      	ldr	r2, [pc, #108]	; (8001ee4 <HAL_CAN_MspInit+0x98>)
 8001e78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7e:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <HAL_CAN_MspInit+0x98>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	4b15      	ldr	r3, [pc, #84]	; (8001ee4 <HAL_CAN_MspInit+0x98>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	4a14      	ldr	r2, [pc, #80]	; (8001ee4 <HAL_CAN_MspInit+0x98>)
 8001e94:	f043 0302 	orr.w	r3, r3, #2
 8001e98:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9a:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <HAL_CAN_MspInit+0x98>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ea6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eac:	2302      	movs	r3, #2
 8001eae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001eb8:	2309      	movs	r3, #9
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ebc:	f107 0314 	add.w	r3, r7, #20
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4809      	ldr	r0, [pc, #36]	; (8001ee8 <HAL_CAN_MspInit+0x9c>)
 8001ec4:	f001 f8fc 	bl	80030c0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001ec8:	2200      	movs	r2, #0
 8001eca:	2105      	movs	r1, #5
 8001ecc:	2014      	movs	r0, #20
 8001ece:	f001 f82d 	bl	8002f2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001ed2:	2014      	movs	r0, #20
 8001ed4:	f001 f846 	bl	8002f64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001ed8:	bf00      	nop
 8001eda:	3728      	adds	r7, #40	; 0x28
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40006400 	.word	0x40006400
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40020400 	.word	0x40020400

08001eec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ef4:	f107 0308 	add.w	r3, r7, #8
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a0c      	ldr	r2, [pc, #48]	; (8001f38 <HAL_RTC_MspInit+0x4c>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d111      	bne.n	8001f30 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001f10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f14:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f16:	f107 0308 	add.w	r3, r7, #8
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f001 ff50 	bl	8003dc0 <HAL_RCCEx_PeriphCLKConfig>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001f26:	f7ff fe91 	bl	8001c4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f2a:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <HAL_RTC_MspInit+0x50>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001f30:	bf00      	nop
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40002800 	.word	0x40002800
 8001f3c:	42470e3c 	.word	0x42470e3c

08001f40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08a      	sub	sp, #40	; 0x28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	f107 0314 	add.w	r3, r7, #20
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a1d      	ldr	r2, [pc, #116]	; (8001fd4 <HAL_UART_MspInit+0x94>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d134      	bne.n	8001fcc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	4b1c      	ldr	r3, [pc, #112]	; (8001fd8 <HAL_UART_MspInit+0x98>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	4a1b      	ldr	r2, [pc, #108]	; (8001fd8 <HAL_UART_MspInit+0x98>)
 8001f6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f70:	6413      	str	r3, [r2, #64]	; 0x40
 8001f72:	4b19      	ldr	r3, [pc, #100]	; (8001fd8 <HAL_UART_MspInit+0x98>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	4b15      	ldr	r3, [pc, #84]	; (8001fd8 <HAL_UART_MspInit+0x98>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	4a14      	ldr	r2, [pc, #80]	; (8001fd8 <HAL_UART_MspInit+0x98>)
 8001f88:	f043 0302 	orr.w	r3, r3, #2
 8001f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8e:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <HAL_UART_MspInit+0x98>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f9a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001fac:	2307      	movs	r3, #7
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4809      	ldr	r0, [pc, #36]	; (8001fdc <HAL_UART_MspInit+0x9c>)
 8001fb8:	f001 f882 	bl	80030c0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	2105      	movs	r1, #5
 8001fc0:	2027      	movs	r0, #39	; 0x27
 8001fc2:	f000 ffb3 	bl	8002f2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001fc6:	2027      	movs	r0, #39	; 0x27
 8001fc8:	f000 ffcc 	bl	8002f64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001fcc:	bf00      	nop
 8001fce:	3728      	adds	r7, #40	; 0x28
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40004800 	.word	0x40004800
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40020400 	.word	0x40020400

08001fe0 <HAL_InitTick>:
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08c      	sub	sp, #48	; 0x30
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	2300      	movs	r3, #0
 8001fea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fec:	2300      	movs	r3, #0
 8001fee:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	2036      	movs	r0, #54	; 0x36
 8001ff6:	f000 ff99 	bl	8002f2c <HAL_NVIC_SetPriority>
 8001ffa:	2036      	movs	r0, #54	; 0x36
 8001ffc:	f000 ffb2 	bl	8002f64 <HAL_NVIC_EnableIRQ>
 8002000:	2300      	movs	r3, #0
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	4b1f      	ldr	r3, [pc, #124]	; (8002084 <HAL_InitTick+0xa4>)
 8002006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002008:	4a1e      	ldr	r2, [pc, #120]	; (8002084 <HAL_InitTick+0xa4>)
 800200a:	f043 0310 	orr.w	r3, r3, #16
 800200e:	6413      	str	r3, [r2, #64]	; 0x40
 8002010:	4b1c      	ldr	r3, [pc, #112]	; (8002084 <HAL_InitTick+0xa4>)
 8002012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002014:	f003 0310 	and.w	r3, r3, #16
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f107 0210 	add.w	r2, r7, #16
 8002020:	f107 0314 	add.w	r3, r7, #20
 8002024:	4611      	mov	r1, r2
 8002026:	4618      	mov	r0, r3
 8002028:	f001 fe98 	bl	8003d5c <HAL_RCC_GetClockConfig>
 800202c:	f001 fe6e 	bl	8003d0c <HAL_RCC_GetPCLK1Freq>
 8002030:	4603      	mov	r3, r0
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002038:	4a13      	ldr	r2, [pc, #76]	; (8002088 <HAL_InitTick+0xa8>)
 800203a:	fba2 2303 	umull	r2, r3, r2, r3
 800203e:	0c9b      	lsrs	r3, r3, #18
 8002040:	3b01      	subs	r3, #1
 8002042:	62bb      	str	r3, [r7, #40]	; 0x28
 8002044:	4b11      	ldr	r3, [pc, #68]	; (800208c <HAL_InitTick+0xac>)
 8002046:	4a12      	ldr	r2, [pc, #72]	; (8002090 <HAL_InitTick+0xb0>)
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	4b10      	ldr	r3, [pc, #64]	; (800208c <HAL_InitTick+0xac>)
 800204c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002050:	60da      	str	r2, [r3, #12]
 8002052:	4a0e      	ldr	r2, [pc, #56]	; (800208c <HAL_InitTick+0xac>)
 8002054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002056:	6053      	str	r3, [r2, #4]
 8002058:	4b0c      	ldr	r3, [pc, #48]	; (800208c <HAL_InitTick+0xac>)
 800205a:	2200      	movs	r2, #0
 800205c:	611a      	str	r2, [r3, #16]
 800205e:	4b0b      	ldr	r3, [pc, #44]	; (800208c <HAL_InitTick+0xac>)
 8002060:	2200      	movs	r2, #0
 8002062:	609a      	str	r2, [r3, #8]
 8002064:	4809      	ldr	r0, [pc, #36]	; (800208c <HAL_InitTick+0xac>)
 8002066:	f002 f887 	bl	8004178 <HAL_TIM_Base_Init>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d104      	bne.n	800207a <HAL_InitTick+0x9a>
 8002070:	4806      	ldr	r0, [pc, #24]	; (800208c <HAL_InitTick+0xac>)
 8002072:	f002 f8db 	bl	800422c <HAL_TIM_Base_Start_IT>
 8002076:	4603      	mov	r3, r0
 8002078:	e000      	b.n	800207c <HAL_InitTick+0x9c>
 800207a:	2301      	movs	r3, #1
 800207c:	4618      	mov	r0, r3
 800207e:	3730      	adds	r7, #48	; 0x30
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40023800 	.word	0x40023800
 8002088:	431bde83 	.word	0x431bde83
 800208c:	20000848 	.word	0x20000848
 8002090:	40001000 	.word	0x40001000

08002094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002098:	e7fe      	b.n	8002098 <NMI_Handler+0x4>

0800209a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800209a:	b480      	push	{r7}
 800209c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800209e:	e7fe      	b.n	800209e <HardFault_Handler+0x4>

080020a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020a4:	e7fe      	b.n	80020a4 <MemManage_Handler+0x4>

080020a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020a6:	b480      	push	{r7}
 80020a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020aa:	e7fe      	b.n	80020aa <BusFault_Handler+0x4>

080020ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020b0:	e7fe      	b.n	80020b0 <UsageFault_Handler+0x4>

080020b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020b2:	b480      	push	{r7}
 80020b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
	if (RxHeader.ExtId == 0x10005002){ //BOUTON SET++ : 0x88;
 80020c4:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <CAN1_RX0_IRQHandler+0x28>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	4a08      	ldr	r2, [pc, #32]	; (80020ec <CAN1_RX0_IRQHandler+0x2c>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d107      	bne.n	80020de <CAN1_RX0_IRQHandler+0x1e>
		xQueueSend(Queue_CAN_InterruptHandle, (uint8_t *) &RxData[0], 500);
 80020ce:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <CAN1_RX0_IRQHandler+0x30>)
 80020d0:	6818      	ldr	r0, [r3, #0]
 80020d2:	2300      	movs	r3, #0
 80020d4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80020d8:	4906      	ldr	r1, [pc, #24]	; (80020f4 <CAN1_RX0_IRQHandler+0x34>)
 80020da:	f003 fd8f 	bl	8005bfc <xQueueGenericSend>
	}
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80020de:	4806      	ldr	r0, [pc, #24]	; (80020f8 <CAN1_RX0_IRQHandler+0x38>)
 80020e0:	f000 fc0f 	bl	8002902 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80020e4:	bf00      	nop
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	200007a0 	.word	0x200007a0
 80020ec:	10005002 	.word	0x10005002
 80020f0:	20000814 	.word	0x20000814
 80020f4:	200007bc 	.word	0x200007bc
 80020f8:	200007c4 	.word	0x200007c4

080020fc <TIM6_DAC_IRQHandler>:
/**
  * @brief This function handles USART3 global interrupt.
  */

void TIM6_DAC_IRQHandler(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002100:	4802      	ldr	r0, [pc, #8]	; (800210c <TIM6_DAC_IRQHandler+0x10>)
 8002102:	f002 f903 	bl	800430c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000848 	.word	0x20000848

08002110 <_sbrk>:
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	4a14      	ldr	r2, [pc, #80]	; (800216c <_sbrk+0x5c>)
 800211a:	4b15      	ldr	r3, [pc, #84]	; (8002170 <_sbrk+0x60>)
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	613b      	str	r3, [r7, #16]
 8002124:	4b13      	ldr	r3, [pc, #76]	; (8002174 <_sbrk+0x64>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d102      	bne.n	8002132 <_sbrk+0x22>
 800212c:	4b11      	ldr	r3, [pc, #68]	; (8002174 <_sbrk+0x64>)
 800212e:	4a12      	ldr	r2, [pc, #72]	; (8002178 <_sbrk+0x68>)
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	4b10      	ldr	r3, [pc, #64]	; (8002174 <_sbrk+0x64>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4413      	add	r3, r2
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	429a      	cmp	r2, r3
 800213e:	d207      	bcs.n	8002150 <_sbrk+0x40>
 8002140:	f006 f9cc 	bl	80084dc <__errno>
 8002144:	4603      	mov	r3, r0
 8002146:	220c      	movs	r2, #12
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	f04f 33ff 	mov.w	r3, #4294967295
 800214e:	e009      	b.n	8002164 <_sbrk+0x54>
 8002150:	4b08      	ldr	r3, [pc, #32]	; (8002174 <_sbrk+0x64>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	4b07      	ldr	r3, [pc, #28]	; (8002174 <_sbrk+0x64>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4413      	add	r3, r2
 800215e:	4a05      	ldr	r2, [pc, #20]	; (8002174 <_sbrk+0x64>)
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	4618      	mov	r0, r3
 8002166:	3718      	adds	r7, #24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20020000 	.word	0x20020000
 8002170:	00000400 	.word	0x00000400
 8002174:	20000890 	.word	0x20000890
 8002178:	20004710 	.word	0x20004710

0800217c <SystemInit>:
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
 8002180:	4b06      	ldr	r3, [pc, #24]	; (800219c <SystemInit+0x20>)
 8002182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002186:	4a05      	ldr	r2, [pc, #20]	; (800219c <SystemInit+0x20>)
 8002188:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800218c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <Reset_Handler>:
 80021a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021d8 <LoopFillZerobss+0x12>
 80021a4:	480d      	ldr	r0, [pc, #52]	; (80021dc <LoopFillZerobss+0x16>)
 80021a6:	490e      	ldr	r1, [pc, #56]	; (80021e0 <LoopFillZerobss+0x1a>)
 80021a8:	4a0e      	ldr	r2, [pc, #56]	; (80021e4 <LoopFillZerobss+0x1e>)
 80021aa:	2300      	movs	r3, #0
 80021ac:	e002      	b.n	80021b4 <LoopCopyDataInit>

080021ae <CopyDataInit>:
 80021ae:	58d4      	ldr	r4, [r2, r3]
 80021b0:	50c4      	str	r4, [r0, r3]
 80021b2:	3304      	adds	r3, #4

080021b4 <LoopCopyDataInit>:
 80021b4:	18c4      	adds	r4, r0, r3
 80021b6:	428c      	cmp	r4, r1
 80021b8:	d3f9      	bcc.n	80021ae <CopyDataInit>
 80021ba:	4a0b      	ldr	r2, [pc, #44]	; (80021e8 <LoopFillZerobss+0x22>)
 80021bc:	4c0b      	ldr	r4, [pc, #44]	; (80021ec <LoopFillZerobss+0x26>)
 80021be:	2300      	movs	r3, #0
 80021c0:	e001      	b.n	80021c6 <LoopFillZerobss>

080021c2 <FillZerobss>:
 80021c2:	6013      	str	r3, [r2, #0]
 80021c4:	3204      	adds	r2, #4

080021c6 <LoopFillZerobss>:
 80021c6:	42a2      	cmp	r2, r4
 80021c8:	d3fb      	bcc.n	80021c2 <FillZerobss>
 80021ca:	f7ff ffd7 	bl	800217c <SystemInit>
 80021ce:	f006 f98b 	bl	80084e8 <__libc_init_array>
 80021d2:	f7ff f93f 	bl	8001454 <main>
 80021d6:	4770      	bx	lr
 80021d8:	20020000 	.word	0x20020000
 80021dc:	20000000 	.word	0x20000000
 80021e0:	20000074 	.word	0x20000074
 80021e4:	080090e8 	.word	0x080090e8
 80021e8:	20000074 	.word	0x20000074
 80021ec:	2000470c 	.word	0x2000470c

080021f0 <ADC_IRQHandler>:
 80021f0:	e7fe      	b.n	80021f0 <ADC_IRQHandler>
	...

080021f4 <HAL_Init>:
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	4b0e      	ldr	r3, [pc, #56]	; (8002234 <HAL_Init+0x40>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a0d      	ldr	r2, [pc, #52]	; (8002234 <HAL_Init+0x40>)
 80021fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002202:	6013      	str	r3, [r2, #0]
 8002204:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <HAL_Init+0x40>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a0a      	ldr	r2, [pc, #40]	; (8002234 <HAL_Init+0x40>)
 800220a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800220e:	6013      	str	r3, [r2, #0]
 8002210:	4b08      	ldr	r3, [pc, #32]	; (8002234 <HAL_Init+0x40>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a07      	ldr	r2, [pc, #28]	; (8002234 <HAL_Init+0x40>)
 8002216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800221a:	6013      	str	r3, [r2, #0]
 800221c:	2003      	movs	r0, #3
 800221e:	f000 fe7a 	bl	8002f16 <HAL_NVIC_SetPriorityGrouping>
 8002222:	2000      	movs	r0, #0
 8002224:	f7ff fedc 	bl	8001fe0 <HAL_InitTick>
 8002228:	f7ff fde4 	bl	8001df4 <HAL_MspInit>
 800222c:	2300      	movs	r3, #0
 800222e:	4618      	mov	r0, r3
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40023c00 	.word	0x40023c00

08002238 <HAL_IncTick>:
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
 800223c:	4b06      	ldr	r3, [pc, #24]	; (8002258 <HAL_IncTick+0x20>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	461a      	mov	r2, r3
 8002242:	4b06      	ldr	r3, [pc, #24]	; (800225c <HAL_IncTick+0x24>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4413      	add	r3, r2
 8002248:	4a04      	ldr	r2, [pc, #16]	; (800225c <HAL_IncTick+0x24>)
 800224a:	6013      	str	r3, [r2, #0]
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	20000008 	.word	0x20000008
 800225c:	20000894 	.word	0x20000894

08002260 <HAL_GetTick>:
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
 8002264:	4b03      	ldr	r3, [pc, #12]	; (8002274 <HAL_GetTick+0x14>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	20000894 	.word	0x20000894

08002278 <HAL_Delay>:
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	f7ff ffee 	bl	8002260 <HAL_GetTick>
 8002284:	60b8      	str	r0, [r7, #8]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002290:	d005      	beq.n	800229e <HAL_Delay+0x26>
 8002292:	4b0a      	ldr	r3, [pc, #40]	; (80022bc <HAL_Delay+0x44>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	461a      	mov	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	4413      	add	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	bf00      	nop
 80022a0:	f7ff ffde 	bl	8002260 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d8f7      	bhi.n	80022a0 <HAL_Delay+0x28>
 80022b0:	bf00      	nop
 80022b2:	bf00      	nop
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20000008 	.word	0x20000008

080022c0 <HAL_CAN_Init>:
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_CAN_Init+0x12>
 80022ce:	2301      	movs	r3, #1
 80022d0:	e0ed      	b.n	80024ae <HAL_CAN_Init+0x1ee>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d102      	bne.n	80022e4 <HAL_CAN_Init+0x24>
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7ff fdb4 	bl	8001e4c <HAL_CAN_MspInit>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 0201 	orr.w	r2, r2, #1
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	f7ff ffb4 	bl	8002260 <HAL_GetTick>
 80022f8:	60f8      	str	r0, [r7, #12]
 80022fa:	e012      	b.n	8002322 <HAL_CAN_Init+0x62>
 80022fc:	f7ff ffb0 	bl	8002260 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b0a      	cmp	r3, #10
 8002308:	d90b      	bls.n	8002322 <HAL_CAN_Init+0x62>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	625a      	str	r2, [r3, #36]	; 0x24
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2205      	movs	r2, #5
 800231a:	f883 2020 	strb.w	r2, [r3, #32]
 800231e:	2301      	movs	r3, #1
 8002320:	e0c5      	b.n	80024ae <HAL_CAN_Init+0x1ee>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0e5      	beq.n	80022fc <HAL_CAN_Init+0x3c>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 0202 	bic.w	r2, r2, #2
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	f7ff ff8e 	bl	8002260 <HAL_GetTick>
 8002344:	60f8      	str	r0, [r7, #12]
 8002346:	e012      	b.n	800236e <HAL_CAN_Init+0xae>
 8002348:	f7ff ff8a 	bl	8002260 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b0a      	cmp	r3, #10
 8002354:	d90b      	bls.n	800236e <HAL_CAN_Init+0xae>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	625a      	str	r2, [r3, #36]	; 0x24
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2205      	movs	r2, #5
 8002366:	f883 2020 	strb.w	r2, [r3, #32]
 800236a:	2301      	movs	r3, #1
 800236c:	e09f      	b.n	80024ae <HAL_CAN_Init+0x1ee>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1e5      	bne.n	8002348 <HAL_CAN_Init+0x88>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	7e1b      	ldrb	r3, [r3, #24]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d108      	bne.n	8002396 <HAL_CAN_Init+0xd6>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	e007      	b.n	80023a6 <HAL_CAN_Init+0xe6>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	7e5b      	ldrb	r3, [r3, #25]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d108      	bne.n	80023c0 <HAL_CAN_Init+0x100>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	e007      	b.n	80023d0 <HAL_CAN_Init+0x110>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	7e9b      	ldrb	r3, [r3, #26]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d108      	bne.n	80023ea <HAL_CAN_Init+0x12a>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f042 0220 	orr.w	r2, r2, #32
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	e007      	b.n	80023fa <HAL_CAN_Init+0x13a>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 0220 	bic.w	r2, r2, #32
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	7edb      	ldrb	r3, [r3, #27]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d108      	bne.n	8002414 <HAL_CAN_Init+0x154>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 0210 	bic.w	r2, r2, #16
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	e007      	b.n	8002424 <HAL_CAN_Init+0x164>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0210 	orr.w	r2, r2, #16
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	7f1b      	ldrb	r3, [r3, #28]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d108      	bne.n	800243e <HAL_CAN_Init+0x17e>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 0208 	orr.w	r2, r2, #8
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	e007      	b.n	800244e <HAL_CAN_Init+0x18e>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0208 	bic.w	r2, r2, #8
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	7f5b      	ldrb	r3, [r3, #29]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d108      	bne.n	8002468 <HAL_CAN_Init+0x1a8>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f042 0204 	orr.w	r2, r2, #4
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	e007      	b.n	8002478 <HAL_CAN_Init+0x1b8>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f022 0204 	bic.w	r2, r2, #4
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	431a      	orrs	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	431a      	orrs	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	ea42 0103 	orr.w	r1, r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	1e5a      	subs	r2, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	61da      	str	r2, [r3, #28]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	625a      	str	r2, [r3, #36]	; 0x24
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2020 	strb.w	r2, [r3, #32]
 80024ac:	2300      	movs	r3, #0
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
	...

080024b8 <HAL_CAN_ConfigFilter>:
 80024b8:	b480      	push	{r7}
 80024ba:	b087      	sub	sp, #28
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	617b      	str	r3, [r7, #20]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024ce:	74fb      	strb	r3, [r7, #19]
 80024d0:	7cfb      	ldrb	r3, [r7, #19]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d003      	beq.n	80024de <HAL_CAN_ConfigFilter+0x26>
 80024d6:	7cfb      	ldrb	r3, [r7, #19]
 80024d8:	2b02      	cmp	r3, #2
 80024da:	f040 80be 	bne.w	800265a <HAL_CAN_ConfigFilter+0x1a2>
 80024de:	4b65      	ldr	r3, [pc, #404]	; (8002674 <HAL_CAN_ConfigFilter+0x1bc>)
 80024e0:	617b      	str	r3, [r7, #20]
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024e8:	f043 0201 	orr.w	r2, r3, #1
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024f8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250c:	021b      	lsls	r3, r3, #8
 800250e:	431a      	orrs	r2, r3
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	f003 031f 	and.w	r3, r3, #31
 800251e:	2201      	movs	r2, #1
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	43db      	mvns	r3, r3
 8002530:	401a      	ands	r2, r3
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	69db      	ldr	r3, [r3, #28]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d123      	bne.n	8002588 <HAL_CAN_ConfigFilter+0xd0>
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	43db      	mvns	r3, r3
 800254a:	401a      	ands	r2, r3
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	0419      	lsls	r1, r3, #16
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	b29b      	uxth	r3, r3
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	6952      	ldr	r2, [r2, #20]
 8002562:	4319      	orrs	r1, r3
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	3248      	adds	r2, #72	; 0x48
 8002568:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	0419      	lsls	r1, r3, #16
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	b29a      	uxth	r2, r3
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	430a      	orrs	r2, r1
 800257e:	6979      	ldr	r1, [r7, #20]
 8002580:	3348      	adds	r3, #72	; 0x48
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	440b      	add	r3, r1
 8002586:	605a      	str	r2, [r3, #4]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d122      	bne.n	80025d6 <HAL_CAN_ConfigFilter+0x11e>
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	431a      	orrs	r2, r3
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	0419      	lsls	r1, r3, #16
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	6952      	ldr	r2, [r2, #20]
 80025b0:	4319      	orrs	r1, r3
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	3248      	adds	r2, #72	; 0x48
 80025b6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	0419      	lsls	r1, r3, #16
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	6979      	ldr	r1, [r7, #20]
 80025ce:	3348      	adds	r3, #72	; 0x48
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	440b      	add	r3, r1
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d109      	bne.n	80025f2 <HAL_CAN_ConfigFilter+0x13a>
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	43db      	mvns	r3, r3
 80025e8:	401a      	ands	r2, r3
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80025f0:	e007      	b.n	8002602 <HAL_CAN_ConfigFilter+0x14a>
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	431a      	orrs	r2, r3
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d109      	bne.n	800261e <HAL_CAN_ConfigFilter+0x166>
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	43db      	mvns	r3, r3
 8002614:	401a      	ands	r2, r3
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800261c:	e007      	b.n	800262e <HAL_CAN_ConfigFilter+0x176>
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	431a      	orrs	r2, r3
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d107      	bne.n	8002646 <HAL_CAN_ConfigFilter+0x18e>
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	431a      	orrs	r2, r3
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800264c:	f023 0201 	bic.w	r2, r3, #1
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8002656:	2300      	movs	r3, #0
 8002658:	e006      	b.n	8002668 <HAL_CAN_ConfigFilter+0x1b0>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	625a      	str	r2, [r3, #36]	; 0x24
 8002666:	2301      	movs	r3, #1
 8002668:	4618      	mov	r0, r3
 800266a:	371c      	adds	r7, #28
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	40006400 	.word	0x40006400

08002678 <HAL_CAN_Start>:
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b01      	cmp	r3, #1
 800268a:	d12e      	bne.n	80026ea <HAL_CAN_Start+0x72>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2202      	movs	r2, #2
 8002690:	f883 2020 	strb.w	r2, [r3, #32]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 0201 	bic.w	r2, r2, #1
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	f7ff fddc 	bl	8002260 <HAL_GetTick>
 80026a8:	60f8      	str	r0, [r7, #12]
 80026aa:	e012      	b.n	80026d2 <HAL_CAN_Start+0x5a>
 80026ac:	f7ff fdd8 	bl	8002260 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b0a      	cmp	r3, #10
 80026b8:	d90b      	bls.n	80026d2 <HAL_CAN_Start+0x5a>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	625a      	str	r2, [r3, #36]	; 0x24
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2205      	movs	r2, #5
 80026ca:	f883 2020 	strb.w	r2, [r3, #32]
 80026ce:	2301      	movs	r3, #1
 80026d0:	e012      	b.n	80026f8 <HAL_CAN_Start+0x80>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1e5      	bne.n	80026ac <HAL_CAN_Start+0x34>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	625a      	str	r2, [r3, #36]	; 0x24
 80026e6:	2300      	movs	r3, #0
 80026e8:	e006      	b.n	80026f8 <HAL_CAN_Start+0x80>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	625a      	str	r2, [r3, #36]	; 0x24
 80026f6:	2301      	movs	r3, #1
 80026f8:	4618      	mov	r0, r3
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <HAL_CAN_AddTxMessage>:
 8002700:	b480      	push	{r7}
 8002702:	b089      	sub	sp, #36	; 0x24
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
 800270c:	603b      	str	r3, [r7, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002714:	77fb      	strb	r3, [r7, #31]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	61bb      	str	r3, [r7, #24]
 800271e:	7ffb      	ldrb	r3, [r7, #31]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d003      	beq.n	800272c <HAL_CAN_AddTxMessage+0x2c>
 8002724:	7ffb      	ldrb	r3, [r7, #31]
 8002726:	2b02      	cmp	r3, #2
 8002728:	f040 80b8 	bne.w	800289c <HAL_CAN_AddTxMessage+0x19c>
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10a      	bne.n	800274c <HAL_CAN_AddTxMessage+0x4c>
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d105      	bne.n	800274c <HAL_CAN_AddTxMessage+0x4c>
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	f000 80a0 	beq.w	800288c <HAL_CAN_AddTxMessage+0x18c>
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	0e1b      	lsrs	r3, r3, #24
 8002750:	f003 0303 	and.w	r3, r3, #3
 8002754:	617b      	str	r3, [r7, #20]
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	2b02      	cmp	r3, #2
 800275a:	d907      	bls.n	800276c <HAL_CAN_AddTxMessage+0x6c>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	625a      	str	r2, [r3, #36]	; 0x24
 8002768:	2301      	movs	r3, #1
 800276a:	e09e      	b.n	80028aa <HAL_CAN_AddTxMessage+0x1aa>
 800276c:	2201      	movs	r2, #1
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	409a      	lsls	r2, r3
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10d      	bne.n	800279a <HAL_CAN_AddTxMessage+0x9a>
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	055a      	lsls	r2, r3, #21
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	68f9      	ldr	r1, [r7, #12]
 800278a:	6809      	ldr	r1, [r1, #0]
 800278c:	431a      	orrs	r2, r3
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	3318      	adds	r3, #24
 8002792:	011b      	lsls	r3, r3, #4
 8002794:	440b      	add	r3, r1
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	e00f      	b.n	80027ba <HAL_CAN_AddTxMessage+0xba>
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	00da      	lsls	r2, r3, #3
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	431a      	orrs	r2, r3
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	68f9      	ldr	r1, [r7, #12]
 80027ac:	6809      	ldr	r1, [r1, #0]
 80027ae:	431a      	orrs	r2, r3
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	3318      	adds	r3, #24
 80027b4:	011b      	lsls	r3, r3, #4
 80027b6:	440b      	add	r3, r1
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6819      	ldr	r1, [r3, #0]
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	691a      	ldr	r2, [r3, #16]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	3318      	adds	r3, #24
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	440b      	add	r3, r1
 80027ca:	3304      	adds	r3, #4
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	7d1b      	ldrb	r3, [r3, #20]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d111      	bne.n	80027fa <HAL_CAN_AddTxMessage+0xfa>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	3318      	adds	r3, #24
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	4413      	add	r3, r2
 80027e2:	3304      	adds	r3, #4
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	6811      	ldr	r1, [r2, #0]
 80027ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	3318      	adds	r3, #24
 80027f2:	011b      	lsls	r3, r3, #4
 80027f4:	440b      	add	r3, r1
 80027f6:	3304      	adds	r3, #4
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3307      	adds	r3, #7
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	061a      	lsls	r2, r3, #24
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	3306      	adds	r3, #6
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	041b      	lsls	r3, r3, #16
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3305      	adds	r3, #5
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	021b      	lsls	r3, r3, #8
 8002814:	4313      	orrs	r3, r2
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	3204      	adds	r2, #4
 800281a:	7812      	ldrb	r2, [r2, #0]
 800281c:	4610      	mov	r0, r2
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	6811      	ldr	r1, [r2, #0]
 8002822:	ea43 0200 	orr.w	r2, r3, r0
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	011b      	lsls	r3, r3, #4
 800282a:	440b      	add	r3, r1
 800282c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	3303      	adds	r3, #3
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	061a      	lsls	r2, r3, #24
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	3302      	adds	r3, #2
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	041b      	lsls	r3, r3, #16
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3301      	adds	r3, #1
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	021b      	lsls	r3, r3, #8
 800284c:	4313      	orrs	r3, r2
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	7812      	ldrb	r2, [r2, #0]
 8002852:	4610      	mov	r0, r2
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	6811      	ldr	r1, [r2, #0]
 8002858:	ea43 0200 	orr.w	r2, r3, r0
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	011b      	lsls	r3, r3, #4
 8002860:	440b      	add	r3, r1
 8002862:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	3318      	adds	r3, #24
 8002870:	011b      	lsls	r3, r3, #4
 8002872:	4413      	add	r3, r2
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	6811      	ldr	r1, [r2, #0]
 800287a:	f043 0201 	orr.w	r2, r3, #1
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	3318      	adds	r3, #24
 8002882:	011b      	lsls	r3, r3, #4
 8002884:	440b      	add	r3, r1
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	2300      	movs	r3, #0
 800288a:	e00e      	b.n	80028aa <HAL_CAN_AddTxMessage+0x1aa>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	625a      	str	r2, [r3, #36]	; 0x24
 8002898:	2301      	movs	r3, #1
 800289a:	e006      	b.n	80028aa <HAL_CAN_AddTxMessage+0x1aa>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	625a      	str	r2, [r3, #36]	; 0x24
 80028a8:	2301      	movs	r3, #1
 80028aa:	4618      	mov	r0, r3
 80028ac:	3724      	adds	r7, #36	; 0x24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <HAL_CAN_ActivateNotification>:
 80028b6:	b480      	push	{r7}
 80028b8:	b085      	sub	sp, #20
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
 80028be:	6039      	str	r1, [r7, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028c6:	73fb      	strb	r3, [r7, #15]
 80028c8:	7bfb      	ldrb	r3, [r7, #15]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d002      	beq.n	80028d4 <HAL_CAN_ActivateNotification+0x1e>
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d109      	bne.n	80028e8 <HAL_CAN_ActivateNotification+0x32>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6959      	ldr	r1, [r3, #20]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	615a      	str	r2, [r3, #20]
 80028e4:	2300      	movs	r3, #0
 80028e6:	e006      	b.n	80028f6 <HAL_CAN_ActivateNotification+0x40>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	625a      	str	r2, [r3, #36]	; 0x24
 80028f4:	2301      	movs	r3, #1
 80028f6:	4618      	mov	r0, r3
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <HAL_CAN_IRQHandler>:
 8002902:	b580      	push	{r7, lr}
 8002904:	b08a      	sub	sp, #40	; 0x28
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
 800290a:	2300      	movs	r3, #0
 800290c:	627b      	str	r3, [r7, #36]	; 0x24
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	623b      	str	r3, [r7, #32]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	61fb      	str	r3, [r7, #28]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	61bb      	str	r3, [r7, #24]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	617b      	str	r3, [r7, #20]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	613b      	str	r3, [r7, #16]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b00      	cmp	r3, #0
 8002946:	d07c      	beq.n	8002a42 <HAL_CAN_IRQHandler+0x140>
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d023      	beq.n	800299a <HAL_CAN_IRQHandler+0x98>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2201      	movs	r2, #1
 8002958:	609a      	str	r2, [r3, #8]
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <HAL_CAN_IRQHandler+0x6a>
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 f983 	bl	8002c70 <HAL_CAN_TxMailbox0CompleteCallback>
 800296a:	e016      	b.n	800299a <HAL_CAN_IRQHandler+0x98>
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	f003 0304 	and.w	r3, r3, #4
 8002972:	2b00      	cmp	r3, #0
 8002974:	d004      	beq.n	8002980 <HAL_CAN_IRQHandler+0x7e>
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800297c:	627b      	str	r3, [r7, #36]	; 0x24
 800297e:	e00c      	b.n	800299a <HAL_CAN_IRQHandler+0x98>
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	2b00      	cmp	r3, #0
 8002988:	d004      	beq.n	8002994 <HAL_CAN_IRQHandler+0x92>
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002990:	627b      	str	r3, [r7, #36]	; 0x24
 8002992:	e002      	b.n	800299a <HAL_CAN_IRQHandler+0x98>
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 f989 	bl	8002cac <HAL_CAN_TxMailbox0AbortCallback>
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d024      	beq.n	80029ee <HAL_CAN_IRQHandler+0xec>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029ac:	609a      	str	r2, [r3, #8]
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d003      	beq.n	80029c0 <HAL_CAN_IRQHandler+0xbe>
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 f963 	bl	8002c84 <HAL_CAN_TxMailbox1CompleteCallback>
 80029be:	e016      	b.n	80029ee <HAL_CAN_IRQHandler+0xec>
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d004      	beq.n	80029d4 <HAL_CAN_IRQHandler+0xd2>
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80029d0:	627b      	str	r3, [r7, #36]	; 0x24
 80029d2:	e00c      	b.n	80029ee <HAL_CAN_IRQHandler+0xec>
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d004      	beq.n	80029e8 <HAL_CAN_IRQHandler+0xe6>
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24
 80029e6:	e002      	b.n	80029ee <HAL_CAN_IRQHandler+0xec>
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 f969 	bl	8002cc0 <HAL_CAN_TxMailbox1AbortCallback>
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d024      	beq.n	8002a42 <HAL_CAN_IRQHandler+0x140>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a00:	609a      	str	r2, [r3, #8]
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d003      	beq.n	8002a14 <HAL_CAN_IRQHandler+0x112>
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f943 	bl	8002c98 <HAL_CAN_TxMailbox2CompleteCallback>
 8002a12:	e016      	b.n	8002a42 <HAL_CAN_IRQHandler+0x140>
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d004      	beq.n	8002a28 <HAL_CAN_IRQHandler+0x126>
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a24:	627b      	str	r3, [r7, #36]	; 0x24
 8002a26:	e00c      	b.n	8002a42 <HAL_CAN_IRQHandler+0x140>
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d004      	beq.n	8002a3c <HAL_CAN_IRQHandler+0x13a>
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a38:	627b      	str	r3, [r7, #36]	; 0x24
 8002a3a:	e002      	b.n	8002a42 <HAL_CAN_IRQHandler+0x140>
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 f949 	bl	8002cd4 <HAL_CAN_TxMailbox2AbortCallback>
 8002a42:	6a3b      	ldr	r3, [r7, #32]
 8002a44:	f003 0308 	and.w	r3, r3, #8
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00c      	beq.n	8002a66 <HAL_CAN_IRQHandler+0x164>
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	f003 0310 	and.w	r3, r3, #16
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d007      	beq.n	8002a66 <HAL_CAN_IRQHandler+0x164>
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2210      	movs	r2, #16
 8002a64:	60da      	str	r2, [r3, #12]
 8002a66:	6a3b      	ldr	r3, [r7, #32]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00b      	beq.n	8002a88 <HAL_CAN_IRQHandler+0x186>
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	f003 0308 	and.w	r3, r3, #8
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d006      	beq.n	8002a88 <HAL_CAN_IRQHandler+0x186>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2208      	movs	r2, #8
 8002a80:	60da      	str	r2, [r3, #12]
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f93a 	bl	8002cfc <HAL_CAN_RxFifo0FullCallback>
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d009      	beq.n	8002aa6 <HAL_CAN_IRQHandler+0x1a4>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	f003 0303 	and.w	r3, r3, #3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d002      	beq.n	8002aa6 <HAL_CAN_IRQHandler+0x1a4>
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 f921 	bl	8002ce8 <HAL_CAN_RxFifo0MsgPendingCallback>
 8002aa6:	6a3b      	ldr	r3, [r7, #32]
 8002aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00c      	beq.n	8002aca <HAL_CAN_IRQHandler+0x1c8>
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	f003 0310 	and.w	r3, r3, #16
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d007      	beq.n	8002aca <HAL_CAN_IRQHandler+0x1c8>
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2210      	movs	r2, #16
 8002ac8:	611a      	str	r2, [r3, #16]
 8002aca:	6a3b      	ldr	r3, [r7, #32]
 8002acc:	f003 0320 	and.w	r3, r3, #32
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00b      	beq.n	8002aec <HAL_CAN_IRQHandler+0x1ea>
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	f003 0308 	and.w	r3, r3, #8
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d006      	beq.n	8002aec <HAL_CAN_IRQHandler+0x1ea>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2208      	movs	r2, #8
 8002ae4:	611a      	str	r2, [r3, #16]
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f91c 	bl	8002d24 <HAL_CAN_RxFifo1FullCallback>
 8002aec:	6a3b      	ldr	r3, [r7, #32]
 8002aee:	f003 0310 	and.w	r3, r3, #16
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d009      	beq.n	8002b0a <HAL_CAN_IRQHandler+0x208>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	f003 0303 	and.w	r3, r3, #3
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d002      	beq.n	8002b0a <HAL_CAN_IRQHandler+0x208>
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f903 	bl	8002d10 <HAL_CAN_RxFifo1MsgPendingCallback>
 8002b0a:	6a3b      	ldr	r3, [r7, #32]
 8002b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00b      	beq.n	8002b2c <HAL_CAN_IRQHandler+0x22a>
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	f003 0310 	and.w	r3, r3, #16
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d006      	beq.n	8002b2c <HAL_CAN_IRQHandler+0x22a>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2210      	movs	r2, #16
 8002b24:	605a      	str	r2, [r3, #4]
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f906 	bl	8002d38 <HAL_CAN_SleepCallback>
 8002b2c:	6a3b      	ldr	r3, [r7, #32]
 8002b2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00b      	beq.n	8002b4e <HAL_CAN_IRQHandler+0x24c>
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	f003 0308 	and.w	r3, r3, #8
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d006      	beq.n	8002b4e <HAL_CAN_IRQHandler+0x24c>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2208      	movs	r2, #8
 8002b46:	605a      	str	r2, [r3, #4]
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 f8ff 	bl	8002d4c <HAL_CAN_WakeUpFromRxMsgCallback>
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d07b      	beq.n	8002c50 <HAL_CAN_IRQHandler+0x34e>
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	f003 0304 	and.w	r3, r3, #4
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d072      	beq.n	8002c48 <HAL_CAN_IRQHandler+0x346>
 8002b62:	6a3b      	ldr	r3, [r7, #32]
 8002b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d008      	beq.n	8002b7e <HAL_CAN_IRQHandler+0x27c>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_CAN_IRQHandler+0x27c>
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b7e:	6a3b      	ldr	r3, [r7, #32]
 8002b80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d008      	beq.n	8002b9a <HAL_CAN_IRQHandler+0x298>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_CAN_IRQHandler+0x298>
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	f043 0302 	orr.w	r3, r3, #2
 8002b98:	627b      	str	r3, [r7, #36]	; 0x24
 8002b9a:	6a3b      	ldr	r3, [r7, #32]
 8002b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d008      	beq.n	8002bb6 <HAL_CAN_IRQHandler+0x2b4>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f003 0304 	and.w	r3, r3, #4
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_CAN_IRQHandler+0x2b4>
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	f043 0304 	orr.w	r3, r3, #4
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d043      	beq.n	8002c48 <HAL_CAN_IRQHandler+0x346>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d03e      	beq.n	8002c48 <HAL_CAN_IRQHandler+0x346>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002bd0:	2b60      	cmp	r3, #96	; 0x60
 8002bd2:	d02b      	beq.n	8002c2c <HAL_CAN_IRQHandler+0x32a>
 8002bd4:	2b60      	cmp	r3, #96	; 0x60
 8002bd6:	d82e      	bhi.n	8002c36 <HAL_CAN_IRQHandler+0x334>
 8002bd8:	2b50      	cmp	r3, #80	; 0x50
 8002bda:	d022      	beq.n	8002c22 <HAL_CAN_IRQHandler+0x320>
 8002bdc:	2b50      	cmp	r3, #80	; 0x50
 8002bde:	d82a      	bhi.n	8002c36 <HAL_CAN_IRQHandler+0x334>
 8002be0:	2b40      	cmp	r3, #64	; 0x40
 8002be2:	d019      	beq.n	8002c18 <HAL_CAN_IRQHandler+0x316>
 8002be4:	2b40      	cmp	r3, #64	; 0x40
 8002be6:	d826      	bhi.n	8002c36 <HAL_CAN_IRQHandler+0x334>
 8002be8:	2b30      	cmp	r3, #48	; 0x30
 8002bea:	d010      	beq.n	8002c0e <HAL_CAN_IRQHandler+0x30c>
 8002bec:	2b30      	cmp	r3, #48	; 0x30
 8002bee:	d822      	bhi.n	8002c36 <HAL_CAN_IRQHandler+0x334>
 8002bf0:	2b10      	cmp	r3, #16
 8002bf2:	d002      	beq.n	8002bfa <HAL_CAN_IRQHandler+0x2f8>
 8002bf4:	2b20      	cmp	r3, #32
 8002bf6:	d005      	beq.n	8002c04 <HAL_CAN_IRQHandler+0x302>
 8002bf8:	e01d      	b.n	8002c36 <HAL_CAN_IRQHandler+0x334>
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	f043 0308 	orr.w	r3, r3, #8
 8002c00:	627b      	str	r3, [r7, #36]	; 0x24
 8002c02:	e019      	b.n	8002c38 <HAL_CAN_IRQHandler+0x336>
 8002c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c06:	f043 0310 	orr.w	r3, r3, #16
 8002c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c0c:	e014      	b.n	8002c38 <HAL_CAN_IRQHandler+0x336>
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c10:	f043 0320 	orr.w	r3, r3, #32
 8002c14:	627b      	str	r3, [r7, #36]	; 0x24
 8002c16:	e00f      	b.n	8002c38 <HAL_CAN_IRQHandler+0x336>
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c20:	e00a      	b.n	8002c38 <HAL_CAN_IRQHandler+0x336>
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c28:	627b      	str	r3, [r7, #36]	; 0x24
 8002c2a:	e005      	b.n	8002c38 <HAL_CAN_IRQHandler+0x336>
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c32:	627b      	str	r3, [r7, #36]	; 0x24
 8002c34:	e000      	b.n	8002c38 <HAL_CAN_IRQHandler+0x336>
 8002c36:	bf00      	nop
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	699a      	ldr	r2, [r3, #24]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002c46:	619a      	str	r2, [r3, #24]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2204      	movs	r2, #4
 8002c4e:	605a      	str	r2, [r3, #4]
 8002c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d008      	beq.n	8002c68 <HAL_CAN_IRQHandler+0x366>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	625a      	str	r2, [r3, #36]	; 0x24
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f87c 	bl	8002d60 <HAL_CAN_ErrorCallback>
 8002c68:	bf00      	nop
 8002c6a:	3728      	adds	r7, #40	; 0x28
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <HAL_CAN_TxMailbox0CompleteCallback>:
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_CAN_TxMailbox1CompleteCallback>:
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <HAL_CAN_TxMailbox2CompleteCallback>:
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <HAL_CAN_TxMailbox0AbortCallback>:
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <HAL_CAN_TxMailbox1AbortCallback>:
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_CAN_TxMailbox2AbortCallback>:
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_CAN_RxFifo0MsgPendingCallback>:
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <HAL_CAN_RxFifo0FullCallback>:
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <HAL_CAN_RxFifo1FullCallback>:
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <HAL_CAN_SleepCallback>:
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <HAL_CAN_WakeUpFromRxMsgCallback>:
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <HAL_CAN_ErrorCallback>:
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <__NVIC_SetPriorityGrouping>:
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f003 0307 	and.w	r3, r3, #7
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	4b0c      	ldr	r3, [pc, #48]	; (8002db8 <__NVIC_SetPriorityGrouping+0x44>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	60bb      	str	r3, [r7, #8]
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d90:	4013      	ands	r3, r2
 8002d92:	60bb      	str	r3, [r7, #8]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	021a      	lsls	r2, r3, #8
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002da4:	60bb      	str	r3, [r7, #8]
 8002da6:	4a04      	ldr	r2, [pc, #16]	; (8002db8 <__NVIC_SetPriorityGrouping+0x44>)
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	60d3      	str	r3, [r2, #12]
 8002dac:	bf00      	nop
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	e000ed00 	.word	0xe000ed00

08002dbc <__NVIC_GetPriorityGrouping>:
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	4b04      	ldr	r3, [pc, #16]	; (8002dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	0a1b      	lsrs	r3, r3, #8
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	4618      	mov	r0, r3
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	e000ed00 	.word	0xe000ed00

08002dd8 <__NVIC_EnableIRQ>:
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	71fb      	strb	r3, [r7, #7]
 8002de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	db0b      	blt.n	8002e02 <__NVIC_EnableIRQ+0x2a>
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	f003 021f 	and.w	r2, r3, #31
 8002df0:	4907      	ldr	r1, [pc, #28]	; (8002e10 <__NVIC_EnableIRQ+0x38>)
 8002df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df6:	095b      	lsrs	r3, r3, #5
 8002df8:	2001      	movs	r0, #1
 8002dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8002dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	e000e100 	.word	0xe000e100

08002e14 <__NVIC_DisableIRQ>:
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	71fb      	strb	r3, [r7, #7]
 8002e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	db12      	blt.n	8002e4c <__NVIC_DisableIRQ+0x38>
 8002e26:	79fb      	ldrb	r3, [r7, #7]
 8002e28:	f003 021f 	and.w	r2, r3, #31
 8002e2c:	490a      	ldr	r1, [pc, #40]	; (8002e58 <__NVIC_DisableIRQ+0x44>)
 8002e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e32:	095b      	lsrs	r3, r3, #5
 8002e34:	2001      	movs	r0, #1
 8002e36:	fa00 f202 	lsl.w	r2, r0, r2
 8002e3a:	3320      	adds	r3, #32
 8002e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002e40:	f3bf 8f4f 	dsb	sy
 8002e44:	bf00      	nop
 8002e46:	f3bf 8f6f 	isb	sy
 8002e4a:	bf00      	nop
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	e000e100 	.word	0xe000e100

08002e5c <__NVIC_SetPriority>:
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	4603      	mov	r3, r0
 8002e64:	6039      	str	r1, [r7, #0]
 8002e66:	71fb      	strb	r3, [r7, #7]
 8002e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	db0a      	blt.n	8002e86 <__NVIC_SetPriority+0x2a>
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	490c      	ldr	r1, [pc, #48]	; (8002ea8 <__NVIC_SetPriority+0x4c>)
 8002e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7a:	0112      	lsls	r2, r2, #4
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	440b      	add	r3, r1
 8002e80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002e84:	e00a      	b.n	8002e9c <__NVIC_SetPriority+0x40>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	4908      	ldr	r1, [pc, #32]	; (8002eac <__NVIC_SetPriority+0x50>)
 8002e8c:	79fb      	ldrb	r3, [r7, #7]
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	3b04      	subs	r3, #4
 8002e94:	0112      	lsls	r2, r2, #4
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	440b      	add	r3, r1
 8002e9a:	761a      	strb	r2, [r3, #24]
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	e000e100 	.word	0xe000e100
 8002eac:	e000ed00 	.word	0xe000ed00

08002eb0 <NVIC_EncodePriority>:
 8002eb0:	b480      	push	{r7}
 8002eb2:	b089      	sub	sp, #36	; 0x24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	61fb      	str	r3, [r7, #28]
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f1c3 0307 	rsb	r3, r3, #7
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	bf28      	it	cs
 8002ece:	2304      	movcs	r3, #4
 8002ed0:	61bb      	str	r3, [r7, #24]
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	2b06      	cmp	r3, #6
 8002ed8:	d902      	bls.n	8002ee0 <NVIC_EncodePriority+0x30>
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	3b03      	subs	r3, #3
 8002ede:	e000      	b.n	8002ee2 <NVIC_EncodePriority+0x32>
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	617b      	str	r3, [r7, #20]
 8002ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43da      	mvns	r2, r3
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	401a      	ands	r2, r3
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	409a      	lsls	r2, r3
 8002ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	fa01 f303 	lsl.w	r3, r1, r3
 8002f02:	43d9      	mvns	r1, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	400b      	ands	r3, r1
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3724      	adds	r7, #36	; 0x24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <HAL_NVIC_SetPriorityGrouping>:
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b082      	sub	sp, #8
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7ff ff28 	bl	8002d74 <__NVIC_SetPriorityGrouping>
 8002f24:	bf00      	nop
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <HAL_NVIC_SetPriority>:
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	4603      	mov	r3, r0
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
 8002f38:	73fb      	strb	r3, [r7, #15]
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	617b      	str	r3, [r7, #20]
 8002f3e:	f7ff ff3d 	bl	8002dbc <__NVIC_GetPriorityGrouping>
 8002f42:	6178      	str	r0, [r7, #20]
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	68b9      	ldr	r1, [r7, #8]
 8002f48:	6978      	ldr	r0, [r7, #20]
 8002f4a:	f7ff ffb1 	bl	8002eb0 <NVIC_EncodePriority>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f54:	4611      	mov	r1, r2
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff ff80 	bl	8002e5c <__NVIC_SetPriority>
 8002f5c:	bf00      	nop
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_NVIC_EnableIRQ>:
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	71fb      	strb	r3, [r7, #7]
 8002f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff ff30 	bl	8002dd8 <__NVIC_EnableIRQ>
 8002f78:	bf00      	nop
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HAL_NVIC_DisableIRQ>:
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	71fb      	strb	r3, [r7, #7]
 8002f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff ff40 	bl	8002e14 <__NVIC_DisableIRQ>
 8002f94:	bf00      	nop
 8002f96:	3708      	adds	r7, #8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <HAL_DMA_Abort>:
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	f7ff f959 	bl	8002260 <HAL_GetTick>
 8002fae:	60b8      	str	r0, [r7, #8]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d008      	beq.n	8002fce <HAL_DMA_Abort+0x32>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2280      	movs	r2, #128	; 0x80
 8002fc0:	655a      	str	r2, [r3, #84]	; 0x54
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e052      	b.n	8003074 <HAL_DMA_Abort+0xd8>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 0216 	bic.w	r2, r2, #22
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	695a      	ldr	r2, [r3, #20]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fec:	615a      	str	r2, [r3, #20]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d103      	bne.n	8002ffe <HAL_DMA_Abort+0x62>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d007      	beq.n	800300e <HAL_DMA_Abort+0x72>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0208 	bic.w	r2, r2, #8
 800300c:	601a      	str	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 0201 	bic.w	r2, r2, #1
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	e013      	b.n	8003048 <HAL_DMA_Abort+0xac>
 8003020:	f7ff f91e 	bl	8002260 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b05      	cmp	r3, #5
 800302c:	d90c      	bls.n	8003048 <HAL_DMA_Abort+0xac>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2220      	movs	r2, #32
 8003032:	655a      	str	r2, [r3, #84]	; 0x54
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2203      	movs	r2, #3
 8003038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8003044:	2303      	movs	r3, #3
 8003046:	e015      	b.n	8003074 <HAL_DMA_Abort+0xd8>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1e4      	bne.n	8003020 <HAL_DMA_Abort+0x84>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800305a:	223f      	movs	r2, #63	; 0x3f
 800305c:	409a      	lsls	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	609a      	str	r2, [r3, #8]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8003072:	2300      	movs	r3, #0
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <HAL_DMA_Abort_IT>:
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d004      	beq.n	800309a <HAL_DMA_Abort_IT+0x1e>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2280      	movs	r2, #128	; 0x80
 8003094:	655a      	str	r2, [r3, #84]	; 0x54
 8003096:	2301      	movs	r3, #1
 8003098:	e00c      	b.n	80030b4 <HAL_DMA_Abort_IT+0x38>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2205      	movs	r2, #5
 800309e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 0201 	bic.w	r2, r2, #1
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	2300      	movs	r3, #0
 80030b4:	4618      	mov	r0, r3
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <HAL_GPIO_Init>:
 80030c0:	b480      	push	{r7}
 80030c2:	b089      	sub	sp, #36	; 0x24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
 80030ca:	2300      	movs	r3, #0
 80030cc:	617b      	str	r3, [r7, #20]
 80030ce:	2300      	movs	r3, #0
 80030d0:	613b      	str	r3, [r7, #16]
 80030d2:	2300      	movs	r3, #0
 80030d4:	61bb      	str	r3, [r7, #24]
 80030d6:	2300      	movs	r3, #0
 80030d8:	61fb      	str	r3, [r7, #28]
 80030da:	e16b      	b.n	80033b4 <HAL_GPIO_Init+0x2f4>
 80030dc:	2201      	movs	r2, #1
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	617b      	str	r3, [r7, #20]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	4013      	ands	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	f040 815a 	bne.w	80033ae <HAL_GPIO_Init+0x2ee>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	2b01      	cmp	r3, #1
 8003104:	d005      	beq.n	8003112 <HAL_GPIO_Init+0x52>
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d130      	bne.n	8003174 <HAL_GPIO_Init+0xb4>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	61bb      	str	r3, [r7, #24]
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	2203      	movs	r2, #3
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	43db      	mvns	r3, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4013      	ands	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	68da      	ldr	r2, [r3, #12]
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	4313      	orrs	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	609a      	str	r2, [r3, #8]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	61bb      	str	r3, [r7, #24]
 8003148:	2201      	movs	r2, #1
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	43db      	mvns	r3, r3
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	4013      	ands	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	091b      	lsrs	r3, r3, #4
 800315e:	f003 0201 	and.w	r2, r3, #1
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4313      	orrs	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	605a      	str	r2, [r3, #4]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f003 0303 	and.w	r3, r3, #3
 800317c:	2b03      	cmp	r3, #3
 800317e:	d017      	beq.n	80031b0 <HAL_GPIO_Init+0xf0>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	61bb      	str	r3, [r7, #24]
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	2203      	movs	r2, #3
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	43db      	mvns	r3, r3
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4013      	ands	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	60da      	str	r2, [r3, #12]
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f003 0303 	and.w	r3, r3, #3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d123      	bne.n	8003204 <HAL_GPIO_Init+0x144>
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	08da      	lsrs	r2, r3, #3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3208      	adds	r2, #8
 80031c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031c8:	61bb      	str	r3, [r7, #24]
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	220f      	movs	r2, #15
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	43db      	mvns	r3, r3
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4013      	ands	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	691a      	ldr	r2, [r3, #16]
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	08da      	lsrs	r2, r3, #3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	3208      	adds	r2, #8
 80031fe:	69b9      	ldr	r1, [r7, #24]
 8003200:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	61bb      	str	r3, [r7, #24]
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	2203      	movs	r2, #3
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	43db      	mvns	r3, r3
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	4013      	ands	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f003 0203 	and.w	r2, r3, #3
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	4313      	orrs	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 80b4 	beq.w	80033ae <HAL_GPIO_Init+0x2ee>
 8003246:	2300      	movs	r3, #0
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	4b60      	ldr	r3, [pc, #384]	; (80033cc <HAL_GPIO_Init+0x30c>)
 800324c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324e:	4a5f      	ldr	r2, [pc, #380]	; (80033cc <HAL_GPIO_Init+0x30c>)
 8003250:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003254:	6453      	str	r3, [r2, #68]	; 0x44
 8003256:	4b5d      	ldr	r3, [pc, #372]	; (80033cc <HAL_GPIO_Init+0x30c>)
 8003258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4a5b      	ldr	r2, [pc, #364]	; (80033d0 <HAL_GPIO_Init+0x310>)
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	089b      	lsrs	r3, r3, #2
 8003268:	3302      	adds	r3, #2
 800326a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800326e:	61bb      	str	r3, [r7, #24]
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	f003 0303 	and.w	r3, r3, #3
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	220f      	movs	r2, #15
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	43db      	mvns	r3, r3
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	4013      	ands	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a52      	ldr	r2, [pc, #328]	; (80033d4 <HAL_GPIO_Init+0x314>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d02b      	beq.n	80032e6 <HAL_GPIO_Init+0x226>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a51      	ldr	r2, [pc, #324]	; (80033d8 <HAL_GPIO_Init+0x318>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d025      	beq.n	80032e2 <HAL_GPIO_Init+0x222>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a50      	ldr	r2, [pc, #320]	; (80033dc <HAL_GPIO_Init+0x31c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d01f      	beq.n	80032de <HAL_GPIO_Init+0x21e>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a4f      	ldr	r2, [pc, #316]	; (80033e0 <HAL_GPIO_Init+0x320>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d019      	beq.n	80032da <HAL_GPIO_Init+0x21a>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a4e      	ldr	r2, [pc, #312]	; (80033e4 <HAL_GPIO_Init+0x324>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d013      	beq.n	80032d6 <HAL_GPIO_Init+0x216>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a4d      	ldr	r2, [pc, #308]	; (80033e8 <HAL_GPIO_Init+0x328>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d00d      	beq.n	80032d2 <HAL_GPIO_Init+0x212>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a4c      	ldr	r2, [pc, #304]	; (80033ec <HAL_GPIO_Init+0x32c>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d007      	beq.n	80032ce <HAL_GPIO_Init+0x20e>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a4b      	ldr	r2, [pc, #300]	; (80033f0 <HAL_GPIO_Init+0x330>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d101      	bne.n	80032ca <HAL_GPIO_Init+0x20a>
 80032c6:	2307      	movs	r3, #7
 80032c8:	e00e      	b.n	80032e8 <HAL_GPIO_Init+0x228>
 80032ca:	2308      	movs	r3, #8
 80032cc:	e00c      	b.n	80032e8 <HAL_GPIO_Init+0x228>
 80032ce:	2306      	movs	r3, #6
 80032d0:	e00a      	b.n	80032e8 <HAL_GPIO_Init+0x228>
 80032d2:	2305      	movs	r3, #5
 80032d4:	e008      	b.n	80032e8 <HAL_GPIO_Init+0x228>
 80032d6:	2304      	movs	r3, #4
 80032d8:	e006      	b.n	80032e8 <HAL_GPIO_Init+0x228>
 80032da:	2303      	movs	r3, #3
 80032dc:	e004      	b.n	80032e8 <HAL_GPIO_Init+0x228>
 80032de:	2302      	movs	r3, #2
 80032e0:	e002      	b.n	80032e8 <HAL_GPIO_Init+0x228>
 80032e2:	2301      	movs	r3, #1
 80032e4:	e000      	b.n	80032e8 <HAL_GPIO_Init+0x228>
 80032e6:	2300      	movs	r3, #0
 80032e8:	69fa      	ldr	r2, [r7, #28]
 80032ea:	f002 0203 	and.w	r2, r2, #3
 80032ee:	0092      	lsls	r2, r2, #2
 80032f0:	4093      	lsls	r3, r2
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]
 80032f8:	4935      	ldr	r1, [pc, #212]	; (80033d0 <HAL_GPIO_Init+0x310>)
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	089b      	lsrs	r3, r3, #2
 80032fe:	3302      	adds	r3, #2
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003306:	4b3b      	ldr	r3, [pc, #236]	; (80033f4 <HAL_GPIO_Init+0x334>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	61bb      	str	r3, [r7, #24]
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	43db      	mvns	r3, r3
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	4013      	ands	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_GPIO_Init+0x26a>
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	4313      	orrs	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
 800332a:	4a32      	ldr	r2, [pc, #200]	; (80033f4 <HAL_GPIO_Init+0x334>)
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	6093      	str	r3, [r2, #8]
 8003330:	4b30      	ldr	r3, [pc, #192]	; (80033f4 <HAL_GPIO_Init+0x334>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	61bb      	str	r3, [r7, #24]
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	43db      	mvns	r3, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4013      	ands	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <HAL_GPIO_Init+0x294>
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	4313      	orrs	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
 8003354:	4a27      	ldr	r2, [pc, #156]	; (80033f4 <HAL_GPIO_Init+0x334>)
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	60d3      	str	r3, [r2, #12]
 800335a:	4b26      	ldr	r3, [pc, #152]	; (80033f4 <HAL_GPIO_Init+0x334>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	61bb      	str	r3, [r7, #24]
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	43db      	mvns	r3, r3
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	4013      	ands	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_GPIO_Init+0x2be>
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	4313      	orrs	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
 800337e:	4a1d      	ldr	r2, [pc, #116]	; (80033f4 <HAL_GPIO_Init+0x334>)
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	6053      	str	r3, [r2, #4]
 8003384:	4b1b      	ldr	r3, [pc, #108]	; (80033f4 <HAL_GPIO_Init+0x334>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	61bb      	str	r3, [r7, #24]
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	43db      	mvns	r3, r3
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	4013      	ands	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <HAL_GPIO_Init+0x2e8>
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
 80033a8:	4a12      	ldr	r2, [pc, #72]	; (80033f4 <HAL_GPIO_Init+0x334>)
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	3301      	adds	r3, #1
 80033b2:	61fb      	str	r3, [r7, #28]
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	2b0f      	cmp	r3, #15
 80033b8:	f67f ae90 	bls.w	80030dc <HAL_GPIO_Init+0x1c>
 80033bc:	bf00      	nop
 80033be:	bf00      	nop
 80033c0:	3724      	adds	r7, #36	; 0x24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	40023800 	.word	0x40023800
 80033d0:	40013800 	.word	0x40013800
 80033d4:	40020000 	.word	0x40020000
 80033d8:	40020400 	.word	0x40020400
 80033dc:	40020800 	.word	0x40020800
 80033e0:	40020c00 	.word	0x40020c00
 80033e4:	40021000 	.word	0x40021000
 80033e8:	40021400 	.word	0x40021400
 80033ec:	40021800 	.word	0x40021800
 80033f0:	40021c00 	.word	0x40021c00
 80033f4:	40013c00 	.word	0x40013c00

080033f8 <HAL_GPIO_WritePin>:
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	460b      	mov	r3, r1
 8003402:	807b      	strh	r3, [r7, #2]
 8003404:	4613      	mov	r3, r2
 8003406:	707b      	strb	r3, [r7, #1]
 8003408:	787b      	ldrb	r3, [r7, #1]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <HAL_GPIO_WritePin+0x1e>
 800340e:	887a      	ldrh	r2, [r7, #2]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	619a      	str	r2, [r3, #24]
 8003414:	e003      	b.n	800341e <HAL_GPIO_WritePin+0x26>
 8003416:	887b      	ldrh	r3, [r7, #2]
 8003418:	041a      	lsls	r2, r3, #16
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	619a      	str	r2, [r3, #24]
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
	...

0800342c <HAL_RCC_OscConfig>:
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_RCC_OscConfig+0x12>
 800343a:	2301      	movs	r3, #1
 800343c:	e267      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	d075      	beq.n	8003536 <HAL_RCC_OscConfig+0x10a>
 800344a:	4b88      	ldr	r3, [pc, #544]	; (800366c <HAL_RCC_OscConfig+0x240>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 030c 	and.w	r3, r3, #12
 8003452:	2b04      	cmp	r3, #4
 8003454:	d00c      	beq.n	8003470 <HAL_RCC_OscConfig+0x44>
 8003456:	4b85      	ldr	r3, [pc, #532]	; (800366c <HAL_RCC_OscConfig+0x240>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 030c 	and.w	r3, r3, #12
 800345e:	2b08      	cmp	r3, #8
 8003460:	d112      	bne.n	8003488 <HAL_RCC_OscConfig+0x5c>
 8003462:	4b82      	ldr	r3, [pc, #520]	; (800366c <HAL_RCC_OscConfig+0x240>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800346a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800346e:	d10b      	bne.n	8003488 <HAL_RCC_OscConfig+0x5c>
 8003470:	4b7e      	ldr	r3, [pc, #504]	; (800366c <HAL_RCC_OscConfig+0x240>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d05b      	beq.n	8003534 <HAL_RCC_OscConfig+0x108>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d157      	bne.n	8003534 <HAL_RCC_OscConfig+0x108>
 8003484:	2301      	movs	r3, #1
 8003486:	e242      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003490:	d106      	bne.n	80034a0 <HAL_RCC_OscConfig+0x74>
 8003492:	4b76      	ldr	r3, [pc, #472]	; (800366c <HAL_RCC_OscConfig+0x240>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a75      	ldr	r2, [pc, #468]	; (800366c <HAL_RCC_OscConfig+0x240>)
 8003498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800349c:	6013      	str	r3, [r2, #0]
 800349e:	e01d      	b.n	80034dc <HAL_RCC_OscConfig+0xb0>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034a8:	d10c      	bne.n	80034c4 <HAL_RCC_OscConfig+0x98>
 80034aa:	4b70      	ldr	r3, [pc, #448]	; (800366c <HAL_RCC_OscConfig+0x240>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a6f      	ldr	r2, [pc, #444]	; (800366c <HAL_RCC_OscConfig+0x240>)
 80034b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034b4:	6013      	str	r3, [r2, #0]
 80034b6:	4b6d      	ldr	r3, [pc, #436]	; (800366c <HAL_RCC_OscConfig+0x240>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a6c      	ldr	r2, [pc, #432]	; (800366c <HAL_RCC_OscConfig+0x240>)
 80034bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c0:	6013      	str	r3, [r2, #0]
 80034c2:	e00b      	b.n	80034dc <HAL_RCC_OscConfig+0xb0>
 80034c4:	4b69      	ldr	r3, [pc, #420]	; (800366c <HAL_RCC_OscConfig+0x240>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a68      	ldr	r2, [pc, #416]	; (800366c <HAL_RCC_OscConfig+0x240>)
 80034ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ce:	6013      	str	r3, [r2, #0]
 80034d0:	4b66      	ldr	r3, [pc, #408]	; (800366c <HAL_RCC_OscConfig+0x240>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a65      	ldr	r2, [pc, #404]	; (800366c <HAL_RCC_OscConfig+0x240>)
 80034d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034da:	6013      	str	r3, [r2, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d013      	beq.n	800350c <HAL_RCC_OscConfig+0xe0>
 80034e4:	f7fe febc 	bl	8002260 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0xd2>
 80034ec:	f7fe feb8 	bl	8002260 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b64      	cmp	r3, #100	; 0x64
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0xd2>
 80034fa:	2303      	movs	r3, #3
 80034fc:	e207      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
 80034fe:	4b5b      	ldr	r3, [pc, #364]	; (800366c <HAL_RCC_OscConfig+0x240>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0f0      	beq.n	80034ec <HAL_RCC_OscConfig+0xc0>
 800350a:	e014      	b.n	8003536 <HAL_RCC_OscConfig+0x10a>
 800350c:	f7fe fea8 	bl	8002260 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0xfa>
 8003514:	f7fe fea4 	bl	8002260 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b64      	cmp	r3, #100	; 0x64
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0xfa>
 8003522:	2303      	movs	r3, #3
 8003524:	e1f3      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
 8003526:	4b51      	ldr	r3, [pc, #324]	; (800366c <HAL_RCC_OscConfig+0x240>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1f0      	bne.n	8003514 <HAL_RCC_OscConfig+0xe8>
 8003532:	e000      	b.n	8003536 <HAL_RCC_OscConfig+0x10a>
 8003534:	bf00      	nop
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d063      	beq.n	800360a <HAL_RCC_OscConfig+0x1de>
 8003542:	4b4a      	ldr	r3, [pc, #296]	; (800366c <HAL_RCC_OscConfig+0x240>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 030c 	and.w	r3, r3, #12
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00b      	beq.n	8003566 <HAL_RCC_OscConfig+0x13a>
 800354e:	4b47      	ldr	r3, [pc, #284]	; (800366c <HAL_RCC_OscConfig+0x240>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 030c 	and.w	r3, r3, #12
 8003556:	2b08      	cmp	r3, #8
 8003558:	d11c      	bne.n	8003594 <HAL_RCC_OscConfig+0x168>
 800355a:	4b44      	ldr	r3, [pc, #272]	; (800366c <HAL_RCC_OscConfig+0x240>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d116      	bne.n	8003594 <HAL_RCC_OscConfig+0x168>
 8003566:	4b41      	ldr	r3, [pc, #260]	; (800366c <HAL_RCC_OscConfig+0x240>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d005      	beq.n	800357e <HAL_RCC_OscConfig+0x152>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d001      	beq.n	800357e <HAL_RCC_OscConfig+0x152>
 800357a:	2301      	movs	r3, #1
 800357c:	e1c7      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
 800357e:	4b3b      	ldr	r3, [pc, #236]	; (800366c <HAL_RCC_OscConfig+0x240>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	4937      	ldr	r1, [pc, #220]	; (800366c <HAL_RCC_OscConfig+0x240>)
 800358e:	4313      	orrs	r3, r2
 8003590:	600b      	str	r3, [r1, #0]
 8003592:	e03a      	b.n	800360a <HAL_RCC_OscConfig+0x1de>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d020      	beq.n	80035de <HAL_RCC_OscConfig+0x1b2>
 800359c:	4b34      	ldr	r3, [pc, #208]	; (8003670 <HAL_RCC_OscConfig+0x244>)
 800359e:	2201      	movs	r2, #1
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	f7fe fe5d 	bl	8002260 <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]
 80035a8:	e008      	b.n	80035bc <HAL_RCC_OscConfig+0x190>
 80035aa:	f7fe fe59 	bl	8002260 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x190>
 80035b8:	2303      	movs	r3, #3
 80035ba:	e1a8      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
 80035bc:	4b2b      	ldr	r3, [pc, #172]	; (800366c <HAL_RCC_OscConfig+0x240>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0f0      	beq.n	80035aa <HAL_RCC_OscConfig+0x17e>
 80035c8:	4b28      	ldr	r3, [pc, #160]	; (800366c <HAL_RCC_OscConfig+0x240>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	4925      	ldr	r1, [pc, #148]	; (800366c <HAL_RCC_OscConfig+0x240>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	600b      	str	r3, [r1, #0]
 80035dc:	e015      	b.n	800360a <HAL_RCC_OscConfig+0x1de>
 80035de:	4b24      	ldr	r3, [pc, #144]	; (8003670 <HAL_RCC_OscConfig+0x244>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	f7fe fe3c 	bl	8002260 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x1d2>
 80035ec:	f7fe fe38 	bl	8002260 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x1d2>
 80035fa:	2303      	movs	r3, #3
 80035fc:	e187      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
 80035fe:	4b1b      	ldr	r3, [pc, #108]	; (800366c <HAL_RCC_OscConfig+0x240>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f0      	bne.n	80035ec <HAL_RCC_OscConfig+0x1c0>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0308 	and.w	r3, r3, #8
 8003612:	2b00      	cmp	r3, #0
 8003614:	d036      	beq.n	8003684 <HAL_RCC_OscConfig+0x258>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d016      	beq.n	800364c <HAL_RCC_OscConfig+0x220>
 800361e:	4b15      	ldr	r3, [pc, #84]	; (8003674 <HAL_RCC_OscConfig+0x248>)
 8003620:	2201      	movs	r2, #1
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	f7fe fe1c 	bl	8002260 <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x212>
 800362c:	f7fe fe18 	bl	8002260 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x212>
 800363a:	2303      	movs	r3, #3
 800363c:	e167      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
 800363e:	4b0b      	ldr	r3, [pc, #44]	; (800366c <HAL_RCC_OscConfig+0x240>)
 8003640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0f0      	beq.n	800362c <HAL_RCC_OscConfig+0x200>
 800364a:	e01b      	b.n	8003684 <HAL_RCC_OscConfig+0x258>
 800364c:	4b09      	ldr	r3, [pc, #36]	; (8003674 <HAL_RCC_OscConfig+0x248>)
 800364e:	2200      	movs	r2, #0
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	f7fe fe05 	bl	8002260 <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]
 8003658:	e00e      	b.n	8003678 <HAL_RCC_OscConfig+0x24c>
 800365a:	f7fe fe01 	bl	8002260 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d907      	bls.n	8003678 <HAL_RCC_OscConfig+0x24c>
 8003668:	2303      	movs	r3, #3
 800366a:	e150      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
 800366c:	40023800 	.word	0x40023800
 8003670:	42470000 	.word	0x42470000
 8003674:	42470e80 	.word	0x42470e80
 8003678:	4b88      	ldr	r3, [pc, #544]	; (800389c <HAL_RCC_OscConfig+0x470>)
 800367a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1ea      	bne.n	800365a <HAL_RCC_OscConfig+0x22e>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 8097 	beq.w	80037c0 <HAL_RCC_OscConfig+0x394>
 8003692:	2300      	movs	r3, #0
 8003694:	75fb      	strb	r3, [r7, #23]
 8003696:	4b81      	ldr	r3, [pc, #516]	; (800389c <HAL_RCC_OscConfig+0x470>)
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10f      	bne.n	80036c2 <HAL_RCC_OscConfig+0x296>
 80036a2:	2300      	movs	r3, #0
 80036a4:	60bb      	str	r3, [r7, #8]
 80036a6:	4b7d      	ldr	r3, [pc, #500]	; (800389c <HAL_RCC_OscConfig+0x470>)
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	4a7c      	ldr	r2, [pc, #496]	; (800389c <HAL_RCC_OscConfig+0x470>)
 80036ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036b0:	6413      	str	r3, [r2, #64]	; 0x40
 80036b2:	4b7a      	ldr	r3, [pc, #488]	; (800389c <HAL_RCC_OscConfig+0x470>)
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ba:	60bb      	str	r3, [r7, #8]
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	2301      	movs	r3, #1
 80036c0:	75fb      	strb	r3, [r7, #23]
 80036c2:	4b77      	ldr	r3, [pc, #476]	; (80038a0 <HAL_RCC_OscConfig+0x474>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d118      	bne.n	8003700 <HAL_RCC_OscConfig+0x2d4>
 80036ce:	4b74      	ldr	r3, [pc, #464]	; (80038a0 <HAL_RCC_OscConfig+0x474>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a73      	ldr	r2, [pc, #460]	; (80038a0 <HAL_RCC_OscConfig+0x474>)
 80036d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d8:	6013      	str	r3, [r2, #0]
 80036da:	f7fe fdc1 	bl	8002260 <HAL_GetTick>
 80036de:	6138      	str	r0, [r7, #16]
 80036e0:	e008      	b.n	80036f4 <HAL_RCC_OscConfig+0x2c8>
 80036e2:	f7fe fdbd 	bl	8002260 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0x2c8>
 80036f0:	2303      	movs	r3, #3
 80036f2:	e10c      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
 80036f4:	4b6a      	ldr	r3, [pc, #424]	; (80038a0 <HAL_RCC_OscConfig+0x474>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d0f0      	beq.n	80036e2 <HAL_RCC_OscConfig+0x2b6>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d106      	bne.n	8003716 <HAL_RCC_OscConfig+0x2ea>
 8003708:	4b64      	ldr	r3, [pc, #400]	; (800389c <HAL_RCC_OscConfig+0x470>)
 800370a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370c:	4a63      	ldr	r2, [pc, #396]	; (800389c <HAL_RCC_OscConfig+0x470>)
 800370e:	f043 0301 	orr.w	r3, r3, #1
 8003712:	6713      	str	r3, [r2, #112]	; 0x70
 8003714:	e01c      	b.n	8003750 <HAL_RCC_OscConfig+0x324>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	2b05      	cmp	r3, #5
 800371c:	d10c      	bne.n	8003738 <HAL_RCC_OscConfig+0x30c>
 800371e:	4b5f      	ldr	r3, [pc, #380]	; (800389c <HAL_RCC_OscConfig+0x470>)
 8003720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003722:	4a5e      	ldr	r2, [pc, #376]	; (800389c <HAL_RCC_OscConfig+0x470>)
 8003724:	f043 0304 	orr.w	r3, r3, #4
 8003728:	6713      	str	r3, [r2, #112]	; 0x70
 800372a:	4b5c      	ldr	r3, [pc, #368]	; (800389c <HAL_RCC_OscConfig+0x470>)
 800372c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372e:	4a5b      	ldr	r2, [pc, #364]	; (800389c <HAL_RCC_OscConfig+0x470>)
 8003730:	f043 0301 	orr.w	r3, r3, #1
 8003734:	6713      	str	r3, [r2, #112]	; 0x70
 8003736:	e00b      	b.n	8003750 <HAL_RCC_OscConfig+0x324>
 8003738:	4b58      	ldr	r3, [pc, #352]	; (800389c <HAL_RCC_OscConfig+0x470>)
 800373a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373c:	4a57      	ldr	r2, [pc, #348]	; (800389c <HAL_RCC_OscConfig+0x470>)
 800373e:	f023 0301 	bic.w	r3, r3, #1
 8003742:	6713      	str	r3, [r2, #112]	; 0x70
 8003744:	4b55      	ldr	r3, [pc, #340]	; (800389c <HAL_RCC_OscConfig+0x470>)
 8003746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003748:	4a54      	ldr	r2, [pc, #336]	; (800389c <HAL_RCC_OscConfig+0x470>)
 800374a:	f023 0304 	bic.w	r3, r3, #4
 800374e:	6713      	str	r3, [r2, #112]	; 0x70
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d015      	beq.n	8003784 <HAL_RCC_OscConfig+0x358>
 8003758:	f7fe fd82 	bl	8002260 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]
 800375e:	e00a      	b.n	8003776 <HAL_RCC_OscConfig+0x34a>
 8003760:	f7fe fd7e 	bl	8002260 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	f241 3288 	movw	r2, #5000	; 0x1388
 800376e:	4293      	cmp	r3, r2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x34a>
 8003772:	2303      	movs	r3, #3
 8003774:	e0cb      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
 8003776:	4b49      	ldr	r3, [pc, #292]	; (800389c <HAL_RCC_OscConfig+0x470>)
 8003778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d0ee      	beq.n	8003760 <HAL_RCC_OscConfig+0x334>
 8003782:	e014      	b.n	80037ae <HAL_RCC_OscConfig+0x382>
 8003784:	f7fe fd6c 	bl	8002260 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]
 800378a:	e00a      	b.n	80037a2 <HAL_RCC_OscConfig+0x376>
 800378c:	f7fe fd68 	bl	8002260 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	f241 3288 	movw	r2, #5000	; 0x1388
 800379a:	4293      	cmp	r3, r2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x376>
 800379e:	2303      	movs	r3, #3
 80037a0:	e0b5      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
 80037a2:	4b3e      	ldr	r3, [pc, #248]	; (800389c <HAL_RCC_OscConfig+0x470>)
 80037a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1ee      	bne.n	800378c <HAL_RCC_OscConfig+0x360>
 80037ae:	7dfb      	ldrb	r3, [r7, #23]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d105      	bne.n	80037c0 <HAL_RCC_OscConfig+0x394>
 80037b4:	4b39      	ldr	r3, [pc, #228]	; (800389c <HAL_RCC_OscConfig+0x470>)
 80037b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b8:	4a38      	ldr	r2, [pc, #224]	; (800389c <HAL_RCC_OscConfig+0x470>)
 80037ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037be:	6413      	str	r3, [r2, #64]	; 0x40
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 80a1 	beq.w	800390c <HAL_RCC_OscConfig+0x4e0>
 80037ca:	4b34      	ldr	r3, [pc, #208]	; (800389c <HAL_RCC_OscConfig+0x470>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 030c 	and.w	r3, r3, #12
 80037d2:	2b08      	cmp	r3, #8
 80037d4:	d05c      	beq.n	8003890 <HAL_RCC_OscConfig+0x464>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d141      	bne.n	8003862 <HAL_RCC_OscConfig+0x436>
 80037de:	4b31      	ldr	r3, [pc, #196]	; (80038a4 <HAL_RCC_OscConfig+0x478>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	f7fe fd3c 	bl	8002260 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x3d2>
 80037ec:	f7fe fd38 	bl	8002260 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x3d2>
 80037fa:	2303      	movs	r3, #3
 80037fc:	e087      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
 80037fe:	4b27      	ldr	r3, [pc, #156]	; (800389c <HAL_RCC_OscConfig+0x470>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1f0      	bne.n	80037ec <HAL_RCC_OscConfig+0x3c0>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	69da      	ldr	r2, [r3, #28]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	431a      	orrs	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	019b      	lsls	r3, r3, #6
 800381a:	431a      	orrs	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003820:	085b      	lsrs	r3, r3, #1
 8003822:	3b01      	subs	r3, #1
 8003824:	041b      	lsls	r3, r3, #16
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382c:	061b      	lsls	r3, r3, #24
 800382e:	491b      	ldr	r1, [pc, #108]	; (800389c <HAL_RCC_OscConfig+0x470>)
 8003830:	4313      	orrs	r3, r2
 8003832:	604b      	str	r3, [r1, #4]
 8003834:	4b1b      	ldr	r3, [pc, #108]	; (80038a4 <HAL_RCC_OscConfig+0x478>)
 8003836:	2201      	movs	r2, #1
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	f7fe fd11 	bl	8002260 <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]
 8003840:	e008      	b.n	8003854 <HAL_RCC_OscConfig+0x428>
 8003842:	f7fe fd0d 	bl	8002260 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x428>
 8003850:	2303      	movs	r3, #3
 8003852:	e05c      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
 8003854:	4b11      	ldr	r3, [pc, #68]	; (800389c <HAL_RCC_OscConfig+0x470>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0f0      	beq.n	8003842 <HAL_RCC_OscConfig+0x416>
 8003860:	e054      	b.n	800390c <HAL_RCC_OscConfig+0x4e0>
 8003862:	4b10      	ldr	r3, [pc, #64]	; (80038a4 <HAL_RCC_OscConfig+0x478>)
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	f7fe fcfa 	bl	8002260 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0x456>
 8003870:	f7fe fcf6 	bl	8002260 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x456>
 800387e:	2303      	movs	r3, #3
 8003880:	e045      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
 8003882:	4b06      	ldr	r3, [pc, #24]	; (800389c <HAL_RCC_OscConfig+0x470>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1f0      	bne.n	8003870 <HAL_RCC_OscConfig+0x444>
 800388e:	e03d      	b.n	800390c <HAL_RCC_OscConfig+0x4e0>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d107      	bne.n	80038a8 <HAL_RCC_OscConfig+0x47c>
 8003898:	2301      	movs	r3, #1
 800389a:	e038      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
 800389c:	40023800 	.word	0x40023800
 80038a0:	40007000 	.word	0x40007000
 80038a4:	42470060 	.word	0x42470060
 80038a8:	4b1b      	ldr	r3, [pc, #108]	; (8003918 <HAL_RCC_OscConfig+0x4ec>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	60fb      	str	r3, [r7, #12]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d028      	beq.n	8003908 <HAL_RCC_OscConfig+0x4dc>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d121      	bne.n	8003908 <HAL_RCC_OscConfig+0x4dc>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d11a      	bne.n	8003908 <HAL_RCC_OscConfig+0x4dc>
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038d8:	4013      	ands	r3, r2
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038de:	0192      	lsls	r2, r2, #6
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d111      	bne.n	8003908 <HAL_RCC_OscConfig+0x4dc>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ee:	085b      	lsrs	r3, r3, #1
 80038f0:	3b01      	subs	r3, #1
 80038f2:	041b      	lsls	r3, r3, #16
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d107      	bne.n	8003908 <HAL_RCC_OscConfig+0x4dc>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003902:	061b      	lsls	r3, r3, #24
 8003904:	429a      	cmp	r2, r3
 8003906:	d001      	beq.n	800390c <HAL_RCC_OscConfig+0x4e0>
 8003908:	2301      	movs	r3, #1
 800390a:	e000      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
 800390c:	2300      	movs	r3, #0
 800390e:	4618      	mov	r0, r3
 8003910:	3718      	adds	r7, #24
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	40023800 	.word	0x40023800

0800391c <HAL_RCC_ClockConfig>:
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <HAL_RCC_ClockConfig+0x14>
 800392c:	2301      	movs	r3, #1
 800392e:	e0cc      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ae>
 8003930:	4b68      	ldr	r3, [pc, #416]	; (8003ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	429a      	cmp	r2, r3
 800393c:	d90c      	bls.n	8003958 <HAL_RCC_ClockConfig+0x3c>
 800393e:	4b65      	ldr	r3, [pc, #404]	; (8003ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	b2d2      	uxtb	r2, r2
 8003944:	701a      	strb	r2, [r3, #0]
 8003946:	4b63      	ldr	r3, [pc, #396]	; (8003ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	429a      	cmp	r2, r3
 8003952:	d001      	beq.n	8003958 <HAL_RCC_ClockConfig+0x3c>
 8003954:	2301      	movs	r3, #1
 8003956:	e0b8      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ae>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d020      	beq.n	80039a6 <HAL_RCC_ClockConfig+0x8a>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	2b00      	cmp	r3, #0
 800396e:	d005      	beq.n	800397c <HAL_RCC_ClockConfig+0x60>
 8003970:	4b59      	ldr	r3, [pc, #356]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	4a58      	ldr	r2, [pc, #352]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8003976:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800397a:	6093      	str	r3, [r2, #8]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0308 	and.w	r3, r3, #8
 8003984:	2b00      	cmp	r3, #0
 8003986:	d005      	beq.n	8003994 <HAL_RCC_ClockConfig+0x78>
 8003988:	4b53      	ldr	r3, [pc, #332]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	4a52      	ldr	r2, [pc, #328]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 800398e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003992:	6093      	str	r3, [r2, #8]
 8003994:	4b50      	ldr	r3, [pc, #320]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	494d      	ldr	r1, [pc, #308]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	608b      	str	r3, [r1, #8]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d044      	beq.n	8003a3c <HAL_RCC_ClockConfig+0x120>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d107      	bne.n	80039ca <HAL_RCC_ClockConfig+0xae>
 80039ba:	4b47      	ldr	r3, [pc, #284]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d119      	bne.n	80039fa <HAL_RCC_ClockConfig+0xde>
 80039c6:	2301      	movs	r3, #1
 80039c8:	e07f      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ae>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d003      	beq.n	80039da <HAL_RCC_ClockConfig+0xbe>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	2b03      	cmp	r3, #3
 80039d8:	d107      	bne.n	80039ea <HAL_RCC_ClockConfig+0xce>
 80039da:	4b3f      	ldr	r3, [pc, #252]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d109      	bne.n	80039fa <HAL_RCC_ClockConfig+0xde>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e06f      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ae>
 80039ea:	4b3b      	ldr	r3, [pc, #236]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_RCC_ClockConfig+0xde>
 80039f6:	2301      	movs	r3, #1
 80039f8:	e067      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ae>
 80039fa:	4b37      	ldr	r3, [pc, #220]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f023 0203 	bic.w	r2, r3, #3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	4934      	ldr	r1, [pc, #208]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	608b      	str	r3, [r1, #8]
 8003a0c:	f7fe fc28 	bl	8002260 <HAL_GetTick>
 8003a10:	60f8      	str	r0, [r7, #12]
 8003a12:	e00a      	b.n	8003a2a <HAL_RCC_ClockConfig+0x10e>
 8003a14:	f7fe fc24 	bl	8002260 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_ClockConfig+0x10e>
 8003a26:	2303      	movs	r3, #3
 8003a28:	e04f      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ae>
 8003a2a:	4b2b      	ldr	r3, [pc, #172]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 020c 	and.w	r2, r3, #12
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d1eb      	bne.n	8003a14 <HAL_RCC_ClockConfig+0xf8>
 8003a3c:	4b25      	ldr	r3, [pc, #148]	; (8003ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d20c      	bcs.n	8003a64 <HAL_RCC_ClockConfig+0x148>
 8003a4a:	4b22      	ldr	r3, [pc, #136]	; (8003ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	701a      	strb	r2, [r3, #0]
 8003a52:	4b20      	ldr	r3, [pc, #128]	; (8003ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0307 	and.w	r3, r3, #7
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d001      	beq.n	8003a64 <HAL_RCC_ClockConfig+0x148>
 8003a60:	2301      	movs	r3, #1
 8003a62:	e032      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ae>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d008      	beq.n	8003a82 <HAL_RCC_ClockConfig+0x166>
 8003a70:	4b19      	ldr	r3, [pc, #100]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	4916      	ldr	r1, [pc, #88]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	608b      	str	r3, [r1, #8]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0308 	and.w	r3, r3, #8
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d009      	beq.n	8003aa2 <HAL_RCC_ClockConfig+0x186>
 8003a8e:	4b12      	ldr	r3, [pc, #72]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	490e      	ldr	r1, [pc, #56]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	608b      	str	r3, [r1, #8]
 8003aa2:	f000 f821 	bl	8003ae8 <HAL_RCC_GetSysClockFreq>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	4b0b      	ldr	r3, [pc, #44]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	091b      	lsrs	r3, r3, #4
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	490a      	ldr	r1, [pc, #40]	; (8003adc <HAL_RCC_ClockConfig+0x1c0>)
 8003ab4:	5ccb      	ldrb	r3, [r1, r3]
 8003ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8003aba:	4a09      	ldr	r2, [pc, #36]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	4b09      	ldr	r3, [pc, #36]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7fe fa8c 	bl	8001fe0 <HAL_InitTick>
 8003ac8:	2300      	movs	r3, #0
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	40023c00 	.word	0x40023c00
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	0800908c 	.word	0x0800908c
 8003ae0:	20000000 	.word	0x20000000
 8003ae4:	20000004 	.word	0x20000004

08003ae8 <HAL_RCC_GetSysClockFreq>:
 8003ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aec:	b094      	sub	sp, #80	; 0x50
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	2300      	movs	r3, #0
 8003af2:	647b      	str	r3, [r7, #68]	; 0x44
 8003af4:	2300      	movs	r3, #0
 8003af6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003af8:	2300      	movs	r3, #0
 8003afa:	643b      	str	r3, [r7, #64]	; 0x40
 8003afc:	2300      	movs	r3, #0
 8003afe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b00:	4b79      	ldr	r3, [pc, #484]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f003 030c 	and.w	r3, r3, #12
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d00d      	beq.n	8003b28 <HAL_RCC_GetSysClockFreq+0x40>
 8003b0c:	2b08      	cmp	r3, #8
 8003b0e:	f200 80e1 	bhi.w	8003cd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d002      	beq.n	8003b1c <HAL_RCC_GetSysClockFreq+0x34>
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d003      	beq.n	8003b22 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b1a:	e0db      	b.n	8003cd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b1c:	4b73      	ldr	r3, [pc, #460]	; (8003cec <HAL_RCC_GetSysClockFreq+0x204>)
 8003b1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b20:	e0db      	b.n	8003cda <HAL_RCC_GetSysClockFreq+0x1f2>
 8003b22:	4b73      	ldr	r3, [pc, #460]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003b24:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b26:	e0d8      	b.n	8003cda <HAL_RCC_GetSysClockFreq+0x1f2>
 8003b28:	4b6f      	ldr	r3, [pc, #444]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b30:	647b      	str	r3, [r7, #68]	; 0x44
 8003b32:	4b6d      	ldr	r3, [pc, #436]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d063      	beq.n	8003c06 <HAL_RCC_GetSysClockFreq+0x11e>
 8003b3e:	4b6a      	ldr	r3, [pc, #424]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	099b      	lsrs	r3, r3, #6
 8003b44:	2200      	movs	r2, #0
 8003b46:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b50:	633b      	str	r3, [r7, #48]	; 0x30
 8003b52:	2300      	movs	r3, #0
 8003b54:	637b      	str	r3, [r7, #52]	; 0x34
 8003b56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b5a:	4622      	mov	r2, r4
 8003b5c:	462b      	mov	r3, r5
 8003b5e:	f04f 0000 	mov.w	r0, #0
 8003b62:	f04f 0100 	mov.w	r1, #0
 8003b66:	0159      	lsls	r1, r3, #5
 8003b68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b6c:	0150      	lsls	r0, r2, #5
 8003b6e:	4602      	mov	r2, r0
 8003b70:	460b      	mov	r3, r1
 8003b72:	4621      	mov	r1, r4
 8003b74:	1a51      	subs	r1, r2, r1
 8003b76:	6139      	str	r1, [r7, #16]
 8003b78:	4629      	mov	r1, r5
 8003b7a:	eb63 0301 	sbc.w	r3, r3, r1
 8003b7e:	617b      	str	r3, [r7, #20]
 8003b80:	f04f 0200 	mov.w	r2, #0
 8003b84:	f04f 0300 	mov.w	r3, #0
 8003b88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b8c:	4659      	mov	r1, fp
 8003b8e:	018b      	lsls	r3, r1, #6
 8003b90:	4651      	mov	r1, sl
 8003b92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b96:	4651      	mov	r1, sl
 8003b98:	018a      	lsls	r2, r1, #6
 8003b9a:	4651      	mov	r1, sl
 8003b9c:	ebb2 0801 	subs.w	r8, r2, r1
 8003ba0:	4659      	mov	r1, fp
 8003ba2:	eb63 0901 	sbc.w	r9, r3, r1
 8003ba6:	f04f 0200 	mov.w	r2, #0
 8003baa:	f04f 0300 	mov.w	r3, #0
 8003bae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bba:	4690      	mov	r8, r2
 8003bbc:	4699      	mov	r9, r3
 8003bbe:	4623      	mov	r3, r4
 8003bc0:	eb18 0303 	adds.w	r3, r8, r3
 8003bc4:	60bb      	str	r3, [r7, #8]
 8003bc6:	462b      	mov	r3, r5
 8003bc8:	eb49 0303 	adc.w	r3, r9, r3
 8003bcc:	60fb      	str	r3, [r7, #12]
 8003bce:	f04f 0200 	mov.w	r2, #0
 8003bd2:	f04f 0300 	mov.w	r3, #0
 8003bd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003bda:	4629      	mov	r1, r5
 8003bdc:	024b      	lsls	r3, r1, #9
 8003bde:	4621      	mov	r1, r4
 8003be0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003be4:	4621      	mov	r1, r4
 8003be6:	024a      	lsls	r2, r1, #9
 8003be8:	4610      	mov	r0, r2
 8003bea:	4619      	mov	r1, r3
 8003bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bee:	2200      	movs	r2, #0
 8003bf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bf4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bf8:	f7fc fd16 	bl	8000628 <__aeabi_uldivmod>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	460b      	mov	r3, r1
 8003c00:	4613      	mov	r3, r2
 8003c02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c04:	e058      	b.n	8003cb8 <HAL_RCC_GetSysClockFreq+0x1d0>
 8003c06:	4b38      	ldr	r3, [pc, #224]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	099b      	lsrs	r3, r3, #6
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	4618      	mov	r0, r3
 8003c10:	4611      	mov	r1, r2
 8003c12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c16:	623b      	str	r3, [r7, #32]
 8003c18:	2300      	movs	r3, #0
 8003c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c20:	4642      	mov	r2, r8
 8003c22:	464b      	mov	r3, r9
 8003c24:	f04f 0000 	mov.w	r0, #0
 8003c28:	f04f 0100 	mov.w	r1, #0
 8003c2c:	0159      	lsls	r1, r3, #5
 8003c2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c32:	0150      	lsls	r0, r2, #5
 8003c34:	4602      	mov	r2, r0
 8003c36:	460b      	mov	r3, r1
 8003c38:	4641      	mov	r1, r8
 8003c3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c3e:	4649      	mov	r1, r9
 8003c40:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c44:	f04f 0200 	mov.w	r2, #0
 8003c48:	f04f 0300 	mov.w	r3, #0
 8003c4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c58:	ebb2 040a 	subs.w	r4, r2, sl
 8003c5c:	eb63 050b 	sbc.w	r5, r3, fp
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	f04f 0300 	mov.w	r3, #0
 8003c68:	00eb      	lsls	r3, r5, #3
 8003c6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c6e:	00e2      	lsls	r2, r4, #3
 8003c70:	4614      	mov	r4, r2
 8003c72:	461d      	mov	r5, r3
 8003c74:	4643      	mov	r3, r8
 8003c76:	18e3      	adds	r3, r4, r3
 8003c78:	603b      	str	r3, [r7, #0]
 8003c7a:	464b      	mov	r3, r9
 8003c7c:	eb45 0303 	adc.w	r3, r5, r3
 8003c80:	607b      	str	r3, [r7, #4]
 8003c82:	f04f 0200 	mov.w	r2, #0
 8003c86:	f04f 0300 	mov.w	r3, #0
 8003c8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c8e:	4629      	mov	r1, r5
 8003c90:	028b      	lsls	r3, r1, #10
 8003c92:	4621      	mov	r1, r4
 8003c94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c98:	4621      	mov	r1, r4
 8003c9a:	028a      	lsls	r2, r1, #10
 8003c9c:	4610      	mov	r0, r2
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	61bb      	str	r3, [r7, #24]
 8003ca6:	61fa      	str	r2, [r7, #28]
 8003ca8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cac:	f7fc fcbc 	bl	8000628 <__aeabi_uldivmod>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cb8:	4b0b      	ldr	r3, [pc, #44]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	0c1b      	lsrs	r3, r3, #16
 8003cbe:	f003 0303 	and.w	r3, r3, #3
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	643b      	str	r3, [r7, #64]	; 0x40
 8003cc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cd2:	e002      	b.n	8003cda <HAL_RCC_GetSysClockFreq+0x1f2>
 8003cd4:	4b05      	ldr	r3, [pc, #20]	; (8003cec <HAL_RCC_GetSysClockFreq+0x204>)
 8003cd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cd8:	bf00      	nop
 8003cda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3750      	adds	r7, #80	; 0x50
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ce6:	bf00      	nop
 8003ce8:	40023800 	.word	0x40023800
 8003cec:	00f42400 	.word	0x00f42400
 8003cf0:	007a1200 	.word	0x007a1200

08003cf4 <HAL_RCC_GetHCLKFreq>:
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	4b03      	ldr	r3, [pc, #12]	; (8003d08 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	20000000 	.word	0x20000000

08003d0c <HAL_RCC_GetPCLK1Freq>:
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	f7ff fff0 	bl	8003cf4 <HAL_RCC_GetHCLKFreq>
 8003d14:	4602      	mov	r2, r0
 8003d16:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	0a9b      	lsrs	r3, r3, #10
 8003d1c:	f003 0307 	and.w	r3, r3, #7
 8003d20:	4903      	ldr	r1, [pc, #12]	; (8003d30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d22:	5ccb      	ldrb	r3, [r1, r3]
 8003d24:	fa22 f303 	lsr.w	r3, r2, r3
 8003d28:	4618      	mov	r0, r3
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	0800909c 	.word	0x0800909c

08003d34 <HAL_RCC_GetPCLK2Freq>:
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	f7ff ffdc 	bl	8003cf4 <HAL_RCC_GetHCLKFreq>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	0b5b      	lsrs	r3, r3, #13
 8003d44:	f003 0307 	and.w	r3, r3, #7
 8003d48:	4903      	ldr	r1, [pc, #12]	; (8003d58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d4a:	5ccb      	ldrb	r3, [r1, r3]
 8003d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d50:	4618      	mov	r0, r3
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	40023800 	.word	0x40023800
 8003d58:	0800909c 	.word	0x0800909c

08003d5c <HAL_RCC_GetClockConfig>:
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	220f      	movs	r2, #15
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	4b12      	ldr	r3, [pc, #72]	; (8003db8 <HAL_RCC_GetClockConfig+0x5c>)
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f003 0203 	and.w	r2, r3, #3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	605a      	str	r2, [r3, #4]
 8003d78:	4b0f      	ldr	r3, [pc, #60]	; (8003db8 <HAL_RCC_GetClockConfig+0x5c>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	609a      	str	r2, [r3, #8]
 8003d84:	4b0c      	ldr	r3, [pc, #48]	; (8003db8 <HAL_RCC_GetClockConfig+0x5c>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	60da      	str	r2, [r3, #12]
 8003d90:	4b09      	ldr	r3, [pc, #36]	; (8003db8 <HAL_RCC_GetClockConfig+0x5c>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	08db      	lsrs	r3, r3, #3
 8003d96:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	611a      	str	r2, [r3, #16]
 8003d9e:	4b07      	ldr	r3, [pc, #28]	; (8003dbc <HAL_RCC_GetClockConfig+0x60>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0207 	and.w	r2, r3, #7
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	601a      	str	r2, [r3, #0]
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	40023c00 	.word	0x40023c00

08003dc0 <HAL_RCCEx_PeriphCLKConfig>:
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	2300      	movs	r3, #0
 8003dca:	617b      	str	r3, [r7, #20]
 8003dcc:	2300      	movs	r3, #0
 8003dce:	613b      	str	r3, [r7, #16]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d105      	bne.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d035      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8003de8:	4b62      	ldr	r3, [pc, #392]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	f7fe fa37 	bl	8002260 <HAL_GetTick>
 8003df2:	6178      	str	r0, [r7, #20]
 8003df4:	e008      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8003df6:	f7fe fa33 	bl	8002260 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d901      	bls.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8003e04:	2303      	movs	r3, #3
 8003e06:	e0b0      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003e08:	4b5b      	ldr	r3, [pc, #364]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1f0      	bne.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x36>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	019a      	lsls	r2, r3, #6
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	071b      	lsls	r3, r3, #28
 8003e20:	4955      	ldr	r1, [pc, #340]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 8003e28:	4b52      	ldr	r3, [pc, #328]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	f7fe fa17 	bl	8002260 <HAL_GetTick>
 8003e32:	6178      	str	r0, [r7, #20]
 8003e34:	e008      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8003e36:	f7fe fa13 	bl	8002260 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8003e44:	2303      	movs	r3, #3
 8003e46:	e090      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003e48:	4b4b      	ldr	r3, [pc, #300]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d0f0      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 8083 	beq.w	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003e62:	2300      	movs	r3, #0
 8003e64:	60fb      	str	r3, [r7, #12]
 8003e66:	4b44      	ldr	r3, [pc, #272]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	4a43      	ldr	r2, [pc, #268]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e70:	6413      	str	r3, [r2, #64]	; 0x40
 8003e72:	4b41      	ldr	r3, [pc, #260]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4b3f      	ldr	r3, [pc, #252]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a3e      	ldr	r2, [pc, #248]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e88:	6013      	str	r3, [r2, #0]
 8003e8a:	f7fe f9e9 	bl	8002260 <HAL_GetTick>
 8003e8e:	6178      	str	r0, [r7, #20]
 8003e90:	e008      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8003e92:	f7fe f9e5 	bl	8002260 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e062      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003ea4:	4b35      	ldr	r3, [pc, #212]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0f0      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
 8003eb0:	4b31      	ldr	r3, [pc, #196]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eb8:	613b      	str	r3, [r7, #16]
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d02f      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d028      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003ece:	4b2a      	ldr	r3, [pc, #168]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ed6:	613b      	str	r3, [r7, #16]
 8003ed8:	4b29      	ldr	r3, [pc, #164]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003eda:	2201      	movs	r2, #1
 8003edc:	601a      	str	r2, [r3, #0]
 8003ede:	4b28      	ldr	r3, [pc, #160]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	4a24      	ldr	r2, [pc, #144]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eea:	4b23      	ldr	r3, [pc, #140]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d114      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003ef6:	f7fe f9b3 	bl	8002260 <HAL_GetTick>
 8003efa:	6178      	str	r0, [r7, #20]
 8003efc:	e00a      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003efe:	f7fe f9af 	bl	8002260 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003f10:	2303      	movs	r3, #3
 8003f12:	e02a      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003f14:	4b18      	ldr	r3, [pc, #96]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d0ee      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f2c:	d10d      	bne.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003f2e:	4b12      	ldr	r3, [pc, #72]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003f3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f42:	490d      	ldr	r1, [pc, #52]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	608b      	str	r3, [r1, #8]
 8003f48:	e005      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003f4a:	4b0b      	ldr	r3, [pc, #44]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	4a0a      	ldr	r2, [pc, #40]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f50:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f54:	6093      	str	r3, [r2, #8]
 8003f56:	4b08      	ldr	r3, [pc, #32]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f62:	4905      	ldr	r1, [pc, #20]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	670b      	str	r3, [r1, #112]	; 0x70
 8003f68:	2300      	movs	r3, #0
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	42470068 	.word	0x42470068
 8003f78:	40023800 	.word	0x40023800
 8003f7c:	40007000 	.word	0x40007000
 8003f80:	42470e40 	.word	0x42470e40

08003f84 <HAL_RTC_Init>:
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	73fb      	strb	r3, [r7, #15]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_RTC_Init+0x16>
 8003f96:	2301      	movs	r3, #1
 8003f98:	e066      	b.n	8004068 <HAL_RTC_Init+0xe4>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	7f5b      	ldrb	r3, [r3, #29]
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d105      	bne.n	8003fb0 <HAL_RTC_Init+0x2c>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	771a      	strb	r2, [r3, #28]
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7fd ff9e 	bl	8001eec <HAL_RTC_MspInit>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	775a      	strb	r2, [r3, #29]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	22ca      	movs	r2, #202	; 0xca
 8003fbc:	625a      	str	r2, [r3, #36]	; 0x24
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2253      	movs	r2, #83	; 0x53
 8003fc4:	625a      	str	r2, [r3, #36]	; 0x24
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f87a 	bl	80040c0 <RTC_EnterInitMode>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	73fb      	strb	r3, [r7, #15]
 8003fd0:	7bfb      	ldrb	r3, [r7, #15]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d12c      	bne.n	8004030 <HAL_RTC_Init+0xac>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	6812      	ldr	r2, [r2, #0]
 8003fe0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003fe4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fe8:	6093      	str	r3, [r2, #8]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6899      	ldr	r1, [r3, #8]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	431a      	orrs	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	430a      	orrs	r2, r1
 8004006:	609a      	str	r2, [r3, #8]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	68d2      	ldr	r2, [r2, #12]
 8004010:	611a      	str	r2, [r3, #16]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6919      	ldr	r1, [r3, #16]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	041a      	lsls	r2, r3, #16
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	611a      	str	r2, [r3, #16]
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f881 	bl	800412e <RTC_ExitInitMode>
 800402c:	4603      	mov	r3, r0
 800402e:	73fb      	strb	r3, [r7, #15]
 8004030:	7bfb      	ldrb	r3, [r7, #15]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d113      	bne.n	800405e <HAL_RTC_Init+0xda>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004044:	641a      	str	r2, [r3, #64]	; 0x40
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	699a      	ldr	r2, [r3, #24]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	430a      	orrs	r2, r1
 8004056:	641a      	str	r2, [r3, #64]	; 0x40
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	775a      	strb	r2, [r3, #29]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	22ff      	movs	r2, #255	; 0xff
 8004064:	625a      	str	r2, [r3, #36]	; 0x24
 8004066:	7bfb      	ldrb	r3, [r7, #15]
 8004068:	4618      	mov	r0, r3
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <HAL_RTC_WaitForSynchro>:
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	2300      	movs	r3, #0
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68da      	ldr	r2, [r3, #12]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800408a:	60da      	str	r2, [r3, #12]
 800408c:	f7fe f8e8 	bl	8002260 <HAL_GetTick>
 8004090:	60f8      	str	r0, [r7, #12]
 8004092:	e009      	b.n	80040a8 <HAL_RTC_WaitForSynchro+0x38>
 8004094:	f7fe f8e4 	bl	8002260 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040a2:	d901      	bls.n	80040a8 <HAL_RTC_WaitForSynchro+0x38>
 80040a4:	2303      	movs	r3, #3
 80040a6:	e007      	b.n	80040b8 <HAL_RTC_WaitForSynchro+0x48>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	f003 0320 	and.w	r3, r3, #32
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d0ee      	beq.n	8004094 <HAL_RTC_WaitForSynchro+0x24>
 80040b6:	2300      	movs	r3, #0
 80040b8:	4618      	mov	r0, r3
 80040ba:	3710      	adds	r7, #16
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <RTC_EnterInitMode>:
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	2300      	movs	r3, #0
 80040ca:	60bb      	str	r3, [r7, #8]
 80040cc:	2300      	movs	r3, #0
 80040ce:	73fb      	strb	r3, [r7, #15]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d122      	bne.n	8004124 <RTC_EnterInitMode+0x64>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68da      	ldr	r2, [r3, #12]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80040ec:	60da      	str	r2, [r3, #12]
 80040ee:	f7fe f8b7 	bl	8002260 <HAL_GetTick>
 80040f2:	60b8      	str	r0, [r7, #8]
 80040f4:	e00c      	b.n	8004110 <RTC_EnterInitMode+0x50>
 80040f6:	f7fe f8b3 	bl	8002260 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004104:	d904      	bls.n	8004110 <RTC_EnterInitMode+0x50>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2204      	movs	r2, #4
 800410a:	775a      	strb	r2, [r3, #29]
 800410c:	2301      	movs	r3, #1
 800410e:	73fb      	strb	r3, [r7, #15]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411a:	2b00      	cmp	r3, #0
 800411c:	d102      	bne.n	8004124 <RTC_EnterInitMode+0x64>
 800411e:	7bfb      	ldrb	r3, [r7, #15]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d1e8      	bne.n	80040f6 <RTC_EnterInitMode+0x36>
 8004124:	7bfb      	ldrb	r3, [r7, #15]
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <RTC_ExitInitMode>:
 800412e:	b580      	push	{r7, lr}
 8004130:	b084      	sub	sp, #16
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
 8004136:	2300      	movs	r3, #0
 8004138:	73fb      	strb	r3, [r7, #15]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004148:	60da      	str	r2, [r3, #12]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f003 0320 	and.w	r3, r3, #32
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10a      	bne.n	800416e <RTC_ExitInitMode+0x40>
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f7ff ff89 	bl	8004070 <HAL_RTC_WaitForSynchro>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d004      	beq.n	800416e <RTC_ExitInitMode+0x40>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2204      	movs	r2, #4
 8004168:	775a      	strb	r2, [r3, #29]
 800416a:	2301      	movs	r3, #1
 800416c:	73fb      	strb	r3, [r7, #15]
 800416e:	7bfb      	ldrb	r3, [r7, #15]
 8004170:	4618      	mov	r0, r3
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <HAL_TIM_Base_Init>:
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_TIM_Base_Init+0x12>
 8004186:	2301      	movs	r3, #1
 8004188:	e041      	b.n	800420e <HAL_TIM_Base_Init+0x96>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d106      	bne.n	80041a4 <HAL_TIM_Base_Init+0x2c>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f839 	bl	8004216 <HAL_TIM_Base_MspInit>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2202      	movs	r2, #2
 80041a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	3304      	adds	r3, #4
 80041b4:	4619      	mov	r1, r3
 80041b6:	4610      	mov	r0, r2
 80041b8:	f000 f9d8 	bl	800456c <TIM_Base_SetConfig>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800420c:	2300      	movs	r3, #0
 800420e:	4618      	mov	r0, r3
 8004210:	3708      	adds	r7, #8
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <HAL_TIM_Base_MspInit>:
 8004216:	b480      	push	{r7}
 8004218:	b083      	sub	sp, #12
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
	...

0800422c <HAL_TIM_Base_Start_IT>:
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b01      	cmp	r3, #1
 800423e:	d001      	beq.n	8004244 <HAL_TIM_Base_Start_IT+0x18>
 8004240:	2301      	movs	r3, #1
 8004242:	e04e      	b.n	80042e2 <HAL_TIM_Base_Start_IT+0xb6>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2202      	movs	r2, #2
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68da      	ldr	r2, [r3, #12]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f042 0201 	orr.w	r2, r2, #1
 800425a:	60da      	str	r2, [r3, #12]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a23      	ldr	r2, [pc, #140]	; (80042f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d022      	beq.n	80042ac <HAL_TIM_Base_Start_IT+0x80>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800426e:	d01d      	beq.n	80042ac <HAL_TIM_Base_Start_IT+0x80>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a1f      	ldr	r2, [pc, #124]	; (80042f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d018      	beq.n	80042ac <HAL_TIM_Base_Start_IT+0x80>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a1e      	ldr	r2, [pc, #120]	; (80042f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d013      	beq.n	80042ac <HAL_TIM_Base_Start_IT+0x80>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a1c      	ldr	r2, [pc, #112]	; (80042fc <HAL_TIM_Base_Start_IT+0xd0>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d00e      	beq.n	80042ac <HAL_TIM_Base_Start_IT+0x80>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a1b      	ldr	r2, [pc, #108]	; (8004300 <HAL_TIM_Base_Start_IT+0xd4>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d009      	beq.n	80042ac <HAL_TIM_Base_Start_IT+0x80>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a19      	ldr	r2, [pc, #100]	; (8004304 <HAL_TIM_Base_Start_IT+0xd8>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d004      	beq.n	80042ac <HAL_TIM_Base_Start_IT+0x80>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a18      	ldr	r2, [pc, #96]	; (8004308 <HAL_TIM_Base_Start_IT+0xdc>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d111      	bne.n	80042d0 <HAL_TIM_Base_Start_IT+0xa4>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f003 0307 	and.w	r3, r3, #7
 80042b6:	60fb      	str	r3, [r7, #12]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2b06      	cmp	r3, #6
 80042bc:	d010      	beq.n	80042e0 <HAL_TIM_Base_Start_IT+0xb4>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f042 0201 	orr.w	r2, r2, #1
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	e007      	b.n	80042e0 <HAL_TIM_Base_Start_IT+0xb4>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f042 0201 	orr.w	r2, r2, #1
 80042de:	601a      	str	r2, [r3, #0]
 80042e0:	2300      	movs	r3, #0
 80042e2:	4618      	mov	r0, r3
 80042e4:	3714      	adds	r7, #20
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	40010000 	.word	0x40010000
 80042f4:	40000400 	.word	0x40000400
 80042f8:	40000800 	.word	0x40000800
 80042fc:	40000c00 	.word	0x40000c00
 8004300:	40010400 	.word	0x40010400
 8004304:	40014000 	.word	0x40014000
 8004308:	40001800 	.word	0x40001800

0800430c <HAL_TIM_IRQHandler>:
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b02      	cmp	r3, #2
 8004320:	d122      	bne.n	8004368 <HAL_TIM_IRQHandler+0x5c>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b02      	cmp	r3, #2
 800432e:	d11b      	bne.n	8004368 <HAL_TIM_IRQHandler+0x5c>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f06f 0202 	mvn.w	r2, #2
 8004338:	611a      	str	r2, [r3, #16]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	771a      	strb	r2, [r3, #28]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	f003 0303 	and.w	r3, r3, #3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d003      	beq.n	8004356 <HAL_TIM_IRQHandler+0x4a>
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f8ee 	bl	8004530 <HAL_TIM_IC_CaptureCallback>
 8004354:	e005      	b.n	8004362 <HAL_TIM_IRQHandler+0x56>
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f8e0 	bl	800451c <HAL_TIM_OC_DelayElapsedCallback>
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f8f1 	bl	8004544 <HAL_TIM_PWM_PulseFinishedCallback>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	771a      	strb	r2, [r3, #28]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	f003 0304 	and.w	r3, r3, #4
 8004372:	2b04      	cmp	r3, #4
 8004374:	d122      	bne.n	80043bc <HAL_TIM_IRQHandler+0xb0>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	2b04      	cmp	r3, #4
 8004382:	d11b      	bne.n	80043bc <HAL_TIM_IRQHandler+0xb0>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f06f 0204 	mvn.w	r2, #4
 800438c:	611a      	str	r2, [r3, #16]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2202      	movs	r2, #2
 8004392:	771a      	strb	r2, [r3, #28]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <HAL_TIM_IRQHandler+0x9e>
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f8c4 	bl	8004530 <HAL_TIM_IC_CaptureCallback>
 80043a8:	e005      	b.n	80043b6 <HAL_TIM_IRQHandler+0xaa>
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f8b6 	bl	800451c <HAL_TIM_OC_DelayElapsedCallback>
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 f8c7 	bl	8004544 <HAL_TIM_PWM_PulseFinishedCallback>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	771a      	strb	r2, [r3, #28]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	f003 0308 	and.w	r3, r3, #8
 80043c6:	2b08      	cmp	r3, #8
 80043c8:	d122      	bne.n	8004410 <HAL_TIM_IRQHandler+0x104>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f003 0308 	and.w	r3, r3, #8
 80043d4:	2b08      	cmp	r3, #8
 80043d6:	d11b      	bne.n	8004410 <HAL_TIM_IRQHandler+0x104>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f06f 0208 	mvn.w	r2, #8
 80043e0:	611a      	str	r2, [r3, #16]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2204      	movs	r2, #4
 80043e6:	771a      	strb	r2, [r3, #28]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	f003 0303 	and.w	r3, r3, #3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_TIM_IRQHandler+0xf2>
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f89a 	bl	8004530 <HAL_TIM_IC_CaptureCallback>
 80043fc:	e005      	b.n	800440a <HAL_TIM_IRQHandler+0xfe>
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f88c 	bl	800451c <HAL_TIM_OC_DelayElapsedCallback>
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 f89d 	bl	8004544 <HAL_TIM_PWM_PulseFinishedCallback>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	771a      	strb	r2, [r3, #28]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	f003 0310 	and.w	r3, r3, #16
 800441a:	2b10      	cmp	r3, #16
 800441c:	d122      	bne.n	8004464 <HAL_TIM_IRQHandler+0x158>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	f003 0310 	and.w	r3, r3, #16
 8004428:	2b10      	cmp	r3, #16
 800442a:	d11b      	bne.n	8004464 <HAL_TIM_IRQHandler+0x158>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f06f 0210 	mvn.w	r2, #16
 8004434:	611a      	str	r2, [r3, #16]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2208      	movs	r2, #8
 800443a:	771a      	strb	r2, [r3, #28]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004446:	2b00      	cmp	r3, #0
 8004448:	d003      	beq.n	8004452 <HAL_TIM_IRQHandler+0x146>
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f870 	bl	8004530 <HAL_TIM_IC_CaptureCallback>
 8004450:	e005      	b.n	800445e <HAL_TIM_IRQHandler+0x152>
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f862 	bl	800451c <HAL_TIM_OC_DelayElapsedCallback>
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 f873 	bl	8004544 <HAL_TIM_PWM_PulseFinishedCallback>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	771a      	strb	r2, [r3, #28]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b01      	cmp	r3, #1
 8004470:	d10e      	bne.n	8004490 <HAL_TIM_IRQHandler+0x184>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b01      	cmp	r3, #1
 800447e:	d107      	bne.n	8004490 <HAL_TIM_IRQHandler+0x184>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f06f 0201 	mvn.w	r2, #1
 8004488:	611a      	str	r2, [r3, #16]
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7fd fbcc 	bl	8001c28 <HAL_TIM_PeriodElapsedCallback>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800449a:	2b80      	cmp	r3, #128	; 0x80
 800449c:	d10e      	bne.n	80044bc <HAL_TIM_IRQHandler+0x1b0>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a8:	2b80      	cmp	r3, #128	; 0x80
 80044aa:	d107      	bne.n	80044bc <HAL_TIM_IRQHandler+0x1b0>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044b4:	611a      	str	r2, [r3, #16]
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f902 	bl	80046c0 <HAL_TIMEx_BreakCallback>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c6:	2b40      	cmp	r3, #64	; 0x40
 80044c8:	d10e      	bne.n	80044e8 <HAL_TIM_IRQHandler+0x1dc>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d4:	2b40      	cmp	r3, #64	; 0x40
 80044d6:	d107      	bne.n	80044e8 <HAL_TIM_IRQHandler+0x1dc>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044e0:	611a      	str	r2, [r3, #16]
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f838 	bl	8004558 <HAL_TIM_TriggerCallback>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	f003 0320 	and.w	r3, r3, #32
 80044f2:	2b20      	cmp	r3, #32
 80044f4:	d10e      	bne.n	8004514 <HAL_TIM_IRQHandler+0x208>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f003 0320 	and.w	r3, r3, #32
 8004500:	2b20      	cmp	r3, #32
 8004502:	d107      	bne.n	8004514 <HAL_TIM_IRQHandler+0x208>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f06f 0220 	mvn.w	r2, #32
 800450c:	611a      	str	r2, [r3, #16]
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f8cc 	bl	80046ac <HAL_TIMEx_CommutCallback>
 8004514:	bf00      	nop
 8004516:	3708      	adds	r7, #8
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <HAL_TIM_OC_DelayElapsedCallback>:
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <HAL_TIM_IC_CaptureCallback>:
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <HAL_TIM_TriggerCallback>:
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <TIM_Base_SetConfig>:
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	60fb      	str	r3, [r7, #12]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a40      	ldr	r2, [pc, #256]	; (8004680 <TIM_Base_SetConfig+0x114>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d013      	beq.n	80045ac <TIM_Base_SetConfig+0x40>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800458a:	d00f      	beq.n	80045ac <TIM_Base_SetConfig+0x40>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a3d      	ldr	r2, [pc, #244]	; (8004684 <TIM_Base_SetConfig+0x118>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d00b      	beq.n	80045ac <TIM_Base_SetConfig+0x40>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a3c      	ldr	r2, [pc, #240]	; (8004688 <TIM_Base_SetConfig+0x11c>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d007      	beq.n	80045ac <TIM_Base_SetConfig+0x40>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a3b      	ldr	r2, [pc, #236]	; (800468c <TIM_Base_SetConfig+0x120>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d003      	beq.n	80045ac <TIM_Base_SetConfig+0x40>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a3a      	ldr	r2, [pc, #232]	; (8004690 <TIM_Base_SetConfig+0x124>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d108      	bne.n	80045be <TIM_Base_SetConfig+0x52>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b2:	60fb      	str	r3, [r7, #12]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	60fb      	str	r3, [r7, #12]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a2f      	ldr	r2, [pc, #188]	; (8004680 <TIM_Base_SetConfig+0x114>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d02b      	beq.n	800461e <TIM_Base_SetConfig+0xb2>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045cc:	d027      	beq.n	800461e <TIM_Base_SetConfig+0xb2>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a2c      	ldr	r2, [pc, #176]	; (8004684 <TIM_Base_SetConfig+0x118>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d023      	beq.n	800461e <TIM_Base_SetConfig+0xb2>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a2b      	ldr	r2, [pc, #172]	; (8004688 <TIM_Base_SetConfig+0x11c>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d01f      	beq.n	800461e <TIM_Base_SetConfig+0xb2>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a2a      	ldr	r2, [pc, #168]	; (800468c <TIM_Base_SetConfig+0x120>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d01b      	beq.n	800461e <TIM_Base_SetConfig+0xb2>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a29      	ldr	r2, [pc, #164]	; (8004690 <TIM_Base_SetConfig+0x124>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d017      	beq.n	800461e <TIM_Base_SetConfig+0xb2>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a28      	ldr	r2, [pc, #160]	; (8004694 <TIM_Base_SetConfig+0x128>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d013      	beq.n	800461e <TIM_Base_SetConfig+0xb2>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a27      	ldr	r2, [pc, #156]	; (8004698 <TIM_Base_SetConfig+0x12c>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d00f      	beq.n	800461e <TIM_Base_SetConfig+0xb2>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a26      	ldr	r2, [pc, #152]	; (800469c <TIM_Base_SetConfig+0x130>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d00b      	beq.n	800461e <TIM_Base_SetConfig+0xb2>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a25      	ldr	r2, [pc, #148]	; (80046a0 <TIM_Base_SetConfig+0x134>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d007      	beq.n	800461e <TIM_Base_SetConfig+0xb2>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a24      	ldr	r2, [pc, #144]	; (80046a4 <TIM_Base_SetConfig+0x138>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d003      	beq.n	800461e <TIM_Base_SetConfig+0xb2>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a23      	ldr	r2, [pc, #140]	; (80046a8 <TIM_Base_SetConfig+0x13c>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d108      	bne.n	8004630 <TIM_Base_SetConfig+0xc4>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004624:	60fb      	str	r3, [r7, #12]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	4313      	orrs	r3, r2
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	4313      	orrs	r3, r2
 800463c:	60fb      	str	r3, [r7, #12]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	689a      	ldr	r2, [r3, #8]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	62da      	str	r2, [r3, #44]	; 0x2c
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	629a      	str	r2, [r3, #40]	; 0x28
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a0a      	ldr	r2, [pc, #40]	; (8004680 <TIM_Base_SetConfig+0x114>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d003      	beq.n	8004664 <TIM_Base_SetConfig+0xf8>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a0c      	ldr	r2, [pc, #48]	; (8004690 <TIM_Base_SetConfig+0x124>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d103      	bne.n	800466c <TIM_Base_SetConfig+0x100>
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	691a      	ldr	r2, [r3, #16]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	631a      	str	r2, [r3, #48]	; 0x30
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	615a      	str	r2, [r3, #20]
 8004672:	bf00      	nop
 8004674:	3714      	adds	r7, #20
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	40010000 	.word	0x40010000
 8004684:	40000400 	.word	0x40000400
 8004688:	40000800 	.word	0x40000800
 800468c:	40000c00 	.word	0x40000c00
 8004690:	40010400 	.word	0x40010400
 8004694:	40014000 	.word	0x40014000
 8004698:	40014400 	.word	0x40014400
 800469c:	40014800 	.word	0x40014800
 80046a0:	40001800 	.word	0x40001800
 80046a4:	40001c00 	.word	0x40001c00
 80046a8:	40002000 	.word	0x40002000

080046ac <HAL_TIMEx_CommutCallback>:
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <HAL_TIMEx_BreakCallback>:
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HAL_LIN_Init>:
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <HAL_LIN_Init+0x14>
 80046e4:	2301      	movs	r3, #1
 80046e6:	e057      	b.n	8004798 <HAL_LIN_Init+0xc4>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d106      	bne.n	8004702 <HAL_LIN_Init+0x2e>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f7fd fc1f 	bl	8001f40 <HAL_UART_MspInit>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2224      	movs	r2, #36	; 0x24
 8004706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004718:	60da      	str	r2, [r3, #12]
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 fc92 	bl	8005044 <UART_SetConfig>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	691a      	ldr	r2, [r3, #16]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800472e:	611a      	str	r2, [r3, #16]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	695a      	ldr	r2, [r3, #20]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800473e:	615a      	str	r2, [r3, #20]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	691a      	ldr	r2, [r3, #16]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800474e:	611a      	str	r2, [r3, #16]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	691a      	ldr	r2, [r3, #16]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f022 0220 	bic.w	r2, r2, #32
 800475e:	611a      	str	r2, [r3, #16]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	6919      	ldr	r1, [r3, #16]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	430a      	orrs	r2, r1
 800476e:	611a      	str	r2, [r3, #16]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68da      	ldr	r2, [r3, #12]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800477e:	60da      	str	r2, [r3, #12]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	641a      	str	r2, [r3, #64]	; 0x40
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2220      	movs	r2, #32
 800478a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2220      	movs	r2, #32
 8004792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004796:	2300      	movs	r3, #0
 8004798:	4618      	mov	r0, r3
 800479a:	3708      	adds	r7, #8
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <HAL_UART_IRQHandler>:
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b0ba      	sub	sp, #232	; 0xe8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80047c6:	2300      	movs	r3, #0
 80047c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047cc:	2300      	movs	r3, #0
 80047ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80047d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047d6:	f003 030f 	and.w	r3, r3, #15
 80047da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10f      	bne.n	8004806 <HAL_UART_IRQHandler+0x66>
 80047e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ea:	f003 0320 	and.w	r3, r3, #32
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d009      	beq.n	8004806 <HAL_UART_IRQHandler+0x66>
 80047f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047f6:	f003 0320 	and.w	r3, r3, #32
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <HAL_UART_IRQHandler+0x66>
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 fb65 	bl	8004ece <UART_Receive_IT>
 8004804:	e256      	b.n	8004cb4 <HAL_UART_IRQHandler+0x514>
 8004806:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 80de 	beq.w	80049cc <HAL_UART_IRQHandler+0x22c>
 8004810:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	2b00      	cmp	r3, #0
 800481a:	d106      	bne.n	800482a <HAL_UART_IRQHandler+0x8a>
 800481c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004820:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 80d1 	beq.w	80049cc <HAL_UART_IRQHandler+0x22c>
 800482a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00b      	beq.n	800484e <HAL_UART_IRQHandler+0xae>
 8004836:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800483a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800483e:	2b00      	cmp	r3, #0
 8004840:	d005      	beq.n	800484e <HAL_UART_IRQHandler+0xae>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004846:	f043 0201 	orr.w	r2, r3, #1
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	641a      	str	r2, [r3, #64]	; 0x40
 800484e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004852:	f003 0304 	and.w	r3, r3, #4
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00b      	beq.n	8004872 <HAL_UART_IRQHandler+0xd2>
 800485a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d005      	beq.n	8004872 <HAL_UART_IRQHandler+0xd2>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	f043 0202 	orr.w	r2, r3, #2
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	641a      	str	r2, [r3, #64]	; 0x40
 8004872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00b      	beq.n	8004896 <HAL_UART_IRQHandler+0xf6>
 800487e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b00      	cmp	r3, #0
 8004888:	d005      	beq.n	8004896 <HAL_UART_IRQHandler+0xf6>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488e:	f043 0204 	orr.w	r2, r3, #4
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	641a      	str	r2, [r3, #64]	; 0x40
 8004896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800489a:	f003 0308 	and.w	r3, r3, #8
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d011      	beq.n	80048c6 <HAL_UART_IRQHandler+0x126>
 80048a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048a6:	f003 0320 	and.w	r3, r3, #32
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d105      	bne.n	80048ba <HAL_UART_IRQHandler+0x11a>
 80048ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d005      	beq.n	80048c6 <HAL_UART_IRQHandler+0x126>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	f043 0208 	orr.w	r2, r3, #8
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	641a      	str	r2, [r3, #64]	; 0x40
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f000 81ed 	beq.w	8004caa <HAL_UART_IRQHandler+0x50a>
 80048d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048d4:	f003 0320 	and.w	r3, r3, #32
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d008      	beq.n	80048ee <HAL_UART_IRQHandler+0x14e>
 80048dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048e0:	f003 0320 	and.w	r3, r3, #32
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d002      	beq.n	80048ee <HAL_UART_IRQHandler+0x14e>
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 faf0 	bl	8004ece <UART_Receive_IT>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f8:	2b40      	cmp	r3, #64	; 0x40
 80048fa:	bf0c      	ite	eq
 80048fc:	2301      	moveq	r3, #1
 80048fe:	2300      	movne	r3, #0
 8004900:	b2db      	uxtb	r3, r3
 8004902:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	f003 0308 	and.w	r3, r3, #8
 800490e:	2b00      	cmp	r3, #0
 8004910:	d103      	bne.n	800491a <HAL_UART_IRQHandler+0x17a>
 8004912:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004916:	2b00      	cmp	r3, #0
 8004918:	d04f      	beq.n	80049ba <HAL_UART_IRQHandler+0x21a>
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 f9f8 	bl	8004d10 <UART_EndRxTransfer>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492a:	2b40      	cmp	r3, #64	; 0x40
 800492c:	d141      	bne.n	80049b2 <HAL_UART_IRQHandler+0x212>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	3314      	adds	r3, #20
 8004934:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004938:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800493c:	e853 3f00 	ldrex	r3, [r3]
 8004940:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004944:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004948:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800494c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	3314      	adds	r3, #20
 8004956:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800495a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800495e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004962:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004966:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800496a:	e841 2300 	strex	r3, r2, [r1]
 800496e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004972:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1d9      	bne.n	800492e <HAL_UART_IRQHandler+0x18e>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497e:	2b00      	cmp	r3, #0
 8004980:	d013      	beq.n	80049aa <HAL_UART_IRQHandler+0x20a>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004986:	4a7d      	ldr	r2, [pc, #500]	; (8004b7c <HAL_UART_IRQHandler+0x3dc>)
 8004988:	651a      	str	r2, [r3, #80]	; 0x50
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498e:	4618      	mov	r0, r3
 8004990:	f7fe fb74 	bl	800307c <HAL_DMA_Abort_IT>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d016      	beq.n	80049c8 <HAL_UART_IRQHandler+0x228>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049a4:	4610      	mov	r0, r2
 80049a6:	4798      	blx	r3
 80049a8:	e00e      	b.n	80049c8 <HAL_UART_IRQHandler+0x228>
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 f99a 	bl	8004ce4 <HAL_UART_ErrorCallback>
 80049b0:	e00a      	b.n	80049c8 <HAL_UART_IRQHandler+0x228>
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f996 	bl	8004ce4 <HAL_UART_ErrorCallback>
 80049b8:	e006      	b.n	80049c8 <HAL_UART_IRQHandler+0x228>
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f992 	bl	8004ce4 <HAL_UART_ErrorCallback>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	641a      	str	r2, [r3, #64]	; 0x40
 80049c6:	e170      	b.n	8004caa <HAL_UART_IRQHandler+0x50a>
 80049c8:	bf00      	nop
 80049ca:	e16e      	b.n	8004caa <HAL_UART_IRQHandler+0x50a>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	f040 814a 	bne.w	8004c6a <HAL_UART_IRQHandler+0x4ca>
 80049d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049da:	f003 0310 	and.w	r3, r3, #16
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f000 8143 	beq.w	8004c6a <HAL_UART_IRQHandler+0x4ca>
 80049e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049e8:	f003 0310 	and.w	r3, r3, #16
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 813c 	beq.w	8004c6a <HAL_UART_IRQHandler+0x4ca>
 80049f2:	2300      	movs	r3, #0
 80049f4:	60bb      	str	r3, [r7, #8]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	60bb      	str	r3, [r7, #8]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	60bb      	str	r3, [r7, #8]
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a12:	2b40      	cmp	r3, #64	; 0x40
 8004a14:	f040 80b4 	bne.w	8004b80 <HAL_UART_IRQHandler+0x3e0>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 8004a24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 8140 	beq.w	8004cae <HAL_UART_IRQHandler+0x50e>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a36:	429a      	cmp	r2, r3
 8004a38:	f080 8139 	bcs.w	8004cae <HAL_UART_IRQHandler+0x50e>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a42:	85da      	strh	r2, [r3, #46]	; 0x2e
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a48:	69db      	ldr	r3, [r3, #28]
 8004a4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a4e:	f000 8088 	beq.w	8004b62 <HAL_UART_IRQHandler+0x3c2>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	330c      	adds	r3, #12
 8004a58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a60:	e853 3f00 	ldrex	r3, [r3]
 8004a64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	330c      	adds	r3, #12
 8004a7a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004a7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a86:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004a8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a8e:	e841 2300 	strex	r3, r2, [r1]
 8004a92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004a96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1d9      	bne.n	8004a52 <HAL_UART_IRQHandler+0x2b2>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	3314      	adds	r3, #20
 8004aa4:	677b      	str	r3, [r7, #116]	; 0x74
 8004aa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004aa8:	e853 3f00 	ldrex	r3, [r3]
 8004aac:	673b      	str	r3, [r7, #112]	; 0x70
 8004aae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ab0:	f023 0301 	bic.w	r3, r3, #1
 8004ab4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	3314      	adds	r3, #20
 8004abe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004ac2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004ac6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ac8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004aca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004ace:	e841 2300 	strex	r3, r2, [r1]
 8004ad2:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ad4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1e1      	bne.n	8004a9e <HAL_UART_IRQHandler+0x2fe>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	3314      	adds	r3, #20
 8004ae0:	663b      	str	r3, [r7, #96]	; 0x60
 8004ae2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ae4:	e853 3f00 	ldrex	r3, [r3]
 8004ae8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004aea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004af0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	3314      	adds	r3, #20
 8004afa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004afe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b00:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b02:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b06:	e841 2300 	strex	r3, r2, [r1]
 8004b0a:	667b      	str	r3, [r7, #100]	; 0x64
 8004b0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1e3      	bne.n	8004ada <HAL_UART_IRQHandler+0x33a>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2220      	movs	r2, #32
 8004b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	631a      	str	r2, [r3, #48]	; 0x30
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	330c      	adds	r3, #12
 8004b26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b2a:	e853 3f00 	ldrex	r3, [r3]
 8004b2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b32:	f023 0310 	bic.w	r3, r3, #16
 8004b36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	330c      	adds	r3, #12
 8004b40:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004b44:	65ba      	str	r2, [r7, #88]	; 0x58
 8004b46:	657b      	str	r3, [r7, #84]	; 0x54
 8004b48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b4c:	e841 2300 	strex	r3, r2, [r1]
 8004b50:	653b      	str	r3, [r7, #80]	; 0x50
 8004b52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1e3      	bne.n	8004b20 <HAL_UART_IRQHandler+0x380>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7fe fa1d 	bl	8002f9c <HAL_DMA_Abort>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	4619      	mov	r1, r3
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f8c0 	bl	8004cf8 <HAL_UARTEx_RxEventCallback>
 8004b78:	e099      	b.n	8004cae <HAL_UART_IRQHandler+0x50e>
 8004b7a:	bf00      	nop
 8004b7c:	08004dd7 	.word	0x08004dd7
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f000 808b 	beq.w	8004cb2 <HAL_UART_IRQHandler+0x512>
 8004b9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f000 8086 	beq.w	8004cb2 <HAL_UART_IRQHandler+0x512>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	330c      	adds	r3, #12
 8004bac:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb0:	e853 3f00 	ldrex	r3, [r3]
 8004bb4:	637b      	str	r3, [r7, #52]	; 0x34
 8004bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bbc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	330c      	adds	r3, #12
 8004bc6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004bca:	647a      	str	r2, [r7, #68]	; 0x44
 8004bcc:	643b      	str	r3, [r7, #64]	; 0x40
 8004bce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004bd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bd2:	e841 2300 	strex	r3, r2, [r1]
 8004bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1e3      	bne.n	8004ba6 <HAL_UART_IRQHandler+0x406>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	3314      	adds	r3, #20
 8004be4:	627b      	str	r3, [r7, #36]	; 0x24
 8004be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be8:	e853 3f00 	ldrex	r3, [r3]
 8004bec:	623b      	str	r3, [r7, #32]
 8004bee:	6a3b      	ldr	r3, [r7, #32]
 8004bf0:	f023 0301 	bic.w	r3, r3, #1
 8004bf4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	3314      	adds	r3, #20
 8004bfe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004c02:	633a      	str	r2, [r7, #48]	; 0x30
 8004c04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c0a:	e841 2300 	strex	r3, r2, [r1]
 8004c0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1e3      	bne.n	8004bde <HAL_UART_IRQHandler+0x43e>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2220      	movs	r2, #32
 8004c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	631a      	str	r2, [r3, #48]	; 0x30
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	330c      	adds	r3, #12
 8004c2a:	613b      	str	r3, [r7, #16]
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	e853 3f00 	ldrex	r3, [r3]
 8004c32:	60fb      	str	r3, [r7, #12]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f023 0310 	bic.w	r3, r3, #16
 8004c3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	330c      	adds	r3, #12
 8004c44:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004c48:	61fa      	str	r2, [r7, #28]
 8004c4a:	61bb      	str	r3, [r7, #24]
 8004c4c:	69b9      	ldr	r1, [r7, #24]
 8004c4e:	69fa      	ldr	r2, [r7, #28]
 8004c50:	e841 2300 	strex	r3, r2, [r1]
 8004c54:	617b      	str	r3, [r7, #20]
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1e3      	bne.n	8004c24 <HAL_UART_IRQHandler+0x484>
 8004c5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c60:	4619      	mov	r1, r3
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 f848 	bl	8004cf8 <HAL_UARTEx_RxEventCallback>
 8004c68:	e023      	b.n	8004cb2 <HAL_UART_IRQHandler+0x512>
 8004c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d009      	beq.n	8004c8a <HAL_UART_IRQHandler+0x4ea>
 8004c76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d003      	beq.n	8004c8a <HAL_UART_IRQHandler+0x4ea>
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f8bb 	bl	8004dfe <UART_Transmit_IT>
 8004c88:	e014      	b.n	8004cb4 <HAL_UART_IRQHandler+0x514>
 8004c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00e      	beq.n	8004cb4 <HAL_UART_IRQHandler+0x514>
 8004c96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d008      	beq.n	8004cb4 <HAL_UART_IRQHandler+0x514>
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f8fb 	bl	8004e9e <UART_EndTransmit_IT>
 8004ca8:	e004      	b.n	8004cb4 <HAL_UART_IRQHandler+0x514>
 8004caa:	bf00      	nop
 8004cac:	e002      	b.n	8004cb4 <HAL_UART_IRQHandler+0x514>
 8004cae:	bf00      	nop
 8004cb0:	e000      	b.n	8004cb4 <HAL_UART_IRQHandler+0x514>
 8004cb2:	bf00      	nop
 8004cb4:	37e8      	adds	r7, #232	; 0xe8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop

08004cbc <HAL_UART_TxCpltCallback>:
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <HAL_UART_RxCpltCallback>:
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <HAL_UART_ErrorCallback>:
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <HAL_UARTEx_RxEventCallback>:
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	460b      	mov	r3, r1
 8004d02:	807b      	strh	r3, [r7, #2]
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <UART_EndRxTransfer>:
 8004d10:	b480      	push	{r7}
 8004d12:	b095      	sub	sp, #84	; 0x54
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	330c      	adds	r3, #12
 8004d1e:	637b      	str	r3, [r7, #52]	; 0x34
 8004d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d22:	e853 3f00 	ldrex	r3, [r3]
 8004d26:	633b      	str	r3, [r7, #48]	; 0x30
 8004d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	330c      	adds	r3, #12
 8004d36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d38:	643a      	str	r2, [r7, #64]	; 0x40
 8004d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d40:	e841 2300 	strex	r3, r2, [r1]
 8004d44:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1e5      	bne.n	8004d18 <UART_EndRxTransfer+0x8>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	3314      	adds	r3, #20
 8004d52:	623b      	str	r3, [r7, #32]
 8004d54:	6a3b      	ldr	r3, [r7, #32]
 8004d56:	e853 3f00 	ldrex	r3, [r3]
 8004d5a:	61fb      	str	r3, [r7, #28]
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	f023 0301 	bic.w	r3, r3, #1
 8004d62:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	3314      	adds	r3, #20
 8004d6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d74:	e841 2300 	strex	r3, r2, [r1]
 8004d78:	627b      	str	r3, [r7, #36]	; 0x24
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1e5      	bne.n	8004d4c <UART_EndRxTransfer+0x3c>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d119      	bne.n	8004dbc <UART_EndRxTransfer+0xac>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	330c      	adds	r3, #12
 8004d8e:	60fb      	str	r3, [r7, #12]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	e853 3f00 	ldrex	r3, [r3]
 8004d96:	60bb      	str	r3, [r7, #8]
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	f023 0310 	bic.w	r3, r3, #16
 8004d9e:	647b      	str	r3, [r7, #68]	; 0x44
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	330c      	adds	r3, #12
 8004da6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004da8:	61ba      	str	r2, [r7, #24]
 8004daa:	617b      	str	r3, [r7, #20]
 8004dac:	6979      	ldr	r1, [r7, #20]
 8004dae:	69ba      	ldr	r2, [r7, #24]
 8004db0:	e841 2300 	strex	r3, r2, [r1]
 8004db4:	613b      	str	r3, [r7, #16]
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1e5      	bne.n	8004d88 <UART_EndRxTransfer+0x78>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	631a      	str	r2, [r3, #48]	; 0x30
 8004dca:	bf00      	nop
 8004dcc:	3754      	adds	r7, #84	; 0x54
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr

08004dd6 <UART_DMAAbortOnError>:
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b084      	sub	sp, #16
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de2:	60fb      	str	r3, [r7, #12]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	85da      	strh	r2, [r3, #46]	; 0x2e
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	84da      	strh	r2, [r3, #38]	; 0x26
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f7ff ff77 	bl	8004ce4 <HAL_UART_ErrorCallback>
 8004df6:	bf00      	nop
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <UART_Transmit_IT>:
 8004dfe:	b480      	push	{r7}
 8004e00:	b085      	sub	sp, #20
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b21      	cmp	r3, #33	; 0x21
 8004e10:	d13e      	bne.n	8004e90 <UART_Transmit_IT+0x92>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e1a:	d114      	bne.n	8004e46 <UART_Transmit_IT+0x48>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d110      	bne.n	8004e46 <UART_Transmit_IT+0x48>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	60fb      	str	r3, [r7, #12]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	881b      	ldrh	r3, [r3, #0]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e38:	605a      	str	r2, [r3, #4]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	1c9a      	adds	r2, r3, #2
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	621a      	str	r2, [r3, #32]
 8004e44:	e008      	b.n	8004e58 <UART_Transmit_IT+0x5a>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	1c59      	adds	r1, r3, #1
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	6211      	str	r1, [r2, #32]
 8004e50:	781a      	ldrb	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	605a      	str	r2, [r3, #4]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	4619      	mov	r1, r3
 8004e66:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d10f      	bne.n	8004e8c <UART_Transmit_IT+0x8e>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68da      	ldr	r2, [r3, #12]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e7a:	60da      	str	r2, [r3, #12]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68da      	ldr	r2, [r3, #12]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e8a:	60da      	str	r2, [r3, #12]
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	e000      	b.n	8004e92 <UART_Transmit_IT+0x94>
 8004e90:	2302      	movs	r3, #2
 8004e92:	4618      	mov	r0, r3
 8004e94:	3714      	adds	r7, #20
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <UART_EndTransmit_IT>:
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b082      	sub	sp, #8
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68da      	ldr	r2, [r3, #12]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eb4:	60da      	str	r2, [r3, #12]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f7ff fefc 	bl	8004cbc <HAL_UART_TxCpltCallback>
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3708      	adds	r7, #8
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <UART_Receive_IT>:
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b08c      	sub	sp, #48	; 0x30
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b22      	cmp	r3, #34	; 0x22
 8004ee0:	f040 80ab 	bne.w	800503a <UART_Receive_IT+0x16c>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eec:	d117      	bne.n	8004f1e <UART_Receive_IT+0x50>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d113      	bne.n	8004f1e <UART_Receive_IT+0x50>
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f10:	801a      	strh	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f16:	1c9a      	adds	r2, r3, #2
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	629a      	str	r2, [r3, #40]	; 0x28
 8004f1c:	e026      	b.n	8004f6c <UART_Receive_IT+0x9e>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f24:	2300      	movs	r3, #0
 8004f26:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f30:	d007      	beq.n	8004f42 <UART_Receive_IT+0x74>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10a      	bne.n	8004f50 <UART_Receive_IT+0x82>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d106      	bne.n	8004f50 <UART_Receive_IT+0x82>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	b2da      	uxtb	r2, r3
 8004f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f4c:	701a      	strb	r2, [r3, #0]
 8004f4e:	e008      	b.n	8004f62 <UART_Receive_IT+0x94>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f5c:	b2da      	uxtb	r2, r3
 8004f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f60:	701a      	strb	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f66:	1c5a      	adds	r2, r3, #1
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	629a      	str	r2, [r3, #40]	; 0x28
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	3b01      	subs	r3, #1
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	4619      	mov	r1, r3
 8004f7a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d15a      	bne.n	8005036 <UART_Receive_IT+0x168>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68da      	ldr	r2, [r3, #12]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 0220 	bic.w	r2, r2, #32
 8004f8e:	60da      	str	r2, [r3, #12]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68da      	ldr	r2, [r3, #12]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f9e:	60da      	str	r2, [r3, #12]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	695a      	ldr	r2, [r3, #20]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 0201 	bic.w	r2, r2, #1
 8004fae:	615a      	str	r2, [r3, #20]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d135      	bne.n	800502c <UART_Receive_IT+0x15e>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	631a      	str	r2, [r3, #48]	; 0x30
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	330c      	adds	r3, #12
 8004fcc:	617b      	str	r3, [r7, #20]
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	e853 3f00 	ldrex	r3, [r3]
 8004fd4:	613b      	str	r3, [r7, #16]
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	f023 0310 	bic.w	r3, r3, #16
 8004fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	330c      	adds	r3, #12
 8004fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe6:	623a      	str	r2, [r7, #32]
 8004fe8:	61fb      	str	r3, [r7, #28]
 8004fea:	69f9      	ldr	r1, [r7, #28]
 8004fec:	6a3a      	ldr	r2, [r7, #32]
 8004fee:	e841 2300 	strex	r3, r2, [r1]
 8004ff2:	61bb      	str	r3, [r7, #24]
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1e5      	bne.n	8004fc6 <UART_Receive_IT+0xf8>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0310 	and.w	r3, r3, #16
 8005004:	2b10      	cmp	r3, #16
 8005006:	d10a      	bne.n	800501e <UART_Receive_IT+0x150>
 8005008:	2300      	movs	r3, #0
 800500a:	60fb      	str	r3, [r7, #12]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	60fb      	str	r3, [r7, #12]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	60fb      	str	r3, [r7, #12]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005022:	4619      	mov	r1, r3
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f7ff fe67 	bl	8004cf8 <HAL_UARTEx_RxEventCallback>
 800502a:	e002      	b.n	8005032 <UART_Receive_IT+0x164>
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f7ff fe4f 	bl	8004cd0 <HAL_UART_RxCpltCallback>
 8005032:	2300      	movs	r3, #0
 8005034:	e002      	b.n	800503c <UART_Receive_IT+0x16e>
 8005036:	2300      	movs	r3, #0
 8005038:	e000      	b.n	800503c <UART_Receive_IT+0x16e>
 800503a:	2302      	movs	r3, #2
 800503c:	4618      	mov	r0, r3
 800503e:	3730      	adds	r7, #48	; 0x30
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <UART_SetConfig>:
 8005044:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005048:	b0c0      	sub	sp, #256	; 0x100
 800504a:	af00      	add	r7, sp, #0
 800504c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 8005050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800505c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005060:	68d9      	ldr	r1, [r3, #12]
 8005062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	ea40 0301 	orr.w	r3, r0, r1
 800506c:	6113      	str	r3, [r2, #16]
 800506e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	431a      	orrs	r2, r3
 800507c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	431a      	orrs	r2, r3
 8005084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005088:	69db      	ldr	r3, [r3, #28]
 800508a:	4313      	orrs	r3, r2
 800508c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800509c:	f021 010c 	bic.w	r1, r1, #12
 80050a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80050aa:	430b      	orrs	r3, r1
 80050ac:	60d3      	str	r3, [r2, #12]
 80050ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80050ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050be:	6999      	ldr	r1, [r3, #24]
 80050c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	ea40 0301 	orr.w	r3, r0, r1
 80050ca:	6153      	str	r3, [r2, #20]
 80050cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	4b8f      	ldr	r3, [pc, #572]	; (8005310 <UART_SetConfig+0x2cc>)
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d005      	beq.n	80050e4 <UART_SetConfig+0xa0>
 80050d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	4b8d      	ldr	r3, [pc, #564]	; (8005314 <UART_SetConfig+0x2d0>)
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d104      	bne.n	80050ee <UART_SetConfig+0xaa>
 80050e4:	f7fe fe26 	bl	8003d34 <HAL_RCC_GetPCLK2Freq>
 80050e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80050ec:	e003      	b.n	80050f6 <UART_SetConfig+0xb2>
 80050ee:	f7fe fe0d 	bl	8003d0c <HAL_RCC_GetPCLK1Freq>
 80050f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80050f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050fa:	69db      	ldr	r3, [r3, #28]
 80050fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005100:	f040 810c 	bne.w	800531c <UART_SetConfig+0x2d8>
 8005104:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005108:	2200      	movs	r2, #0
 800510a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800510e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005112:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005116:	4622      	mov	r2, r4
 8005118:	462b      	mov	r3, r5
 800511a:	1891      	adds	r1, r2, r2
 800511c:	65b9      	str	r1, [r7, #88]	; 0x58
 800511e:	415b      	adcs	r3, r3
 8005120:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005122:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005126:	4621      	mov	r1, r4
 8005128:	eb12 0801 	adds.w	r8, r2, r1
 800512c:	4629      	mov	r1, r5
 800512e:	eb43 0901 	adc.w	r9, r3, r1
 8005132:	f04f 0200 	mov.w	r2, #0
 8005136:	f04f 0300 	mov.w	r3, #0
 800513a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800513e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005142:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005146:	4690      	mov	r8, r2
 8005148:	4699      	mov	r9, r3
 800514a:	4623      	mov	r3, r4
 800514c:	eb18 0303 	adds.w	r3, r8, r3
 8005150:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005154:	462b      	mov	r3, r5
 8005156:	eb49 0303 	adc.w	r3, r9, r3
 800515a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800515e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800516a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800516e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005172:	460b      	mov	r3, r1
 8005174:	18db      	adds	r3, r3, r3
 8005176:	653b      	str	r3, [r7, #80]	; 0x50
 8005178:	4613      	mov	r3, r2
 800517a:	eb42 0303 	adc.w	r3, r2, r3
 800517e:	657b      	str	r3, [r7, #84]	; 0x54
 8005180:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005184:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005188:	f7fb fa4e 	bl	8000628 <__aeabi_uldivmod>
 800518c:	4602      	mov	r2, r0
 800518e:	460b      	mov	r3, r1
 8005190:	4b61      	ldr	r3, [pc, #388]	; (8005318 <UART_SetConfig+0x2d4>)
 8005192:	fba3 2302 	umull	r2, r3, r3, r2
 8005196:	095b      	lsrs	r3, r3, #5
 8005198:	011c      	lsls	r4, r3, #4
 800519a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800519e:	2200      	movs	r2, #0
 80051a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80051a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80051ac:	4642      	mov	r2, r8
 80051ae:	464b      	mov	r3, r9
 80051b0:	1891      	adds	r1, r2, r2
 80051b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80051b4:	415b      	adcs	r3, r3
 80051b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80051bc:	4641      	mov	r1, r8
 80051be:	eb12 0a01 	adds.w	sl, r2, r1
 80051c2:	4649      	mov	r1, r9
 80051c4:	eb43 0b01 	adc.w	fp, r3, r1
 80051c8:	f04f 0200 	mov.w	r2, #0
 80051cc:	f04f 0300 	mov.w	r3, #0
 80051d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80051d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80051d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051dc:	4692      	mov	sl, r2
 80051de:	469b      	mov	fp, r3
 80051e0:	4643      	mov	r3, r8
 80051e2:	eb1a 0303 	adds.w	r3, sl, r3
 80051e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051ea:	464b      	mov	r3, r9
 80051ec:	eb4b 0303 	adc.w	r3, fp, r3
 80051f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80051f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005200:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005204:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005208:	460b      	mov	r3, r1
 800520a:	18db      	adds	r3, r3, r3
 800520c:	643b      	str	r3, [r7, #64]	; 0x40
 800520e:	4613      	mov	r3, r2
 8005210:	eb42 0303 	adc.w	r3, r2, r3
 8005214:	647b      	str	r3, [r7, #68]	; 0x44
 8005216:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800521a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800521e:	f7fb fa03 	bl	8000628 <__aeabi_uldivmod>
 8005222:	4602      	mov	r2, r0
 8005224:	460b      	mov	r3, r1
 8005226:	4611      	mov	r1, r2
 8005228:	4b3b      	ldr	r3, [pc, #236]	; (8005318 <UART_SetConfig+0x2d4>)
 800522a:	fba3 2301 	umull	r2, r3, r3, r1
 800522e:	095b      	lsrs	r3, r3, #5
 8005230:	2264      	movs	r2, #100	; 0x64
 8005232:	fb02 f303 	mul.w	r3, r2, r3
 8005236:	1acb      	subs	r3, r1, r3
 8005238:	00db      	lsls	r3, r3, #3
 800523a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800523e:	4b36      	ldr	r3, [pc, #216]	; (8005318 <UART_SetConfig+0x2d4>)
 8005240:	fba3 2302 	umull	r2, r3, r3, r2
 8005244:	095b      	lsrs	r3, r3, #5
 8005246:	005b      	lsls	r3, r3, #1
 8005248:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800524c:	441c      	add	r4, r3
 800524e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005252:	2200      	movs	r2, #0
 8005254:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005258:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800525c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005260:	4642      	mov	r2, r8
 8005262:	464b      	mov	r3, r9
 8005264:	1891      	adds	r1, r2, r2
 8005266:	63b9      	str	r1, [r7, #56]	; 0x38
 8005268:	415b      	adcs	r3, r3
 800526a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800526c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005270:	4641      	mov	r1, r8
 8005272:	1851      	adds	r1, r2, r1
 8005274:	6339      	str	r1, [r7, #48]	; 0x30
 8005276:	4649      	mov	r1, r9
 8005278:	414b      	adcs	r3, r1
 800527a:	637b      	str	r3, [r7, #52]	; 0x34
 800527c:	f04f 0200 	mov.w	r2, #0
 8005280:	f04f 0300 	mov.w	r3, #0
 8005284:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005288:	4659      	mov	r1, fp
 800528a:	00cb      	lsls	r3, r1, #3
 800528c:	4651      	mov	r1, sl
 800528e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005292:	4651      	mov	r1, sl
 8005294:	00ca      	lsls	r2, r1, #3
 8005296:	4610      	mov	r0, r2
 8005298:	4619      	mov	r1, r3
 800529a:	4603      	mov	r3, r0
 800529c:	4642      	mov	r2, r8
 800529e:	189b      	adds	r3, r3, r2
 80052a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052a4:	464b      	mov	r3, r9
 80052a6:	460a      	mov	r2, r1
 80052a8:	eb42 0303 	adc.w	r3, r2, r3
 80052ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80052bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80052c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80052c4:	460b      	mov	r3, r1
 80052c6:	18db      	adds	r3, r3, r3
 80052c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80052ca:	4613      	mov	r3, r2
 80052cc:	eb42 0303 	adc.w	r3, r2, r3
 80052d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80052da:	f7fb f9a5 	bl	8000628 <__aeabi_uldivmod>
 80052de:	4602      	mov	r2, r0
 80052e0:	460b      	mov	r3, r1
 80052e2:	4b0d      	ldr	r3, [pc, #52]	; (8005318 <UART_SetConfig+0x2d4>)
 80052e4:	fba3 1302 	umull	r1, r3, r3, r2
 80052e8:	095b      	lsrs	r3, r3, #5
 80052ea:	2164      	movs	r1, #100	; 0x64
 80052ec:	fb01 f303 	mul.w	r3, r1, r3
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	00db      	lsls	r3, r3, #3
 80052f4:	3332      	adds	r3, #50	; 0x32
 80052f6:	4a08      	ldr	r2, [pc, #32]	; (8005318 <UART_SetConfig+0x2d4>)
 80052f8:	fba2 2303 	umull	r2, r3, r2, r3
 80052fc:	095b      	lsrs	r3, r3, #5
 80052fe:	f003 0207 	and.w	r2, r3, #7
 8005302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4422      	add	r2, r4
 800530a:	609a      	str	r2, [r3, #8]
 800530c:	e105      	b.n	800551a <UART_SetConfig+0x4d6>
 800530e:	bf00      	nop
 8005310:	40011000 	.word	0x40011000
 8005314:	40011400 	.word	0x40011400
 8005318:	51eb851f 	.word	0x51eb851f
 800531c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005320:	2200      	movs	r2, #0
 8005322:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005326:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800532a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800532e:	4642      	mov	r2, r8
 8005330:	464b      	mov	r3, r9
 8005332:	1891      	adds	r1, r2, r2
 8005334:	6239      	str	r1, [r7, #32]
 8005336:	415b      	adcs	r3, r3
 8005338:	627b      	str	r3, [r7, #36]	; 0x24
 800533a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800533e:	4641      	mov	r1, r8
 8005340:	1854      	adds	r4, r2, r1
 8005342:	4649      	mov	r1, r9
 8005344:	eb43 0501 	adc.w	r5, r3, r1
 8005348:	f04f 0200 	mov.w	r2, #0
 800534c:	f04f 0300 	mov.w	r3, #0
 8005350:	00eb      	lsls	r3, r5, #3
 8005352:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005356:	00e2      	lsls	r2, r4, #3
 8005358:	4614      	mov	r4, r2
 800535a:	461d      	mov	r5, r3
 800535c:	4643      	mov	r3, r8
 800535e:	18e3      	adds	r3, r4, r3
 8005360:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005364:	464b      	mov	r3, r9
 8005366:	eb45 0303 	adc.w	r3, r5, r3
 800536a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800536e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800537a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800537e:	f04f 0200 	mov.w	r2, #0
 8005382:	f04f 0300 	mov.w	r3, #0
 8005386:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800538a:	4629      	mov	r1, r5
 800538c:	008b      	lsls	r3, r1, #2
 800538e:	4621      	mov	r1, r4
 8005390:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005394:	4621      	mov	r1, r4
 8005396:	008a      	lsls	r2, r1, #2
 8005398:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800539c:	f7fb f944 	bl	8000628 <__aeabi_uldivmod>
 80053a0:	4602      	mov	r2, r0
 80053a2:	460b      	mov	r3, r1
 80053a4:	4b60      	ldr	r3, [pc, #384]	; (8005528 <UART_SetConfig+0x4e4>)
 80053a6:	fba3 2302 	umull	r2, r3, r3, r2
 80053aa:	095b      	lsrs	r3, r3, #5
 80053ac:	011c      	lsls	r4, r3, #4
 80053ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053b2:	2200      	movs	r2, #0
 80053b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80053b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80053bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80053c0:	4642      	mov	r2, r8
 80053c2:	464b      	mov	r3, r9
 80053c4:	1891      	adds	r1, r2, r2
 80053c6:	61b9      	str	r1, [r7, #24]
 80053c8:	415b      	adcs	r3, r3
 80053ca:	61fb      	str	r3, [r7, #28]
 80053cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053d0:	4641      	mov	r1, r8
 80053d2:	1851      	adds	r1, r2, r1
 80053d4:	6139      	str	r1, [r7, #16]
 80053d6:	4649      	mov	r1, r9
 80053d8:	414b      	adcs	r3, r1
 80053da:	617b      	str	r3, [r7, #20]
 80053dc:	f04f 0200 	mov.w	r2, #0
 80053e0:	f04f 0300 	mov.w	r3, #0
 80053e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053e8:	4659      	mov	r1, fp
 80053ea:	00cb      	lsls	r3, r1, #3
 80053ec:	4651      	mov	r1, sl
 80053ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053f2:	4651      	mov	r1, sl
 80053f4:	00ca      	lsls	r2, r1, #3
 80053f6:	4610      	mov	r0, r2
 80053f8:	4619      	mov	r1, r3
 80053fa:	4603      	mov	r3, r0
 80053fc:	4642      	mov	r2, r8
 80053fe:	189b      	adds	r3, r3, r2
 8005400:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005404:	464b      	mov	r3, r9
 8005406:	460a      	mov	r2, r1
 8005408:	eb42 0303 	adc.w	r3, r2, r3
 800540c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	67bb      	str	r3, [r7, #120]	; 0x78
 800541a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800541c:	f04f 0200 	mov.w	r2, #0
 8005420:	f04f 0300 	mov.w	r3, #0
 8005424:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005428:	4649      	mov	r1, r9
 800542a:	008b      	lsls	r3, r1, #2
 800542c:	4641      	mov	r1, r8
 800542e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005432:	4641      	mov	r1, r8
 8005434:	008a      	lsls	r2, r1, #2
 8005436:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800543a:	f7fb f8f5 	bl	8000628 <__aeabi_uldivmod>
 800543e:	4602      	mov	r2, r0
 8005440:	460b      	mov	r3, r1
 8005442:	4b39      	ldr	r3, [pc, #228]	; (8005528 <UART_SetConfig+0x4e4>)
 8005444:	fba3 1302 	umull	r1, r3, r3, r2
 8005448:	095b      	lsrs	r3, r3, #5
 800544a:	2164      	movs	r1, #100	; 0x64
 800544c:	fb01 f303 	mul.w	r3, r1, r3
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	011b      	lsls	r3, r3, #4
 8005454:	3332      	adds	r3, #50	; 0x32
 8005456:	4a34      	ldr	r2, [pc, #208]	; (8005528 <UART_SetConfig+0x4e4>)
 8005458:	fba2 2303 	umull	r2, r3, r2, r3
 800545c:	095b      	lsrs	r3, r3, #5
 800545e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005462:	441c      	add	r4, r3
 8005464:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005468:	2200      	movs	r2, #0
 800546a:	673b      	str	r3, [r7, #112]	; 0x70
 800546c:	677a      	str	r2, [r7, #116]	; 0x74
 800546e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005472:	4642      	mov	r2, r8
 8005474:	464b      	mov	r3, r9
 8005476:	1891      	adds	r1, r2, r2
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	415b      	adcs	r3, r3
 800547c:	60fb      	str	r3, [r7, #12]
 800547e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005482:	4641      	mov	r1, r8
 8005484:	1851      	adds	r1, r2, r1
 8005486:	6039      	str	r1, [r7, #0]
 8005488:	4649      	mov	r1, r9
 800548a:	414b      	adcs	r3, r1
 800548c:	607b      	str	r3, [r7, #4]
 800548e:	f04f 0200 	mov.w	r2, #0
 8005492:	f04f 0300 	mov.w	r3, #0
 8005496:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800549a:	4659      	mov	r1, fp
 800549c:	00cb      	lsls	r3, r1, #3
 800549e:	4651      	mov	r1, sl
 80054a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054a4:	4651      	mov	r1, sl
 80054a6:	00ca      	lsls	r2, r1, #3
 80054a8:	4610      	mov	r0, r2
 80054aa:	4619      	mov	r1, r3
 80054ac:	4603      	mov	r3, r0
 80054ae:	4642      	mov	r2, r8
 80054b0:	189b      	adds	r3, r3, r2
 80054b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80054b4:	464b      	mov	r3, r9
 80054b6:	460a      	mov	r2, r1
 80054b8:	eb42 0303 	adc.w	r3, r2, r3
 80054bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	663b      	str	r3, [r7, #96]	; 0x60
 80054c8:	667a      	str	r2, [r7, #100]	; 0x64
 80054ca:	f04f 0200 	mov.w	r2, #0
 80054ce:	f04f 0300 	mov.w	r3, #0
 80054d2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80054d6:	4649      	mov	r1, r9
 80054d8:	008b      	lsls	r3, r1, #2
 80054da:	4641      	mov	r1, r8
 80054dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054e0:	4641      	mov	r1, r8
 80054e2:	008a      	lsls	r2, r1, #2
 80054e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80054e8:	f7fb f89e 	bl	8000628 <__aeabi_uldivmod>
 80054ec:	4602      	mov	r2, r0
 80054ee:	460b      	mov	r3, r1
 80054f0:	4b0d      	ldr	r3, [pc, #52]	; (8005528 <UART_SetConfig+0x4e4>)
 80054f2:	fba3 1302 	umull	r1, r3, r3, r2
 80054f6:	095b      	lsrs	r3, r3, #5
 80054f8:	2164      	movs	r1, #100	; 0x64
 80054fa:	fb01 f303 	mul.w	r3, r1, r3
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	011b      	lsls	r3, r3, #4
 8005502:	3332      	adds	r3, #50	; 0x32
 8005504:	4a08      	ldr	r2, [pc, #32]	; (8005528 <UART_SetConfig+0x4e4>)
 8005506:	fba2 2303 	umull	r2, r3, r2, r3
 800550a:	095b      	lsrs	r3, r3, #5
 800550c:	f003 020f 	and.w	r2, r3, #15
 8005510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4422      	add	r2, r4
 8005518:	609a      	str	r2, [r3, #8]
 800551a:	bf00      	nop
 800551c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005520:	46bd      	mov	sp, r7
 8005522:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005526:	bf00      	nop
 8005528:	51eb851f 	.word	0x51eb851f

0800552c <makeFreeRtosPriority>:
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	4603      	mov	r3, r0
 8005534:	80fb      	strh	r3, [r7, #6]
 8005536:	2300      	movs	r3, #0
 8005538:	60fb      	str	r3, [r7, #12]
 800553a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800553e:	2b84      	cmp	r3, #132	; 0x84
 8005540:	d005      	beq.n	800554e <makeFreeRtosPriority+0x22>
 8005542:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	4413      	add	r3, r2
 800554a:	3303      	adds	r3, #3
 800554c:	60fb      	str	r3, [r7, #12]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	4618      	mov	r0, r3
 8005552:	3714      	adds	r7, #20
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <inHandlerMode>:
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	f3ef 8305 	mrs	r3, IPSR
 8005566:	607b      	str	r3, [r7, #4]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	bf14      	ite	ne
 800556e:	2301      	movne	r3, #1
 8005570:	2300      	moveq	r3, #0
 8005572:	b2db      	uxtb	r3, r3
 8005574:	4618      	mov	r0, r3
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <osKernelStart>:
 8005580:	b580      	push	{r7, lr}
 8005582:	af00      	add	r7, sp, #0
 8005584:	f001 f8ea 	bl	800675c <vTaskStartScheduler>
 8005588:	2300      	movs	r3, #0
 800558a:	4618      	mov	r0, r3
 800558c:	bd80      	pop	{r7, pc}

0800558e <osThreadCreate>:
 800558e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005590:	b089      	sub	sp, #36	; 0x24
 8005592:	af04      	add	r7, sp, #16
 8005594:	6078      	str	r0, [r7, #4]
 8005596:	6039      	str	r1, [r7, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d020      	beq.n	80055e2 <osThreadCreate+0x54>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d01c      	beq.n	80055e2 <osThreadCreate+0x54>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685c      	ldr	r4, [r3, #4]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681d      	ldr	r5, [r3, #0]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	691e      	ldr	r6, [r3, #16]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7ff ffb6 	bl	800552c <makeFreeRtosPriority>
 80055c0:	4601      	mov	r1, r0
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	6992      	ldr	r2, [r2, #24]
 80055ca:	9202      	str	r2, [sp, #8]
 80055cc:	9301      	str	r3, [sp, #4]
 80055ce:	9100      	str	r1, [sp, #0]
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	4632      	mov	r2, r6
 80055d4:	4629      	mov	r1, r5
 80055d6:	4620      	mov	r0, r4
 80055d8:	f000 fef8 	bl	80063cc <xTaskCreateStatic>
 80055dc:	4603      	mov	r3, r0
 80055de:	60fb      	str	r3, [r7, #12]
 80055e0:	e01c      	b.n	800561c <osThreadCreate+0x8e>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685c      	ldr	r4, [r3, #4]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681d      	ldr	r5, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	b29e      	uxth	r6, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f7ff ff98 	bl	800552c <makeFreeRtosPriority>
 80055fc:	4602      	mov	r2, r0
 80055fe:	f107 030c 	add.w	r3, r7, #12
 8005602:	9301      	str	r3, [sp, #4]
 8005604:	9200      	str	r2, [sp, #0]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	4632      	mov	r2, r6
 800560a:	4629      	mov	r1, r5
 800560c:	4620      	mov	r0, r4
 800560e:	f000 ff3a 	bl	8006486 <xTaskCreate>
 8005612:	4603      	mov	r3, r0
 8005614:	2b01      	cmp	r3, #1
 8005616:	d001      	beq.n	800561c <osThreadCreate+0x8e>
 8005618:	2300      	movs	r3, #0
 800561a:	e000      	b.n	800561e <osThreadCreate+0x90>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4618      	mov	r0, r3
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005626 <osDelay>:
 8005626:	b580      	push	{r7, lr}
 8005628:	b084      	sub	sp, #16
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	60fb      	str	r3, [r7, #12]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d001      	beq.n	800563c <osDelay+0x16>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	e000      	b.n	800563e <osDelay+0x18>
 800563c:	2301      	movs	r3, #1
 800563e:	4618      	mov	r0, r3
 8005640:	f001 f858 	bl	80066f4 <vTaskDelay>
 8005644:	2300      	movs	r3, #0
 8005646:	4618      	mov	r0, r3
 8005648:	3710      	adds	r7, #16
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
	...

08005650 <osTimerCreate>:
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af02      	add	r7, sp, #8
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	460b      	mov	r3, r1
 800565a:	607a      	str	r2, [r7, #4]
 800565c:	72fb      	strb	r3, [r7, #11]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d013      	beq.n	800568e <osTimerCreate+0x3e>
 8005666:	7afb      	ldrb	r3, [r7, #11]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d101      	bne.n	8005670 <osTimerCreate+0x20>
 800566c:	2101      	movs	r1, #1
 800566e:	e000      	b.n	8005672 <osTimerCreate+0x22>
 8005670:	2100      	movs	r1, #0
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	6852      	ldr	r2, [r2, #4]
 800567a:	9201      	str	r2, [sp, #4]
 800567c:	9300      	str	r3, [sp, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	460a      	mov	r2, r1
 8005682:	2101      	movs	r1, #1
 8005684:	480b      	ldr	r0, [pc, #44]	; (80056b4 <osTimerCreate+0x64>)
 8005686:	f001 ff8c 	bl	80075a2 <xTimerCreateStatic>
 800568a:	4603      	mov	r3, r0
 800568c:	e00e      	b.n	80056ac <osTimerCreate+0x5c>
 800568e:	7afb      	ldrb	r3, [r7, #11]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d101      	bne.n	8005698 <osTimerCreate+0x48>
 8005694:	2201      	movs	r2, #1
 8005696:	e000      	b.n	800569a <osTimerCreate+0x4a>
 8005698:	2200      	movs	r2, #0
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	9300      	str	r3, [sp, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2101      	movs	r1, #1
 80056a4:	4803      	ldr	r0, [pc, #12]	; (80056b4 <osTimerCreate+0x64>)
 80056a6:	f001 ff5b 	bl	8007560 <xTimerCreate>
 80056aa:	4603      	mov	r3, r0
 80056ac:	4618      	mov	r0, r3
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	08009070 	.word	0x08009070

080056b8 <osSignalSet>:
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af02      	add	r7, sp, #8
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
 80056c2:	2300      	movs	r3, #0
 80056c4:	60fb      	str	r3, [r7, #12]
 80056c6:	2300      	movs	r3, #0
 80056c8:	60bb      	str	r3, [r7, #8]
 80056ca:	f7ff ff47 	bl	800555c <inHandlerMode>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d01c      	beq.n	800570e <osSignalSet+0x56>
 80056d4:	6839      	ldr	r1, [r7, #0]
 80056d6:	f107 0208 	add.w	r2, r7, #8
 80056da:	f107 030c 	add.w	r3, r7, #12
 80056de:	9300      	str	r3, [sp, #0]
 80056e0:	4613      	mov	r3, r2
 80056e2:	2201      	movs	r2, #1
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f001 fdc5 	bl	8007274 <xTaskGenericNotifyFromISR>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d002      	beq.n	80056f6 <osSignalSet+0x3e>
 80056f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80056f4:	e019      	b.n	800572a <osSignalSet+0x72>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d015      	beq.n	8005728 <osSignalSet+0x70>
 80056fc:	4b0d      	ldr	r3, [pc, #52]	; (8005734 <osSignalSet+0x7c>)
 80056fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005702:	601a      	str	r2, [r3, #0]
 8005704:	f3bf 8f4f 	dsb	sy
 8005708:	f3bf 8f6f 	isb	sy
 800570c:	e00c      	b.n	8005728 <osSignalSet+0x70>
 800570e:	6839      	ldr	r1, [r7, #0]
 8005710:	f107 0308 	add.w	r3, r7, #8
 8005714:	2201      	movs	r2, #1
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f001 fcf6 	bl	8007108 <xTaskGenericNotify>
 800571c:	4603      	mov	r3, r0
 800571e:	2b01      	cmp	r3, #1
 8005720:	d002      	beq.n	8005728 <osSignalSet+0x70>
 8005722:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005726:	e000      	b.n	800572a <osSignalSet+0x72>
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	4618      	mov	r0, r3
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	e000ed04 	.word	0xe000ed04

08005738 <osSignalWait>:
 8005738:	b590      	push	{r4, r7, lr}
 800573a:	b089      	sub	sp, #36	; 0x24
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
 8005744:	2300      	movs	r3, #0
 8005746:	617b      	str	r3, [r7, #20]
 8005748:	2300      	movs	r3, #0
 800574a:	61fb      	str	r3, [r7, #28]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005752:	d103      	bne.n	800575c <osSignalWait+0x24>
 8005754:	f04f 33ff 	mov.w	r3, #4294967295
 8005758:	61fb      	str	r3, [r7, #28]
 800575a:	e009      	b.n	8005770 <osSignalWait+0x38>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d006      	beq.n	8005770 <osSignalWait+0x38>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	61fb      	str	r3, [r7, #28]
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <osSignalWait+0x38>
 800576c:	2301      	movs	r3, #1
 800576e:	61fb      	str	r3, [r7, #28]
 8005770:	f7ff fef4 	bl	800555c <inHandlerMode>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d002      	beq.n	8005780 <osSignalWait+0x48>
 800577a:	2382      	movs	r3, #130	; 0x82
 800577c:	613b      	str	r3, [r7, #16]
 800577e:	e01b      	b.n	80057b8 <osSignalWait+0x80>
 8005780:	68b9      	ldr	r1, [r7, #8]
 8005782:	f107 0310 	add.w	r3, r7, #16
 8005786:	1d1a      	adds	r2, r3, #4
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	2000      	movs	r0, #0
 800578c:	f001 fc62 	bl	8007054 <xTaskNotifyWait>
 8005790:	4603      	mov	r3, r0
 8005792:	2b01      	cmp	r3, #1
 8005794:	d008      	beq.n	80057a8 <osSignalWait+0x70>
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d102      	bne.n	80057a2 <osSignalWait+0x6a>
 800579c:	2300      	movs	r3, #0
 800579e:	613b      	str	r3, [r7, #16]
 80057a0:	e00a      	b.n	80057b8 <osSignalWait+0x80>
 80057a2:	2340      	movs	r3, #64	; 0x40
 80057a4:	613b      	str	r3, [r7, #16]
 80057a6:	e007      	b.n	80057b8 <osSignalWait+0x80>
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	da02      	bge.n	80057b4 <osSignalWait+0x7c>
 80057ae:	2386      	movs	r3, #134	; 0x86
 80057b0:	613b      	str	r3, [r7, #16]
 80057b2:	e001      	b.n	80057b8 <osSignalWait+0x80>
 80057b4:	2308      	movs	r3, #8
 80057b6:	613b      	str	r3, [r7, #16]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	461c      	mov	r4, r3
 80057bc:	f107 0310 	add.w	r3, r7, #16
 80057c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80057c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	3724      	adds	r7, #36	; 0x24
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd90      	pop	{r4, r7, pc}

080057d0 <osMessageCreate>:
 80057d0:	b590      	push	{r4, r7, lr}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af02      	add	r7, sp, #8
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d011      	beq.n	8005806 <osMessageCreate+0x36>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00d      	beq.n	8005806 <osMessageCreate+0x36>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6818      	ldr	r0, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6859      	ldr	r1, [r3, #4]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	689a      	ldr	r2, [r3, #8]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	2400      	movs	r4, #0
 80057fc:	9400      	str	r4, [sp, #0]
 80057fe:	f000 f92b 	bl	8005a58 <xQueueGenericCreateStatic>
 8005802:	4603      	mov	r3, r0
 8005804:	e008      	b.n	8005818 <osMessageCreate+0x48>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6818      	ldr	r0, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	4619      	mov	r1, r3
 8005812:	f000 f999 	bl	8005b48 <xQueueGenericCreate>
 8005816:	4603      	mov	r3, r0
 8005818:	4618      	mov	r0, r3
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	bd90      	pop	{r4, r7, pc}

08005820 <vListInitialise>:
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f103 0208 	add.w	r2, r3, #8
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	605a      	str	r2, [r3, #4]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f04f 32ff 	mov.w	r2, #4294967295
 8005838:	609a      	str	r2, [r3, #8]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f103 0208 	add.w	r2, r3, #8
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	60da      	str	r2, [r3, #12]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f103 0208 	add.w	r2, r3, #8
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	611a      	str	r2, [r3, #16]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	601a      	str	r2, [r3, #0]
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <vListInitialiseItem>:
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	611a      	str	r2, [r3, #16]
 800586e:	bf00      	nop
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <vListInsertEnd>:
 800587a:	b480      	push	{r7}
 800587c:	b085      	sub	sp, #20
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
 8005882:	6039      	str	r1, [r7, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	60fb      	str	r3, [r7, #12]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	605a      	str	r2, [r3, #4]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	689a      	ldr	r2, [r3, #8]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	609a      	str	r2, [r3, #8]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	683a      	ldr	r2, [r7, #0]
 800589e:	605a      	str	r2, [r3, #4]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	683a      	ldr	r2, [r7, #0]
 80058a4:	609a      	str	r2, [r3, #8]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	611a      	str	r2, [r3, #16]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	1c5a      	adds	r2, r3, #1
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	bf00      	nop
 80058b8:	3714      	adds	r7, #20
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr

080058c2 <vListInsert>:
 80058c2:	b480      	push	{r7}
 80058c4:	b085      	sub	sp, #20
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
 80058ca:	6039      	str	r1, [r7, #0]
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	60bb      	str	r3, [r7, #8]
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d8:	d103      	bne.n	80058e2 <vListInsert+0x20>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	60fb      	str	r3, [r7, #12]
 80058e0:	e00c      	b.n	80058fc <vListInsert+0x3a>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	3308      	adds	r3, #8
 80058e6:	60fb      	str	r3, [r7, #12]
 80058e8:	e002      	b.n	80058f0 <vListInsert+0x2e>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	60fb      	str	r3, [r7, #12]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68ba      	ldr	r2, [r7, #8]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d2f6      	bcs.n	80058ea <vListInsert+0x28>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	605a      	str	r2, [r3, #4]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	683a      	ldr	r2, [r7, #0]
 800590a:	609a      	str	r2, [r3, #8]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	609a      	str	r2, [r3, #8]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	683a      	ldr	r2, [r7, #0]
 8005916:	605a      	str	r2, [r3, #4]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	611a      	str	r2, [r3, #16]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	1c5a      	adds	r2, r3, #1
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	601a      	str	r2, [r3, #0]
 8005928:	bf00      	nop
 800592a:	3714      	adds	r7, #20
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <uxListRemove>:
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	60fb      	str	r3, [r7, #12]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	6892      	ldr	r2, [r2, #8]
 800594a:	609a      	str	r2, [r3, #8]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	6852      	ldr	r2, [r2, #4]
 8005954:	605a      	str	r2, [r3, #4]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	429a      	cmp	r2, r3
 800595e:	d103      	bne.n	8005968 <uxListRemove+0x34>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689a      	ldr	r2, [r3, #8]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	605a      	str	r2, [r3, #4]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	611a      	str	r2, [r3, #16]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	1e5a      	subs	r2, r3, #1
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	601a      	str	r2, [r3, #0]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4618      	mov	r0, r3
 800597e:	3714      	adds	r7, #20
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <xQueueGenericReset>:
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	60fb      	str	r3, [r7, #12]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10a      	bne.n	80059b2 <xQueueGenericReset+0x2a>
 800599c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a0:	f383 8811 	msr	BASEPRI, r3
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	60bb      	str	r3, [r7, #8]
 80059ae:	bf00      	nop
 80059b0:	e7fe      	b.n	80059b0 <xQueueGenericReset+0x28>
 80059b2:	f002 fa87 	bl	8007ec4 <vPortEnterCritical>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059be:	68f9      	ldr	r1, [r7, #12]
 80059c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80059c2:	fb01 f303 	mul.w	r3, r1, r3
 80059c6:	441a      	add	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	609a      	str	r2, [r3, #8]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	639a      	str	r2, [r3, #56]	; 0x38
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	605a      	str	r2, [r3, #4]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e2:	3b01      	subs	r3, #1
 80059e4:	68f9      	ldr	r1, [r7, #12]
 80059e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80059e8:	fb01 f303 	mul.w	r3, r1, r3
 80059ec:	441a      	add	r2, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	60da      	str	r2, [r3, #12]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	22ff      	movs	r2, #255	; 0xff
 80059f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	22ff      	movs	r2, #255	; 0xff
 80059fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d114      	bne.n	8005a32 <xQueueGenericReset+0xaa>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d01a      	beq.n	8005a46 <xQueueGenericReset+0xbe>
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	3310      	adds	r3, #16
 8005a14:	4618      	mov	r0, r3
 8005a16:	f001 f925 	bl	8006c64 <xTaskRemoveFromEventList>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d012      	beq.n	8005a46 <xQueueGenericReset+0xbe>
 8005a20:	4b0c      	ldr	r3, [pc, #48]	; (8005a54 <xQueueGenericReset+0xcc>)
 8005a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a26:	601a      	str	r2, [r3, #0]
 8005a28:	f3bf 8f4f 	dsb	sy
 8005a2c:	f3bf 8f6f 	isb	sy
 8005a30:	e009      	b.n	8005a46 <xQueueGenericReset+0xbe>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	3310      	adds	r3, #16
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7ff fef2 	bl	8005820 <vListInitialise>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	3324      	adds	r3, #36	; 0x24
 8005a40:	4618      	mov	r0, r3
 8005a42:	f7ff feed 	bl	8005820 <vListInitialise>
 8005a46:	f002 fa6d 	bl	8007f24 <vPortExitCritical>
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3710      	adds	r7, #16
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	e000ed04 	.word	0xe000ed04

08005a58 <xQueueGenericCreateStatic>:
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b08e      	sub	sp, #56	; 0x38
 8005a5c:	af02      	add	r7, sp, #8
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
 8005a64:	603b      	str	r3, [r7, #0]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10a      	bne.n	8005a82 <xQueueGenericCreateStatic+0x2a>
 8005a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a70:	f383 8811 	msr	BASEPRI, r3
 8005a74:	f3bf 8f6f 	isb	sy
 8005a78:	f3bf 8f4f 	dsb	sy
 8005a7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a7e:	bf00      	nop
 8005a80:	e7fe      	b.n	8005a80 <xQueueGenericCreateStatic+0x28>
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d10a      	bne.n	8005a9e <xQueueGenericCreateStatic+0x46>
 8005a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8c:	f383 8811 	msr	BASEPRI, r3
 8005a90:	f3bf 8f6f 	isb	sy
 8005a94:	f3bf 8f4f 	dsb	sy
 8005a98:	627b      	str	r3, [r7, #36]	; 0x24
 8005a9a:	bf00      	nop
 8005a9c:	e7fe      	b.n	8005a9c <xQueueGenericCreateStatic+0x44>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d002      	beq.n	8005aaa <xQueueGenericCreateStatic+0x52>
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <xQueueGenericCreateStatic+0x56>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e000      	b.n	8005ab0 <xQueueGenericCreateStatic+0x58>
 8005aae:	2300      	movs	r3, #0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10a      	bne.n	8005aca <xQueueGenericCreateStatic+0x72>
 8005ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab8:	f383 8811 	msr	BASEPRI, r3
 8005abc:	f3bf 8f6f 	isb	sy
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	623b      	str	r3, [r7, #32]
 8005ac6:	bf00      	nop
 8005ac8:	e7fe      	b.n	8005ac8 <xQueueGenericCreateStatic+0x70>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d102      	bne.n	8005ad6 <xQueueGenericCreateStatic+0x7e>
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d101      	bne.n	8005ada <xQueueGenericCreateStatic+0x82>
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e000      	b.n	8005adc <xQueueGenericCreateStatic+0x84>
 8005ada:	2300      	movs	r3, #0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10a      	bne.n	8005af6 <xQueueGenericCreateStatic+0x9e>
 8005ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae4:	f383 8811 	msr	BASEPRI, r3
 8005ae8:	f3bf 8f6f 	isb	sy
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	61fb      	str	r3, [r7, #28]
 8005af2:	bf00      	nop
 8005af4:	e7fe      	b.n	8005af4 <xQueueGenericCreateStatic+0x9c>
 8005af6:	2348      	movs	r3, #72	; 0x48
 8005af8:	617b      	str	r3, [r7, #20]
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	2b48      	cmp	r3, #72	; 0x48
 8005afe:	d00a      	beq.n	8005b16 <xQueueGenericCreateStatic+0xbe>
 8005b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b04:	f383 8811 	msr	BASEPRI, r3
 8005b08:	f3bf 8f6f 	isb	sy
 8005b0c:	f3bf 8f4f 	dsb	sy
 8005b10:	61bb      	str	r3, [r7, #24]
 8005b12:	bf00      	nop
 8005b14:	e7fe      	b.n	8005b14 <xQueueGenericCreateStatic+0xbc>
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00d      	beq.n	8005b3e <xQueueGenericCreateStatic+0xe6>
 8005b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b2a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	4613      	mov	r3, r2
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	68b9      	ldr	r1, [r7, #8]
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f000 f83f 	bl	8005bbc <prvInitialiseNewQueue>
 8005b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b40:	4618      	mov	r0, r3
 8005b42:	3730      	adds	r7, #48	; 0x30
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <xQueueGenericCreate>:
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b08a      	sub	sp, #40	; 0x28
 8005b4c:	af02      	add	r7, sp, #8
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	4613      	mov	r3, r2
 8005b54:	71fb      	strb	r3, [r7, #7]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10a      	bne.n	8005b72 <xQueueGenericCreate+0x2a>
 8005b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b60:	f383 8811 	msr	BASEPRI, r3
 8005b64:	f3bf 8f6f 	isb	sy
 8005b68:	f3bf 8f4f 	dsb	sy
 8005b6c:	613b      	str	r3, [r7, #16]
 8005b6e:	bf00      	nop
 8005b70:	e7fe      	b.n	8005b70 <xQueueGenericCreate+0x28>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	68ba      	ldr	r2, [r7, #8]
 8005b76:	fb02 f303 	mul.w	r3, r2, r3
 8005b7a:	61fb      	str	r3, [r7, #28]
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	3348      	adds	r3, #72	; 0x48
 8005b80:	4618      	mov	r0, r3
 8005b82:	f002 fac1 	bl	8008108 <pvPortMalloc>
 8005b86:	61b8      	str	r0, [r7, #24]
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d011      	beq.n	8005bb2 <xQueueGenericCreate+0x6a>
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	617b      	str	r3, [r7, #20]
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	3348      	adds	r3, #72	; 0x48
 8005b96:	617b      	str	r3, [r7, #20]
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ba0:	79fa      	ldrb	r2, [r7, #7]
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	9300      	str	r3, [sp, #0]
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	68b9      	ldr	r1, [r7, #8]
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f000 f805 	bl	8005bbc <prvInitialiseNewQueue>
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3720      	adds	r7, #32
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <prvInitialiseNewQueue>:
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
 8005bc8:	70fb      	strb	r3, [r7, #3]
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d103      	bne.n	8005bd8 <prvInitialiseNewQueue+0x1c>
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	69ba      	ldr	r2, [r7, #24]
 8005bd4:	601a      	str	r2, [r3, #0]
 8005bd6:	e002      	b.n	8005bde <prvInitialiseNewQueue+0x22>
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	601a      	str	r2, [r3, #0]
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	63da      	str	r2, [r3, #60]	; 0x3c
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	68ba      	ldr	r2, [r7, #8]
 8005be8:	641a      	str	r2, [r3, #64]	; 0x40
 8005bea:	2101      	movs	r1, #1
 8005bec:	69b8      	ldr	r0, [r7, #24]
 8005bee:	f7ff fecb 	bl	8005988 <xQueueGenericReset>
 8005bf2:	bf00      	nop
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
	...

08005bfc <xQueueGenericSend>:
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b08e      	sub	sp, #56	; 0x38
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]
 8005c08:	603b      	str	r3, [r7, #0]
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	637b      	str	r3, [r7, #52]	; 0x34
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	633b      	str	r3, [r7, #48]	; 0x30
 8005c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d10a      	bne.n	8005c2e <xQueueGenericSend+0x32>
 8005c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1c:	f383 8811 	msr	BASEPRI, r3
 8005c20:	f3bf 8f6f 	isb	sy
 8005c24:	f3bf 8f4f 	dsb	sy
 8005c28:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c2a:	bf00      	nop
 8005c2c:	e7fe      	b.n	8005c2c <xQueueGenericSend+0x30>
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d103      	bne.n	8005c3c <xQueueGenericSend+0x40>
 8005c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d101      	bne.n	8005c40 <xQueueGenericSend+0x44>
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e000      	b.n	8005c42 <xQueueGenericSend+0x46>
 8005c40:	2300      	movs	r3, #0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10a      	bne.n	8005c5c <xQueueGenericSend+0x60>
 8005c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4a:	f383 8811 	msr	BASEPRI, r3
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f3bf 8f4f 	dsb	sy
 8005c56:	627b      	str	r3, [r7, #36]	; 0x24
 8005c58:	bf00      	nop
 8005c5a:	e7fe      	b.n	8005c5a <xQueueGenericSend+0x5e>
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d103      	bne.n	8005c6a <xQueueGenericSend+0x6e>
 8005c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d101      	bne.n	8005c6e <xQueueGenericSend+0x72>
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e000      	b.n	8005c70 <xQueueGenericSend+0x74>
 8005c6e:	2300      	movs	r3, #0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10a      	bne.n	8005c8a <xQueueGenericSend+0x8e>
 8005c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c78:	f383 8811 	msr	BASEPRI, r3
 8005c7c:	f3bf 8f6f 	isb	sy
 8005c80:	f3bf 8f4f 	dsb	sy
 8005c84:	623b      	str	r3, [r7, #32]
 8005c86:	bf00      	nop
 8005c88:	e7fe      	b.n	8005c88 <xQueueGenericSend+0x8c>
 8005c8a:	f001 f93f 	bl	8006f0c <xTaskGetSchedulerState>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d102      	bne.n	8005c9a <xQueueGenericSend+0x9e>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d101      	bne.n	8005c9e <xQueueGenericSend+0xa2>
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e000      	b.n	8005ca0 <xQueueGenericSend+0xa4>
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10a      	bne.n	8005cba <xQueueGenericSend+0xbe>
 8005ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca8:	f383 8811 	msr	BASEPRI, r3
 8005cac:	f3bf 8f6f 	isb	sy
 8005cb0:	f3bf 8f4f 	dsb	sy
 8005cb4:	61fb      	str	r3, [r7, #28]
 8005cb6:	bf00      	nop
 8005cb8:	e7fe      	b.n	8005cb8 <xQueueGenericSend+0xbc>
 8005cba:	f002 f903 	bl	8007ec4 <vPortEnterCritical>
 8005cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d302      	bcc.n	8005cd0 <xQueueGenericSend+0xd4>
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d129      	bne.n	8005d24 <xQueueGenericSend+0x128>
 8005cd0:	683a      	ldr	r2, [r7, #0]
 8005cd2:	68b9      	ldr	r1, [r7, #8]
 8005cd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cd6:	f000 fa0b 	bl	80060f0 <prvCopyDataToQueue>
 8005cda:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d010      	beq.n	8005d06 <xQueueGenericSend+0x10a>
 8005ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce6:	3324      	adds	r3, #36	; 0x24
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f000 ffbb 	bl	8006c64 <xTaskRemoveFromEventList>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d013      	beq.n	8005d1c <xQueueGenericSend+0x120>
 8005cf4:	4b3f      	ldr	r3, [pc, #252]	; (8005df4 <xQueueGenericSend+0x1f8>)
 8005cf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cfa:	601a      	str	r2, [r3, #0]
 8005cfc:	f3bf 8f4f 	dsb	sy
 8005d00:	f3bf 8f6f 	isb	sy
 8005d04:	e00a      	b.n	8005d1c <xQueueGenericSend+0x120>
 8005d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d007      	beq.n	8005d1c <xQueueGenericSend+0x120>
 8005d0c:	4b39      	ldr	r3, [pc, #228]	; (8005df4 <xQueueGenericSend+0x1f8>)
 8005d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d12:	601a      	str	r2, [r3, #0]
 8005d14:	f3bf 8f4f 	dsb	sy
 8005d18:	f3bf 8f6f 	isb	sy
 8005d1c:	f002 f902 	bl	8007f24 <vPortExitCritical>
 8005d20:	2301      	movs	r3, #1
 8005d22:	e063      	b.n	8005dec <xQueueGenericSend+0x1f0>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d103      	bne.n	8005d32 <xQueueGenericSend+0x136>
 8005d2a:	f002 f8fb 	bl	8007f24 <vPortExitCritical>
 8005d2e:	2300      	movs	r3, #0
 8005d30:	e05c      	b.n	8005dec <xQueueGenericSend+0x1f0>
 8005d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d106      	bne.n	8005d46 <xQueueGenericSend+0x14a>
 8005d38:	f107 0314 	add.w	r3, r7, #20
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f000 fff3 	bl	8006d28 <vTaskInternalSetTimeOutState>
 8005d42:	2301      	movs	r3, #1
 8005d44:	637b      	str	r3, [r7, #52]	; 0x34
 8005d46:	f002 f8ed 	bl	8007f24 <vPortExitCritical>
 8005d4a:	f000 fd6d 	bl	8006828 <vTaskSuspendAll>
 8005d4e:	f002 f8b9 	bl	8007ec4 <vPortEnterCritical>
 8005d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d58:	b25b      	sxtb	r3, r3
 8005d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d5e:	d103      	bne.n	8005d68 <xQueueGenericSend+0x16c>
 8005d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d6e:	b25b      	sxtb	r3, r3
 8005d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d74:	d103      	bne.n	8005d7e <xQueueGenericSend+0x182>
 8005d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d7e:	f002 f8d1 	bl	8007f24 <vPortExitCritical>
 8005d82:	1d3a      	adds	r2, r7, #4
 8005d84:	f107 0314 	add.w	r3, r7, #20
 8005d88:	4611      	mov	r1, r2
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f000 ffe2 	bl	8006d54 <xTaskCheckForTimeOut>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d124      	bne.n	8005de0 <xQueueGenericSend+0x1e4>
 8005d96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d98:	f000 faa2 	bl	80062e0 <prvIsQueueFull>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d018      	beq.n	8005dd4 <xQueueGenericSend+0x1d8>
 8005da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da4:	3310      	adds	r3, #16
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	4611      	mov	r1, r2
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 ff0a 	bl	8006bc4 <vTaskPlaceOnEventList>
 8005db0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005db2:	f000 fa2d 	bl	8006210 <prvUnlockQueue>
 8005db6:	f000 fd45 	bl	8006844 <xTaskResumeAll>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f47f af7c 	bne.w	8005cba <xQueueGenericSend+0xbe>
 8005dc2:	4b0c      	ldr	r3, [pc, #48]	; (8005df4 <xQueueGenericSend+0x1f8>)
 8005dc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dc8:	601a      	str	r2, [r3, #0]
 8005dca:	f3bf 8f4f 	dsb	sy
 8005dce:	f3bf 8f6f 	isb	sy
 8005dd2:	e772      	b.n	8005cba <xQueueGenericSend+0xbe>
 8005dd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dd6:	f000 fa1b 	bl	8006210 <prvUnlockQueue>
 8005dda:	f000 fd33 	bl	8006844 <xTaskResumeAll>
 8005dde:	e76c      	b.n	8005cba <xQueueGenericSend+0xbe>
 8005de0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005de2:	f000 fa15 	bl	8006210 <prvUnlockQueue>
 8005de6:	f000 fd2d 	bl	8006844 <xTaskResumeAll>
 8005dea:	2300      	movs	r3, #0
 8005dec:	4618      	mov	r0, r3
 8005dee:	3738      	adds	r7, #56	; 0x38
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	e000ed04 	.word	0xe000ed04

08005df8 <xQueueGenericSendFromISR>:
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b090      	sub	sp, #64	; 0x40
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
 8005e04:	603b      	str	r3, [r7, #0]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10a      	bne.n	8005e26 <xQueueGenericSendFromISR+0x2e>
 8005e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e22:	bf00      	nop
 8005e24:	e7fe      	b.n	8005e24 <xQueueGenericSendFromISR+0x2c>
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d103      	bne.n	8005e34 <xQueueGenericSendFromISR+0x3c>
 8005e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d101      	bne.n	8005e38 <xQueueGenericSendFromISR+0x40>
 8005e34:	2301      	movs	r3, #1
 8005e36:	e000      	b.n	8005e3a <xQueueGenericSendFromISR+0x42>
 8005e38:	2300      	movs	r3, #0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d10a      	bne.n	8005e54 <xQueueGenericSendFromISR+0x5c>
 8005e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e42:	f383 8811 	msr	BASEPRI, r3
 8005e46:	f3bf 8f6f 	isb	sy
 8005e4a:	f3bf 8f4f 	dsb	sy
 8005e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8005e50:	bf00      	nop
 8005e52:	e7fe      	b.n	8005e52 <xQueueGenericSendFromISR+0x5a>
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d103      	bne.n	8005e62 <xQueueGenericSendFromISR+0x6a>
 8005e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d101      	bne.n	8005e66 <xQueueGenericSendFromISR+0x6e>
 8005e62:	2301      	movs	r3, #1
 8005e64:	e000      	b.n	8005e68 <xQueueGenericSendFromISR+0x70>
 8005e66:	2300      	movs	r3, #0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d10a      	bne.n	8005e82 <xQueueGenericSendFromISR+0x8a>
 8005e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e70:	f383 8811 	msr	BASEPRI, r3
 8005e74:	f3bf 8f6f 	isb	sy
 8005e78:	f3bf 8f4f 	dsb	sy
 8005e7c:	623b      	str	r3, [r7, #32]
 8005e7e:	bf00      	nop
 8005e80:	e7fe      	b.n	8005e80 <xQueueGenericSendFromISR+0x88>
 8005e82:	f002 f901 	bl	8008088 <vPortValidateInterruptPriority>
 8005e86:	f3ef 8211 	mrs	r2, BASEPRI
 8005e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8e:	f383 8811 	msr	BASEPRI, r3
 8005e92:	f3bf 8f6f 	isb	sy
 8005e96:	f3bf 8f4f 	dsb	sy
 8005e9a:	61fa      	str	r2, [r7, #28]
 8005e9c:	61bb      	str	r3, [r7, #24]
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d302      	bcc.n	8005eb4 <xQueueGenericSendFromISR+0xbc>
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d12f      	bne.n	8005f14 <xQueueGenericSendFromISR+0x11c>
 8005eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ec4:	683a      	ldr	r2, [r7, #0]
 8005ec6:	68b9      	ldr	r1, [r7, #8]
 8005ec8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005eca:	f000 f911 	bl	80060f0 <prvCopyDataToQueue>
 8005ece:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed6:	d112      	bne.n	8005efe <xQueueGenericSendFromISR+0x106>
 8005ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d016      	beq.n	8005f0e <xQueueGenericSendFromISR+0x116>
 8005ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee2:	3324      	adds	r3, #36	; 0x24
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f000 febd 	bl	8006c64 <xTaskRemoveFromEventList>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00e      	beq.n	8005f0e <xQueueGenericSendFromISR+0x116>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00b      	beq.n	8005f0e <xQueueGenericSendFromISR+0x116>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	601a      	str	r2, [r3, #0]
 8005efc:	e007      	b.n	8005f0e <xQueueGenericSendFromISR+0x116>
 8005efe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005f02:	3301      	adds	r3, #1
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	b25a      	sxtb	r2, r3
 8005f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f0e:	2301      	movs	r3, #1
 8005f10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f12:	e001      	b.n	8005f18 <xQueueGenericSendFromISR+0x120>
 8005f14:	2300      	movs	r3, #0
 8005f16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f1a:	617b      	str	r3, [r7, #20]
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	f383 8811 	msr	BASEPRI, r3
 8005f22:	bf00      	nop
 8005f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f26:	4618      	mov	r0, r3
 8005f28:	3740      	adds	r7, #64	; 0x40
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
	...

08005f30 <xQueueReceive>:
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b08c      	sub	sp, #48	; 0x30
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d10a      	bne.n	8005f60 <xQueueReceive+0x30>
 8005f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4e:	f383 8811 	msr	BASEPRI, r3
 8005f52:	f3bf 8f6f 	isb	sy
 8005f56:	f3bf 8f4f 	dsb	sy
 8005f5a:	623b      	str	r3, [r7, #32]
 8005f5c:	bf00      	nop
 8005f5e:	e7fe      	b.n	8005f5e <xQueueReceive+0x2e>
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d103      	bne.n	8005f6e <xQueueReceive+0x3e>
 8005f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d101      	bne.n	8005f72 <xQueueReceive+0x42>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e000      	b.n	8005f74 <xQueueReceive+0x44>
 8005f72:	2300      	movs	r3, #0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10a      	bne.n	8005f8e <xQueueReceive+0x5e>
 8005f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7c:	f383 8811 	msr	BASEPRI, r3
 8005f80:	f3bf 8f6f 	isb	sy
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	61fb      	str	r3, [r7, #28]
 8005f8a:	bf00      	nop
 8005f8c:	e7fe      	b.n	8005f8c <xQueueReceive+0x5c>
 8005f8e:	f000 ffbd 	bl	8006f0c <xTaskGetSchedulerState>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d102      	bne.n	8005f9e <xQueueReceive+0x6e>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d101      	bne.n	8005fa2 <xQueueReceive+0x72>
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e000      	b.n	8005fa4 <xQueueReceive+0x74>
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d10a      	bne.n	8005fbe <xQueueReceive+0x8e>
 8005fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fac:	f383 8811 	msr	BASEPRI, r3
 8005fb0:	f3bf 8f6f 	isb	sy
 8005fb4:	f3bf 8f4f 	dsb	sy
 8005fb8:	61bb      	str	r3, [r7, #24]
 8005fba:	bf00      	nop
 8005fbc:	e7fe      	b.n	8005fbc <xQueueReceive+0x8c>
 8005fbe:	f001 ff81 	bl	8007ec4 <vPortEnterCritical>
 8005fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8005fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d01f      	beq.n	800600e <xQueueReceive+0xde>
 8005fce:	68b9      	ldr	r1, [r7, #8]
 8005fd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fd2:	f000 f8f7 	bl	80061c4 <prvCopyDataFromQueue>
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd8:	1e5a      	subs	r2, r3, #1
 8005fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fdc:	639a      	str	r2, [r3, #56]	; 0x38
 8005fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00f      	beq.n	8006006 <xQueueReceive+0xd6>
 8005fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe8:	3310      	adds	r3, #16
 8005fea:	4618      	mov	r0, r3
 8005fec:	f000 fe3a 	bl	8006c64 <xTaskRemoveFromEventList>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d007      	beq.n	8006006 <xQueueReceive+0xd6>
 8005ff6:	4b3d      	ldr	r3, [pc, #244]	; (80060ec <xQueueReceive+0x1bc>)
 8005ff8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ffc:	601a      	str	r2, [r3, #0]
 8005ffe:	f3bf 8f4f 	dsb	sy
 8006002:	f3bf 8f6f 	isb	sy
 8006006:	f001 ff8d 	bl	8007f24 <vPortExitCritical>
 800600a:	2301      	movs	r3, #1
 800600c:	e069      	b.n	80060e2 <xQueueReceive+0x1b2>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d103      	bne.n	800601c <xQueueReceive+0xec>
 8006014:	f001 ff86 	bl	8007f24 <vPortExitCritical>
 8006018:	2300      	movs	r3, #0
 800601a:	e062      	b.n	80060e2 <xQueueReceive+0x1b2>
 800601c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601e:	2b00      	cmp	r3, #0
 8006020:	d106      	bne.n	8006030 <xQueueReceive+0x100>
 8006022:	f107 0310 	add.w	r3, r7, #16
 8006026:	4618      	mov	r0, r3
 8006028:	f000 fe7e 	bl	8006d28 <vTaskInternalSetTimeOutState>
 800602c:	2301      	movs	r3, #1
 800602e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006030:	f001 ff78 	bl	8007f24 <vPortExitCritical>
 8006034:	f000 fbf8 	bl	8006828 <vTaskSuspendAll>
 8006038:	f001 ff44 	bl	8007ec4 <vPortEnterCritical>
 800603c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800603e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006042:	b25b      	sxtb	r3, r3
 8006044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006048:	d103      	bne.n	8006052 <xQueueReceive+0x122>
 800604a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006054:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006058:	b25b      	sxtb	r3, r3
 800605a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800605e:	d103      	bne.n	8006068 <xQueueReceive+0x138>
 8006060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006062:	2200      	movs	r2, #0
 8006064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006068:	f001 ff5c 	bl	8007f24 <vPortExitCritical>
 800606c:	1d3a      	adds	r2, r7, #4
 800606e:	f107 0310 	add.w	r3, r7, #16
 8006072:	4611      	mov	r1, r2
 8006074:	4618      	mov	r0, r3
 8006076:	f000 fe6d 	bl	8006d54 <xTaskCheckForTimeOut>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d123      	bne.n	80060c8 <xQueueReceive+0x198>
 8006080:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006082:	f000 f917 	bl	80062b4 <prvIsQueueEmpty>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d017      	beq.n	80060bc <xQueueReceive+0x18c>
 800608c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608e:	3324      	adds	r3, #36	; 0x24
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	4611      	mov	r1, r2
 8006094:	4618      	mov	r0, r3
 8006096:	f000 fd95 	bl	8006bc4 <vTaskPlaceOnEventList>
 800609a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800609c:	f000 f8b8 	bl	8006210 <prvUnlockQueue>
 80060a0:	f000 fbd0 	bl	8006844 <xTaskResumeAll>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d189      	bne.n	8005fbe <xQueueReceive+0x8e>
 80060aa:	4b10      	ldr	r3, [pc, #64]	; (80060ec <xQueueReceive+0x1bc>)
 80060ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060b0:	601a      	str	r2, [r3, #0]
 80060b2:	f3bf 8f4f 	dsb	sy
 80060b6:	f3bf 8f6f 	isb	sy
 80060ba:	e780      	b.n	8005fbe <xQueueReceive+0x8e>
 80060bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060be:	f000 f8a7 	bl	8006210 <prvUnlockQueue>
 80060c2:	f000 fbbf 	bl	8006844 <xTaskResumeAll>
 80060c6:	e77a      	b.n	8005fbe <xQueueReceive+0x8e>
 80060c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060ca:	f000 f8a1 	bl	8006210 <prvUnlockQueue>
 80060ce:	f000 fbb9 	bl	8006844 <xTaskResumeAll>
 80060d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060d4:	f000 f8ee 	bl	80062b4 <prvIsQueueEmpty>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f43f af6f 	beq.w	8005fbe <xQueueReceive+0x8e>
 80060e0:	2300      	movs	r3, #0
 80060e2:	4618      	mov	r0, r3
 80060e4:	3730      	adds	r7, #48	; 0x30
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	e000ed04 	.word	0xe000ed04

080060f0 <prvCopyDataToQueue>:
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
 80060fc:	2300      	movs	r3, #0
 80060fe:	617b      	str	r3, [r7, #20]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006104:	613b      	str	r3, [r7, #16]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10d      	bne.n	800612a <prvCopyDataToQueue+0x3a>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d14d      	bne.n	80061b2 <prvCopyDataToQueue+0xc2>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	4618      	mov	r0, r3
 800611c:	f000 ff14 	bl	8006f48 <xTaskPriorityDisinherit>
 8006120:	6178      	str	r0, [r7, #20]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	609a      	str	r2, [r3, #8]
 8006128:	e043      	b.n	80061b2 <prvCopyDataToQueue+0xc2>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d119      	bne.n	8006164 <prvCopyDataToQueue+0x74>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6858      	ldr	r0, [r3, #4]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006138:	461a      	mov	r2, r3
 800613a:	68b9      	ldr	r1, [r7, #8]
 800613c:	f002 f9f8 	bl	8008530 <memcpy>
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	685a      	ldr	r2, [r3, #4]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006148:	441a      	add	r2, r3
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	605a      	str	r2, [r3, #4]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	685a      	ldr	r2, [r3, #4]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	429a      	cmp	r2, r3
 8006158:	d32b      	bcc.n	80061b2 <prvCopyDataToQueue+0xc2>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	605a      	str	r2, [r3, #4]
 8006162:	e026      	b.n	80061b2 <prvCopyDataToQueue+0xc2>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	68d8      	ldr	r0, [r3, #12]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616c:	461a      	mov	r2, r3
 800616e:	68b9      	ldr	r1, [r7, #8]
 8006170:	f002 f9de 	bl	8008530 <memcpy>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	68da      	ldr	r2, [r3, #12]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617c:	425b      	negs	r3, r3
 800617e:	441a      	add	r2, r3
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	60da      	str	r2, [r3, #12]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	68da      	ldr	r2, [r3, #12]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	429a      	cmp	r2, r3
 800618e:	d207      	bcs.n	80061a0 <prvCopyDataToQueue+0xb0>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	689a      	ldr	r2, [r3, #8]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006198:	425b      	negs	r3, r3
 800619a:	441a      	add	r2, r3
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	60da      	str	r2, [r3, #12]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d105      	bne.n	80061b2 <prvCopyDataToQueue+0xc2>
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d002      	beq.n	80061b2 <prvCopyDataToQueue+0xc2>
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	3b01      	subs	r3, #1
 80061b0:	613b      	str	r3, [r7, #16]
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	1c5a      	adds	r2, r3, #1
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	639a      	str	r2, [r3, #56]	; 0x38
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	4618      	mov	r0, r3
 80061be:	3718      	adds	r7, #24
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <prvCopyDataFromQueue>:
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d018      	beq.n	8006208 <prvCopyDataFromQueue+0x44>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	68da      	ldr	r2, [r3, #12]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061de:	441a      	add	r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	60da      	str	r2, [r3, #12]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	68da      	ldr	r2, [r3, #12]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d303      	bcc.n	80061f8 <prvCopyDataFromQueue+0x34>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	60da      	str	r2, [r3, #12]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	68d9      	ldr	r1, [r3, #12]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006200:	461a      	mov	r2, r3
 8006202:	6838      	ldr	r0, [r7, #0]
 8006204:	f002 f994 	bl	8008530 <memcpy>
 8006208:	bf00      	nop
 800620a:	3708      	adds	r7, #8
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <prvUnlockQueue>:
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	f001 fe54 	bl	8007ec4 <vPortEnterCritical>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006222:	73fb      	strb	r3, [r7, #15]
 8006224:	e011      	b.n	800624a <prvUnlockQueue+0x3a>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622a:	2b00      	cmp	r3, #0
 800622c:	d012      	beq.n	8006254 <prvUnlockQueue+0x44>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	3324      	adds	r3, #36	; 0x24
 8006232:	4618      	mov	r0, r3
 8006234:	f000 fd16 	bl	8006c64 <xTaskRemoveFromEventList>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d001      	beq.n	8006242 <prvUnlockQueue+0x32>
 800623e:	f000 fde3 	bl	8006e08 <vTaskMissedYield>
 8006242:	7bfb      	ldrb	r3, [r7, #15]
 8006244:	3b01      	subs	r3, #1
 8006246:	b2db      	uxtb	r3, r3
 8006248:	73fb      	strb	r3, [r7, #15]
 800624a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800624e:	2b00      	cmp	r3, #0
 8006250:	dce9      	bgt.n	8006226 <prvUnlockQueue+0x16>
 8006252:	e000      	b.n	8006256 <prvUnlockQueue+0x46>
 8006254:	bf00      	nop
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	22ff      	movs	r2, #255	; 0xff
 800625a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800625e:	f001 fe61 	bl	8007f24 <vPortExitCritical>
 8006262:	f001 fe2f 	bl	8007ec4 <vPortEnterCritical>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800626c:	73bb      	strb	r3, [r7, #14]
 800626e:	e011      	b.n	8006294 <prvUnlockQueue+0x84>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d012      	beq.n	800629e <prvUnlockQueue+0x8e>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	3310      	adds	r3, #16
 800627c:	4618      	mov	r0, r3
 800627e:	f000 fcf1 	bl	8006c64 <xTaskRemoveFromEventList>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d001      	beq.n	800628c <prvUnlockQueue+0x7c>
 8006288:	f000 fdbe 	bl	8006e08 <vTaskMissedYield>
 800628c:	7bbb      	ldrb	r3, [r7, #14]
 800628e:	3b01      	subs	r3, #1
 8006290:	b2db      	uxtb	r3, r3
 8006292:	73bb      	strb	r3, [r7, #14]
 8006294:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006298:	2b00      	cmp	r3, #0
 800629a:	dce9      	bgt.n	8006270 <prvUnlockQueue+0x60>
 800629c:	e000      	b.n	80062a0 <prvUnlockQueue+0x90>
 800629e:	bf00      	nop
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	22ff      	movs	r2, #255	; 0xff
 80062a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062a8:	f001 fe3c 	bl	8007f24 <vPortExitCritical>
 80062ac:	bf00      	nop
 80062ae:	3710      	adds	r7, #16
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <prvIsQueueEmpty>:
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	f001 fe02 	bl	8007ec4 <vPortEnterCritical>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d102      	bne.n	80062ce <prvIsQueueEmpty+0x1a>
 80062c8:	2301      	movs	r3, #1
 80062ca:	60fb      	str	r3, [r7, #12]
 80062cc:	e001      	b.n	80062d2 <prvIsQueueEmpty+0x1e>
 80062ce:	2300      	movs	r3, #0
 80062d0:	60fb      	str	r3, [r7, #12]
 80062d2:	f001 fe27 	bl	8007f24 <vPortExitCritical>
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	4618      	mov	r0, r3
 80062da:	3710      	adds	r7, #16
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <prvIsQueueFull>:
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	f001 fdec 	bl	8007ec4 <vPortEnterCritical>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d102      	bne.n	80062fe <prvIsQueueFull+0x1e>
 80062f8:	2301      	movs	r3, #1
 80062fa:	60fb      	str	r3, [r7, #12]
 80062fc:	e001      	b.n	8006302 <prvIsQueueFull+0x22>
 80062fe:	2300      	movs	r3, #0
 8006300:	60fb      	str	r3, [r7, #12]
 8006302:	f001 fe0f 	bl	8007f24 <vPortExitCritical>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	4618      	mov	r0, r3
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <vQueueAddToRegistry>:
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
 800631a:	2300      	movs	r3, #0
 800631c:	60fb      	str	r3, [r7, #12]
 800631e:	e014      	b.n	800634a <vQueueAddToRegistry+0x3a>
 8006320:	4a0f      	ldr	r2, [pc, #60]	; (8006360 <vQueueAddToRegistry+0x50>)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d10b      	bne.n	8006344 <vQueueAddToRegistry+0x34>
 800632c:	490c      	ldr	r1, [pc, #48]	; (8006360 <vQueueAddToRegistry+0x50>)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	683a      	ldr	r2, [r7, #0]
 8006332:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8006336:	4a0a      	ldr	r2, [pc, #40]	; (8006360 <vQueueAddToRegistry+0x50>)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	00db      	lsls	r3, r3, #3
 800633c:	4413      	add	r3, r2
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	605a      	str	r2, [r3, #4]
 8006342:	e006      	b.n	8006352 <vQueueAddToRegistry+0x42>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	3301      	adds	r3, #1
 8006348:	60fb      	str	r3, [r7, #12]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2b07      	cmp	r3, #7
 800634e:	d9e7      	bls.n	8006320 <vQueueAddToRegistry+0x10>
 8006350:	bf00      	nop
 8006352:	bf00      	nop
 8006354:	3714      	adds	r7, #20
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	20000898 	.word	0x20000898

08006364 <vQueueWaitForMessageRestricted>:
 8006364:	b580      	push	{r7, lr}
 8006366:	b086      	sub	sp, #24
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	607a      	str	r2, [r7, #4]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	617b      	str	r3, [r7, #20]
 8006374:	f001 fda6 	bl	8007ec4 <vPortEnterCritical>
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800637e:	b25b      	sxtb	r3, r3
 8006380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006384:	d103      	bne.n	800638e <vQueueWaitForMessageRestricted+0x2a>
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006394:	b25b      	sxtb	r3, r3
 8006396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800639a:	d103      	bne.n	80063a4 <vQueueWaitForMessageRestricted+0x40>
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063a4:	f001 fdbe 	bl	8007f24 <vPortExitCritical>
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d106      	bne.n	80063be <vQueueWaitForMessageRestricted+0x5a>
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	3324      	adds	r3, #36	; 0x24
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	68b9      	ldr	r1, [r7, #8]
 80063b8:	4618      	mov	r0, r3
 80063ba:	f000 fc27 	bl	8006c0c <vTaskPlaceOnEventListRestricted>
 80063be:	6978      	ldr	r0, [r7, #20]
 80063c0:	f7ff ff26 	bl	8006210 <prvUnlockQueue>
 80063c4:	bf00      	nop
 80063c6:	3718      	adds	r7, #24
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b08e      	sub	sp, #56	; 0x38
 80063d0:	af04      	add	r7, sp, #16
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
 80063d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80063da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d10a      	bne.n	80063f6 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80063e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e4:	f383 8811 	msr	BASEPRI, r3
 80063e8:	f3bf 8f6f 	isb	sy
 80063ec:	f3bf 8f4f 	dsb	sy
 80063f0:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80063f2:	bf00      	nop
 80063f4:	e7fe      	b.n	80063f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80063f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d10a      	bne.n	8006412 <xTaskCreateStatic+0x46>
	__asm volatile
 80063fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006400:	f383 8811 	msr	BASEPRI, r3
 8006404:	f3bf 8f6f 	isb	sy
 8006408:	f3bf 8f4f 	dsb	sy
 800640c:	61fb      	str	r3, [r7, #28]
}
 800640e:	bf00      	nop
 8006410:	e7fe      	b.n	8006410 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006412:	2354      	movs	r3, #84	; 0x54
 8006414:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	2b54      	cmp	r3, #84	; 0x54
 800641a:	d00a      	beq.n	8006432 <xTaskCreateStatic+0x66>
	__asm volatile
 800641c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006420:	f383 8811 	msr	BASEPRI, r3
 8006424:	f3bf 8f6f 	isb	sy
 8006428:	f3bf 8f4f 	dsb	sy
 800642c:	61bb      	str	r3, [r7, #24]
}
 800642e:	bf00      	nop
 8006430:	e7fe      	b.n	8006430 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006432:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006436:	2b00      	cmp	r3, #0
 8006438:	d01e      	beq.n	8006478 <xTaskCreateStatic+0xac>
 800643a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800643c:	2b00      	cmp	r3, #0
 800643e:	d01b      	beq.n	8006478 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006442:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006446:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006448:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800644a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644c:	2202      	movs	r2, #2
 800644e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006452:	2300      	movs	r3, #0
 8006454:	9303      	str	r3, [sp, #12]
 8006456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006458:	9302      	str	r3, [sp, #8]
 800645a:	f107 0314 	add.w	r3, r7, #20
 800645e:	9301      	str	r3, [sp, #4]
 8006460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006462:	9300      	str	r3, [sp, #0]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	68b9      	ldr	r1, [r7, #8]
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f000 f850 	bl	8006510 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006470:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006472:	f000 f8d5 	bl	8006620 <prvAddNewTaskToReadyList>
 8006476:	e001      	b.n	800647c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006478:	2300      	movs	r3, #0
 800647a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800647c:	697b      	ldr	r3, [r7, #20]
	}
 800647e:	4618      	mov	r0, r3
 8006480:	3728      	adds	r7, #40	; 0x28
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006486:	b580      	push	{r7, lr}
 8006488:	b08c      	sub	sp, #48	; 0x30
 800648a:	af04      	add	r7, sp, #16
 800648c:	60f8      	str	r0, [r7, #12]
 800648e:	60b9      	str	r1, [r7, #8]
 8006490:	603b      	str	r3, [r7, #0]
 8006492:	4613      	mov	r3, r2
 8006494:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006496:	88fb      	ldrh	r3, [r7, #6]
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	4618      	mov	r0, r3
 800649c:	f001 fe34 	bl	8008108 <pvPortMalloc>
 80064a0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00e      	beq.n	80064c6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80064a8:	2054      	movs	r0, #84	; 0x54
 80064aa:	f001 fe2d 	bl	8008108 <pvPortMalloc>
 80064ae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d003      	beq.n	80064be <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	697a      	ldr	r2, [r7, #20]
 80064ba:	631a      	str	r2, [r3, #48]	; 0x30
 80064bc:	e005      	b.n	80064ca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80064be:	6978      	ldr	r0, [r7, #20]
 80064c0:	f001 feee 	bl	80082a0 <vPortFree>
 80064c4:	e001      	b.n	80064ca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80064c6:	2300      	movs	r3, #0
 80064c8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d017      	beq.n	8006500 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80064d8:	88fa      	ldrh	r2, [r7, #6]
 80064da:	2300      	movs	r3, #0
 80064dc:	9303      	str	r3, [sp, #12]
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	9302      	str	r3, [sp, #8]
 80064e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e4:	9301      	str	r3, [sp, #4]
 80064e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e8:	9300      	str	r3, [sp, #0]
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	68b9      	ldr	r1, [r7, #8]
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	f000 f80e 	bl	8006510 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064f4:	69f8      	ldr	r0, [r7, #28]
 80064f6:	f000 f893 	bl	8006620 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80064fa:	2301      	movs	r3, #1
 80064fc:	61bb      	str	r3, [r7, #24]
 80064fe:	e002      	b.n	8006506 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006500:	f04f 33ff 	mov.w	r3, #4294967295
 8006504:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006506:	69bb      	ldr	r3, [r7, #24]
	}
 8006508:	4618      	mov	r0, r3
 800650a:	3720      	adds	r7, #32
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b088      	sub	sp, #32
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	607a      	str	r2, [r7, #4]
 800651c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800651e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006528:	3b01      	subs	r3, #1
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	4413      	add	r3, r2
 800652e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	f023 0307 	bic.w	r3, r3, #7
 8006536:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	f003 0307 	and.w	r3, r3, #7
 800653e:	2b00      	cmp	r3, #0
 8006540:	d00a      	beq.n	8006558 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006546:	f383 8811 	msr	BASEPRI, r3
 800654a:	f3bf 8f6f 	isb	sy
 800654e:	f3bf 8f4f 	dsb	sy
 8006552:	617b      	str	r3, [r7, #20]
}
 8006554:	bf00      	nop
 8006556:	e7fe      	b.n	8006556 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d01f      	beq.n	800659e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800655e:	2300      	movs	r3, #0
 8006560:	61fb      	str	r3, [r7, #28]
 8006562:	e012      	b.n	800658a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006564:	68ba      	ldr	r2, [r7, #8]
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	4413      	add	r3, r2
 800656a:	7819      	ldrb	r1, [r3, #0]
 800656c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	4413      	add	r3, r2
 8006572:	3334      	adds	r3, #52	; 0x34
 8006574:	460a      	mov	r2, r1
 8006576:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006578:	68ba      	ldr	r2, [r7, #8]
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	4413      	add	r3, r2
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d006      	beq.n	8006592 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	3301      	adds	r3, #1
 8006588:	61fb      	str	r3, [r7, #28]
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	2b0f      	cmp	r3, #15
 800658e:	d9e9      	bls.n	8006564 <prvInitialiseNewTask+0x54>
 8006590:	e000      	b.n	8006594 <prvInitialiseNewTask+0x84>
			{
				break;
 8006592:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006596:	2200      	movs	r2, #0
 8006598:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800659c:	e003      	b.n	80065a6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800659e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80065a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a8:	2b06      	cmp	r3, #6
 80065aa:	d901      	bls.n	80065b0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80065ac:	2306      	movs	r3, #6
 80065ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80065b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80065b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065ba:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80065bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065be:	2200      	movs	r2, #0
 80065c0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80065c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c4:	3304      	adds	r3, #4
 80065c6:	4618      	mov	r0, r3
 80065c8:	f7ff f94a 	bl	8005860 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80065cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ce:	3318      	adds	r3, #24
 80065d0:	4618      	mov	r0, r3
 80065d2:	f7ff f945 	bl	8005860 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80065d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065de:	f1c3 0207 	rsb	r2, r3, #7
 80065e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80065e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80065ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ee:	2200      	movs	r2, #0
 80065f0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80065f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80065fa:	683a      	ldr	r2, [r7, #0]
 80065fc:	68f9      	ldr	r1, [r7, #12]
 80065fe:	69b8      	ldr	r0, [r7, #24]
 8006600:	f001 fb32 	bl	8007c68 <pxPortInitialiseStack>
 8006604:	4602      	mov	r2, r0
 8006606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006608:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800660a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800660c:	2b00      	cmp	r3, #0
 800660e:	d002      	beq.n	8006616 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006614:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006616:	bf00      	nop
 8006618:	3720      	adds	r7, #32
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
	...

08006620 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006628:	f001 fc4c 	bl	8007ec4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800662c:	4b2a      	ldr	r3, [pc, #168]	; (80066d8 <prvAddNewTaskToReadyList+0xb8>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	3301      	adds	r3, #1
 8006632:	4a29      	ldr	r2, [pc, #164]	; (80066d8 <prvAddNewTaskToReadyList+0xb8>)
 8006634:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006636:	4b29      	ldr	r3, [pc, #164]	; (80066dc <prvAddNewTaskToReadyList+0xbc>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d109      	bne.n	8006652 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800663e:	4a27      	ldr	r2, [pc, #156]	; (80066dc <prvAddNewTaskToReadyList+0xbc>)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006644:	4b24      	ldr	r3, [pc, #144]	; (80066d8 <prvAddNewTaskToReadyList+0xb8>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d110      	bne.n	800666e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800664c:	f000 fc00 	bl	8006e50 <prvInitialiseTaskLists>
 8006650:	e00d      	b.n	800666e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006652:	4b23      	ldr	r3, [pc, #140]	; (80066e0 <prvAddNewTaskToReadyList+0xc0>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d109      	bne.n	800666e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800665a:	4b20      	ldr	r3, [pc, #128]	; (80066dc <prvAddNewTaskToReadyList+0xbc>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006664:	429a      	cmp	r2, r3
 8006666:	d802      	bhi.n	800666e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006668:	4a1c      	ldr	r2, [pc, #112]	; (80066dc <prvAddNewTaskToReadyList+0xbc>)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800666e:	4b1d      	ldr	r3, [pc, #116]	; (80066e4 <prvAddNewTaskToReadyList+0xc4>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	3301      	adds	r3, #1
 8006674:	4a1b      	ldr	r2, [pc, #108]	; (80066e4 <prvAddNewTaskToReadyList+0xc4>)
 8006676:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667c:	2201      	movs	r2, #1
 800667e:	409a      	lsls	r2, r3
 8006680:	4b19      	ldr	r3, [pc, #100]	; (80066e8 <prvAddNewTaskToReadyList+0xc8>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4313      	orrs	r3, r2
 8006686:	4a18      	ldr	r2, [pc, #96]	; (80066e8 <prvAddNewTaskToReadyList+0xc8>)
 8006688:	6013      	str	r3, [r2, #0]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800668e:	4613      	mov	r3, r2
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	4413      	add	r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	4a15      	ldr	r2, [pc, #84]	; (80066ec <prvAddNewTaskToReadyList+0xcc>)
 8006698:	441a      	add	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	3304      	adds	r3, #4
 800669e:	4619      	mov	r1, r3
 80066a0:	4610      	mov	r0, r2
 80066a2:	f7ff f8ea 	bl	800587a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80066a6:	f001 fc3d 	bl	8007f24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80066aa:	4b0d      	ldr	r3, [pc, #52]	; (80066e0 <prvAddNewTaskToReadyList+0xc0>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00e      	beq.n	80066d0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80066b2:	4b0a      	ldr	r3, [pc, #40]	; (80066dc <prvAddNewTaskToReadyList+0xbc>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066bc:	429a      	cmp	r2, r3
 80066be:	d207      	bcs.n	80066d0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80066c0:	4b0b      	ldr	r3, [pc, #44]	; (80066f0 <prvAddNewTaskToReadyList+0xd0>)
 80066c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066c6:	601a      	str	r2, [r3, #0]
 80066c8:	f3bf 8f4f 	dsb	sy
 80066cc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066d0:	bf00      	nop
 80066d2:	3708      	adds	r7, #8
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	200009ac 	.word	0x200009ac
 80066dc:	200008d8 	.word	0x200008d8
 80066e0:	200009b8 	.word	0x200009b8
 80066e4:	200009c8 	.word	0x200009c8
 80066e8:	200009b4 	.word	0x200009b4
 80066ec:	200008dc 	.word	0x200008dc
 80066f0:	e000ed04 	.word	0xe000ed04

080066f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80066fc:	2300      	movs	r3, #0
 80066fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d017      	beq.n	8006736 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006706:	4b13      	ldr	r3, [pc, #76]	; (8006754 <vTaskDelay+0x60>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00a      	beq.n	8006724 <vTaskDelay+0x30>
	__asm volatile
 800670e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006712:	f383 8811 	msr	BASEPRI, r3
 8006716:	f3bf 8f6f 	isb	sy
 800671a:	f3bf 8f4f 	dsb	sy
 800671e:	60bb      	str	r3, [r7, #8]
}
 8006720:	bf00      	nop
 8006722:	e7fe      	b.n	8006722 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006724:	f000 f880 	bl	8006828 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006728:	2100      	movs	r1, #0
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 fe7c 	bl	8007428 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006730:	f000 f888 	bl	8006844 <xTaskResumeAll>
 8006734:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d107      	bne.n	800674c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800673c:	4b06      	ldr	r3, [pc, #24]	; (8006758 <vTaskDelay+0x64>)
 800673e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006742:	601a      	str	r2, [r3, #0]
 8006744:	f3bf 8f4f 	dsb	sy
 8006748:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800674c:	bf00      	nop
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	200009d4 	.word	0x200009d4
 8006758:	e000ed04 	.word	0xe000ed04

0800675c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b08a      	sub	sp, #40	; 0x28
 8006760:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006762:	2300      	movs	r3, #0
 8006764:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006766:	2300      	movs	r3, #0
 8006768:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800676a:	463a      	mov	r2, r7
 800676c:	1d39      	adds	r1, r7, #4
 800676e:	f107 0308 	add.w	r3, r7, #8
 8006772:	4618      	mov	r0, r3
 8006774:	f7fa fc5c 	bl	8001030 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006778:	6839      	ldr	r1, [r7, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	68ba      	ldr	r2, [r7, #8]
 800677e:	9202      	str	r2, [sp, #8]
 8006780:	9301      	str	r3, [sp, #4]
 8006782:	2300      	movs	r3, #0
 8006784:	9300      	str	r3, [sp, #0]
 8006786:	2300      	movs	r3, #0
 8006788:	460a      	mov	r2, r1
 800678a:	4921      	ldr	r1, [pc, #132]	; (8006810 <vTaskStartScheduler+0xb4>)
 800678c:	4821      	ldr	r0, [pc, #132]	; (8006814 <vTaskStartScheduler+0xb8>)
 800678e:	f7ff fe1d 	bl	80063cc <xTaskCreateStatic>
 8006792:	4603      	mov	r3, r0
 8006794:	4a20      	ldr	r2, [pc, #128]	; (8006818 <vTaskStartScheduler+0xbc>)
 8006796:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006798:	4b1f      	ldr	r3, [pc, #124]	; (8006818 <vTaskStartScheduler+0xbc>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d002      	beq.n	80067a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80067a0:	2301      	movs	r3, #1
 80067a2:	617b      	str	r3, [r7, #20]
 80067a4:	e001      	b.n	80067aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80067a6:	2300      	movs	r3, #0
 80067a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d102      	bne.n	80067b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80067b0:	f000 fe8e 	bl	80074d0 <xTimerCreateTimerTask>
 80067b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d116      	bne.n	80067ea <vTaskStartScheduler+0x8e>
	__asm volatile
 80067bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c0:	f383 8811 	msr	BASEPRI, r3
 80067c4:	f3bf 8f6f 	isb	sy
 80067c8:	f3bf 8f4f 	dsb	sy
 80067cc:	613b      	str	r3, [r7, #16]
}
 80067ce:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80067d0:	4b12      	ldr	r3, [pc, #72]	; (800681c <vTaskStartScheduler+0xc0>)
 80067d2:	f04f 32ff 	mov.w	r2, #4294967295
 80067d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80067d8:	4b11      	ldr	r3, [pc, #68]	; (8006820 <vTaskStartScheduler+0xc4>)
 80067da:	2201      	movs	r2, #1
 80067dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80067de:	4b11      	ldr	r3, [pc, #68]	; (8006824 <vTaskStartScheduler+0xc8>)
 80067e0:	2200      	movs	r2, #0
 80067e2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80067e4:	f001 facc 	bl	8007d80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80067e8:	e00e      	b.n	8006808 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f0:	d10a      	bne.n	8006808 <vTaskStartScheduler+0xac>
	__asm volatile
 80067f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f6:	f383 8811 	msr	BASEPRI, r3
 80067fa:	f3bf 8f6f 	isb	sy
 80067fe:	f3bf 8f4f 	dsb	sy
 8006802:	60fb      	str	r3, [r7, #12]
}
 8006804:	bf00      	nop
 8006806:	e7fe      	b.n	8006806 <vTaskStartScheduler+0xaa>
}
 8006808:	bf00      	nop
 800680a:	3718      	adds	r7, #24
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	08009074 	.word	0x08009074
 8006814:	08006e21 	.word	0x08006e21
 8006818:	200009d0 	.word	0x200009d0
 800681c:	200009cc 	.word	0x200009cc
 8006820:	200009b8 	.word	0x200009b8
 8006824:	200009b0 	.word	0x200009b0

08006828 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006828:	b480      	push	{r7}
 800682a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800682c:	4b04      	ldr	r3, [pc, #16]	; (8006840 <vTaskSuspendAll+0x18>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	3301      	adds	r3, #1
 8006832:	4a03      	ldr	r2, [pc, #12]	; (8006840 <vTaskSuspendAll+0x18>)
 8006834:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006836:	bf00      	nop
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr
 8006840:	200009d4 	.word	0x200009d4

08006844 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800684a:	2300      	movs	r3, #0
 800684c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800684e:	2300      	movs	r3, #0
 8006850:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006852:	4b41      	ldr	r3, [pc, #260]	; (8006958 <xTaskResumeAll+0x114>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d10a      	bne.n	8006870 <xTaskResumeAll+0x2c>
	__asm volatile
 800685a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685e:	f383 8811 	msr	BASEPRI, r3
 8006862:	f3bf 8f6f 	isb	sy
 8006866:	f3bf 8f4f 	dsb	sy
 800686a:	603b      	str	r3, [r7, #0]
}
 800686c:	bf00      	nop
 800686e:	e7fe      	b.n	800686e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006870:	f001 fb28 	bl	8007ec4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006874:	4b38      	ldr	r3, [pc, #224]	; (8006958 <xTaskResumeAll+0x114>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	3b01      	subs	r3, #1
 800687a:	4a37      	ldr	r2, [pc, #220]	; (8006958 <xTaskResumeAll+0x114>)
 800687c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800687e:	4b36      	ldr	r3, [pc, #216]	; (8006958 <xTaskResumeAll+0x114>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d161      	bne.n	800694a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006886:	4b35      	ldr	r3, [pc, #212]	; (800695c <xTaskResumeAll+0x118>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d05d      	beq.n	800694a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800688e:	e02e      	b.n	80068ee <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006890:	4b33      	ldr	r3, [pc, #204]	; (8006960 <xTaskResumeAll+0x11c>)
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	3318      	adds	r3, #24
 800689c:	4618      	mov	r0, r3
 800689e:	f7ff f849 	bl	8005934 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	3304      	adds	r3, #4
 80068a6:	4618      	mov	r0, r3
 80068a8:	f7ff f844 	bl	8005934 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b0:	2201      	movs	r2, #1
 80068b2:	409a      	lsls	r2, r3
 80068b4:	4b2b      	ldr	r3, [pc, #172]	; (8006964 <xTaskResumeAll+0x120>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	4a2a      	ldr	r2, [pc, #168]	; (8006964 <xTaskResumeAll+0x120>)
 80068bc:	6013      	str	r3, [r2, #0]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068c2:	4613      	mov	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4413      	add	r3, r2
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	4a27      	ldr	r2, [pc, #156]	; (8006968 <xTaskResumeAll+0x124>)
 80068cc:	441a      	add	r2, r3
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	3304      	adds	r3, #4
 80068d2:	4619      	mov	r1, r3
 80068d4:	4610      	mov	r0, r2
 80068d6:	f7fe ffd0 	bl	800587a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068de:	4b23      	ldr	r3, [pc, #140]	; (800696c <xTaskResumeAll+0x128>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d302      	bcc.n	80068ee <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80068e8:	4b21      	ldr	r3, [pc, #132]	; (8006970 <xTaskResumeAll+0x12c>)
 80068ea:	2201      	movs	r2, #1
 80068ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068ee:	4b1c      	ldr	r3, [pc, #112]	; (8006960 <xTaskResumeAll+0x11c>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d1cc      	bne.n	8006890 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d001      	beq.n	8006900 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80068fc:	f000 fae6 	bl	8006ecc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006900:	4b1c      	ldr	r3, [pc, #112]	; (8006974 <xTaskResumeAll+0x130>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d010      	beq.n	800692e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800690c:	f000 f846 	bl	800699c <xTaskIncrementTick>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d002      	beq.n	800691c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006916:	4b16      	ldr	r3, [pc, #88]	; (8006970 <xTaskResumeAll+0x12c>)
 8006918:	2201      	movs	r2, #1
 800691a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	3b01      	subs	r3, #1
 8006920:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1f1      	bne.n	800690c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006928:	4b12      	ldr	r3, [pc, #72]	; (8006974 <xTaskResumeAll+0x130>)
 800692a:	2200      	movs	r2, #0
 800692c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800692e:	4b10      	ldr	r3, [pc, #64]	; (8006970 <xTaskResumeAll+0x12c>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d009      	beq.n	800694a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006936:	2301      	movs	r3, #1
 8006938:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800693a:	4b0f      	ldr	r3, [pc, #60]	; (8006978 <xTaskResumeAll+0x134>)
 800693c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006940:	601a      	str	r2, [r3, #0]
 8006942:	f3bf 8f4f 	dsb	sy
 8006946:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800694a:	f001 faeb 	bl	8007f24 <vPortExitCritical>

	return xAlreadyYielded;
 800694e:	68bb      	ldr	r3, [r7, #8]
}
 8006950:	4618      	mov	r0, r3
 8006952:	3710      	adds	r7, #16
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}
 8006958:	200009d4 	.word	0x200009d4
 800695c:	200009ac 	.word	0x200009ac
 8006960:	20000998 	.word	0x20000998
 8006964:	200009b4 	.word	0x200009b4
 8006968:	200008dc 	.word	0x200008dc
 800696c:	200008d8 	.word	0x200008d8
 8006970:	200009c0 	.word	0x200009c0
 8006974:	200009bc 	.word	0x200009bc
 8006978:	e000ed04 	.word	0xe000ed04

0800697c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006982:	4b05      	ldr	r3, [pc, #20]	; (8006998 <xTaskGetTickCount+0x1c>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006988:	687b      	ldr	r3, [r7, #4]
}
 800698a:	4618      	mov	r0, r3
 800698c:	370c      	adds	r7, #12
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	200009b0 	.word	0x200009b0

0800699c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b086      	sub	sp, #24
 80069a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80069a2:	2300      	movs	r3, #0
 80069a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069a6:	4b4e      	ldr	r3, [pc, #312]	; (8006ae0 <xTaskIncrementTick+0x144>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	f040 808e 	bne.w	8006acc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80069b0:	4b4c      	ldr	r3, [pc, #304]	; (8006ae4 <xTaskIncrementTick+0x148>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	3301      	adds	r3, #1
 80069b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80069b8:	4a4a      	ldr	r2, [pc, #296]	; (8006ae4 <xTaskIncrementTick+0x148>)
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d120      	bne.n	8006a06 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80069c4:	4b48      	ldr	r3, [pc, #288]	; (8006ae8 <xTaskIncrementTick+0x14c>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00a      	beq.n	80069e4 <xTaskIncrementTick+0x48>
	__asm volatile
 80069ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d2:	f383 8811 	msr	BASEPRI, r3
 80069d6:	f3bf 8f6f 	isb	sy
 80069da:	f3bf 8f4f 	dsb	sy
 80069de:	603b      	str	r3, [r7, #0]
}
 80069e0:	bf00      	nop
 80069e2:	e7fe      	b.n	80069e2 <xTaskIncrementTick+0x46>
 80069e4:	4b40      	ldr	r3, [pc, #256]	; (8006ae8 <xTaskIncrementTick+0x14c>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	60fb      	str	r3, [r7, #12]
 80069ea:	4b40      	ldr	r3, [pc, #256]	; (8006aec <xTaskIncrementTick+0x150>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a3e      	ldr	r2, [pc, #248]	; (8006ae8 <xTaskIncrementTick+0x14c>)
 80069f0:	6013      	str	r3, [r2, #0]
 80069f2:	4a3e      	ldr	r2, [pc, #248]	; (8006aec <xTaskIncrementTick+0x150>)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6013      	str	r3, [r2, #0]
 80069f8:	4b3d      	ldr	r3, [pc, #244]	; (8006af0 <xTaskIncrementTick+0x154>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	3301      	adds	r3, #1
 80069fe:	4a3c      	ldr	r2, [pc, #240]	; (8006af0 <xTaskIncrementTick+0x154>)
 8006a00:	6013      	str	r3, [r2, #0]
 8006a02:	f000 fa63 	bl	8006ecc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006a06:	4b3b      	ldr	r3, [pc, #236]	; (8006af4 <xTaskIncrementTick+0x158>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	693a      	ldr	r2, [r7, #16]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d348      	bcc.n	8006aa2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a10:	4b35      	ldr	r3, [pc, #212]	; (8006ae8 <xTaskIncrementTick+0x14c>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d104      	bne.n	8006a24 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a1a:	4b36      	ldr	r3, [pc, #216]	; (8006af4 <xTaskIncrementTick+0x158>)
 8006a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a20:	601a      	str	r2, [r3, #0]
					break;
 8006a22:	e03e      	b.n	8006aa2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a24:	4b30      	ldr	r3, [pc, #192]	; (8006ae8 <xTaskIncrementTick+0x14c>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006a34:	693a      	ldr	r2, [r7, #16]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d203      	bcs.n	8006a44 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006a3c:	4a2d      	ldr	r2, [pc, #180]	; (8006af4 <xTaskIncrementTick+0x158>)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006a42:	e02e      	b.n	8006aa2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	3304      	adds	r3, #4
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7fe ff73 	bl	8005934 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d004      	beq.n	8006a60 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	3318      	adds	r3, #24
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7fe ff6a 	bl	8005934 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a64:	2201      	movs	r2, #1
 8006a66:	409a      	lsls	r2, r3
 8006a68:	4b23      	ldr	r3, [pc, #140]	; (8006af8 <xTaskIncrementTick+0x15c>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	4a22      	ldr	r2, [pc, #136]	; (8006af8 <xTaskIncrementTick+0x15c>)
 8006a70:	6013      	str	r3, [r2, #0]
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a76:	4613      	mov	r3, r2
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4413      	add	r3, r2
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	4a1f      	ldr	r2, [pc, #124]	; (8006afc <xTaskIncrementTick+0x160>)
 8006a80:	441a      	add	r2, r3
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	3304      	adds	r3, #4
 8006a86:	4619      	mov	r1, r3
 8006a88:	4610      	mov	r0, r2
 8006a8a:	f7fe fef6 	bl	800587a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a92:	4b1b      	ldr	r3, [pc, #108]	; (8006b00 <xTaskIncrementTick+0x164>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d3b9      	bcc.n	8006a10 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006aa0:	e7b6      	b.n	8006a10 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006aa2:	4b17      	ldr	r3, [pc, #92]	; (8006b00 <xTaskIncrementTick+0x164>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aa8:	4914      	ldr	r1, [pc, #80]	; (8006afc <xTaskIncrementTick+0x160>)
 8006aaa:	4613      	mov	r3, r2
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	4413      	add	r3, r2
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	440b      	add	r3, r1
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d901      	bls.n	8006abe <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006aba:	2301      	movs	r3, #1
 8006abc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006abe:	4b11      	ldr	r3, [pc, #68]	; (8006b04 <xTaskIncrementTick+0x168>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d007      	beq.n	8006ad6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	617b      	str	r3, [r7, #20]
 8006aca:	e004      	b.n	8006ad6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006acc:	4b0e      	ldr	r3, [pc, #56]	; (8006b08 <xTaskIncrementTick+0x16c>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	4a0d      	ldr	r2, [pc, #52]	; (8006b08 <xTaskIncrementTick+0x16c>)
 8006ad4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006ad6:	697b      	ldr	r3, [r7, #20]
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3718      	adds	r7, #24
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	200009d4 	.word	0x200009d4
 8006ae4:	200009b0 	.word	0x200009b0
 8006ae8:	20000990 	.word	0x20000990
 8006aec:	20000994 	.word	0x20000994
 8006af0:	200009c4 	.word	0x200009c4
 8006af4:	200009cc 	.word	0x200009cc
 8006af8:	200009b4 	.word	0x200009b4
 8006afc:	200008dc 	.word	0x200008dc
 8006b00:	200008d8 	.word	0x200008d8
 8006b04:	200009c0 	.word	0x200009c0
 8006b08:	200009bc 	.word	0x200009bc

08006b0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b087      	sub	sp, #28
 8006b10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006b12:	4b27      	ldr	r3, [pc, #156]	; (8006bb0 <vTaskSwitchContext+0xa4>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d003      	beq.n	8006b22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006b1a:	4b26      	ldr	r3, [pc, #152]	; (8006bb4 <vTaskSwitchContext+0xa8>)
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006b20:	e03f      	b.n	8006ba2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006b22:	4b24      	ldr	r3, [pc, #144]	; (8006bb4 <vTaskSwitchContext+0xa8>)
 8006b24:	2200      	movs	r2, #0
 8006b26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b28:	4b23      	ldr	r3, [pc, #140]	; (8006bb8 <vTaskSwitchContext+0xac>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	fab3 f383 	clz	r3, r3
 8006b34:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006b36:	7afb      	ldrb	r3, [r7, #11]
 8006b38:	f1c3 031f 	rsb	r3, r3, #31
 8006b3c:	617b      	str	r3, [r7, #20]
 8006b3e:	491f      	ldr	r1, [pc, #124]	; (8006bbc <vTaskSwitchContext+0xb0>)
 8006b40:	697a      	ldr	r2, [r7, #20]
 8006b42:	4613      	mov	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4413      	add	r3, r2
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	440b      	add	r3, r1
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d10a      	bne.n	8006b68 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b56:	f383 8811 	msr	BASEPRI, r3
 8006b5a:	f3bf 8f6f 	isb	sy
 8006b5e:	f3bf 8f4f 	dsb	sy
 8006b62:	607b      	str	r3, [r7, #4]
}
 8006b64:	bf00      	nop
 8006b66:	e7fe      	b.n	8006b66 <vTaskSwitchContext+0x5a>
 8006b68:	697a      	ldr	r2, [r7, #20]
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	4413      	add	r3, r2
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	4a12      	ldr	r2, [pc, #72]	; (8006bbc <vTaskSwitchContext+0xb0>)
 8006b74:	4413      	add	r3, r2
 8006b76:	613b      	str	r3, [r7, #16]
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	685a      	ldr	r2, [r3, #4]
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	605a      	str	r2, [r3, #4]
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	685a      	ldr	r2, [r3, #4]
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	3308      	adds	r3, #8
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d104      	bne.n	8006b98 <vTaskSwitchContext+0x8c>
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	685a      	ldr	r2, [r3, #4]
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	605a      	str	r2, [r3, #4]
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	4a08      	ldr	r2, [pc, #32]	; (8006bc0 <vTaskSwitchContext+0xb4>)
 8006ba0:	6013      	str	r3, [r2, #0]
}
 8006ba2:	bf00      	nop
 8006ba4:	371c      	adds	r7, #28
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr
 8006bae:	bf00      	nop
 8006bb0:	200009d4 	.word	0x200009d4
 8006bb4:	200009c0 	.word	0x200009c0
 8006bb8:	200009b4 	.word	0x200009b4
 8006bbc:	200008dc 	.word	0x200008dc
 8006bc0:	200008d8 	.word	0x200008d8

08006bc4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d10a      	bne.n	8006bea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd8:	f383 8811 	msr	BASEPRI, r3
 8006bdc:	f3bf 8f6f 	isb	sy
 8006be0:	f3bf 8f4f 	dsb	sy
 8006be4:	60fb      	str	r3, [r7, #12]
}
 8006be6:	bf00      	nop
 8006be8:	e7fe      	b.n	8006be8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006bea:	4b07      	ldr	r3, [pc, #28]	; (8006c08 <vTaskPlaceOnEventList+0x44>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	3318      	adds	r3, #24
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f7fe fe65 	bl	80058c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006bf8:	2101      	movs	r1, #1
 8006bfa:	6838      	ldr	r0, [r7, #0]
 8006bfc:	f000 fc14 	bl	8007428 <prvAddCurrentTaskToDelayedList>
}
 8006c00:	bf00      	nop
 8006c02:	3710      	adds	r7, #16
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	200008d8 	.word	0x200008d8

08006c0c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b086      	sub	sp, #24
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10a      	bne.n	8006c34 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c22:	f383 8811 	msr	BASEPRI, r3
 8006c26:	f3bf 8f6f 	isb	sy
 8006c2a:	f3bf 8f4f 	dsb	sy
 8006c2e:	617b      	str	r3, [r7, #20]
}
 8006c30:	bf00      	nop
 8006c32:	e7fe      	b.n	8006c32 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c34:	4b0a      	ldr	r3, [pc, #40]	; (8006c60 <vTaskPlaceOnEventListRestricted+0x54>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	3318      	adds	r3, #24
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f7fe fe1c 	bl	800587a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d002      	beq.n	8006c4e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006c48:	f04f 33ff 	mov.w	r3, #4294967295
 8006c4c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006c4e:	6879      	ldr	r1, [r7, #4]
 8006c50:	68b8      	ldr	r0, [r7, #8]
 8006c52:	f000 fbe9 	bl	8007428 <prvAddCurrentTaskToDelayedList>
	}
 8006c56:	bf00      	nop
 8006c58:	3718      	adds	r7, #24
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	200008d8 	.word	0x200008d8

08006c64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b086      	sub	sp, #24
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d10a      	bne.n	8006c90 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7e:	f383 8811 	msr	BASEPRI, r3
 8006c82:	f3bf 8f6f 	isb	sy
 8006c86:	f3bf 8f4f 	dsb	sy
 8006c8a:	60fb      	str	r3, [r7, #12]
}
 8006c8c:	bf00      	nop
 8006c8e:	e7fe      	b.n	8006c8e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	3318      	adds	r3, #24
 8006c94:	4618      	mov	r0, r3
 8006c96:	f7fe fe4d 	bl	8005934 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c9a:	4b1d      	ldr	r3, [pc, #116]	; (8006d10 <xTaskRemoveFromEventList+0xac>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d11c      	bne.n	8006cdc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	3304      	adds	r3, #4
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f7fe fe44 	bl	8005934 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	409a      	lsls	r2, r3
 8006cb4:	4b17      	ldr	r3, [pc, #92]	; (8006d14 <xTaskRemoveFromEventList+0xb0>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	4a16      	ldr	r2, [pc, #88]	; (8006d14 <xTaskRemoveFromEventList+0xb0>)
 8006cbc:	6013      	str	r3, [r2, #0]
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4413      	add	r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	4a13      	ldr	r2, [pc, #76]	; (8006d18 <xTaskRemoveFromEventList+0xb4>)
 8006ccc:	441a      	add	r2, r3
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	3304      	adds	r3, #4
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	4610      	mov	r0, r2
 8006cd6:	f7fe fdd0 	bl	800587a <vListInsertEnd>
 8006cda:	e005      	b.n	8006ce8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	3318      	adds	r3, #24
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	480e      	ldr	r0, [pc, #56]	; (8006d1c <xTaskRemoveFromEventList+0xb8>)
 8006ce4:	f7fe fdc9 	bl	800587a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cec:	4b0c      	ldr	r3, [pc, #48]	; (8006d20 <xTaskRemoveFromEventList+0xbc>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d905      	bls.n	8006d02 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006cfa:	4b0a      	ldr	r3, [pc, #40]	; (8006d24 <xTaskRemoveFromEventList+0xc0>)
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	601a      	str	r2, [r3, #0]
 8006d00:	e001      	b.n	8006d06 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006d02:	2300      	movs	r3, #0
 8006d04:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006d06:	697b      	ldr	r3, [r7, #20]
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3718      	adds	r7, #24
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	200009d4 	.word	0x200009d4
 8006d14:	200009b4 	.word	0x200009b4
 8006d18:	200008dc 	.word	0x200008dc
 8006d1c:	20000998 	.word	0x20000998
 8006d20:	200008d8 	.word	0x200008d8
 8006d24:	200009c0 	.word	0x200009c0

08006d28 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006d30:	4b06      	ldr	r3, [pc, #24]	; (8006d4c <vTaskInternalSetTimeOutState+0x24>)
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006d38:	4b05      	ldr	r3, [pc, #20]	; (8006d50 <vTaskInternalSetTimeOutState+0x28>)
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	605a      	str	r2, [r3, #4]
}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr
 8006d4c:	200009c4 	.word	0x200009c4
 8006d50:	200009b0 	.word	0x200009b0

08006d54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b088      	sub	sp, #32
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d10a      	bne.n	8006d7a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d68:	f383 8811 	msr	BASEPRI, r3
 8006d6c:	f3bf 8f6f 	isb	sy
 8006d70:	f3bf 8f4f 	dsb	sy
 8006d74:	613b      	str	r3, [r7, #16]
}
 8006d76:	bf00      	nop
 8006d78:	e7fe      	b.n	8006d78 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d10a      	bne.n	8006d96 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d84:	f383 8811 	msr	BASEPRI, r3
 8006d88:	f3bf 8f6f 	isb	sy
 8006d8c:	f3bf 8f4f 	dsb	sy
 8006d90:	60fb      	str	r3, [r7, #12]
}
 8006d92:	bf00      	nop
 8006d94:	e7fe      	b.n	8006d94 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006d96:	f001 f895 	bl	8007ec4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006d9a:	4b19      	ldr	r3, [pc, #100]	; (8006e00 <xTaskCheckForTimeOut+0xac>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	69ba      	ldr	r2, [r7, #24]
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	617b      	str	r3, [r7, #20]
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	4b15      	ldr	r3, [pc, #84]	; (8006e04 <xTaskCheckForTimeOut+0xb0>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d007      	beq.n	8006dc6 <xTaskCheckForTimeOut+0x72>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	69ba      	ldr	r2, [r7, #24]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d302      	bcc.n	8006dc6 <xTaskCheckForTimeOut+0x72>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	61fb      	str	r3, [r7, #28]
 8006dc4:	e015      	b.n	8006df2 <xTaskCheckForTimeOut+0x9e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	697a      	ldr	r2, [r7, #20]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d20b      	bcs.n	8006de8 <xTaskCheckForTimeOut+0x94>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	1ad2      	subs	r2, r2, r3
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f7ff ffa3 	bl	8006d28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006de2:	2300      	movs	r3, #0
 8006de4:	61fb      	str	r3, [r7, #28]
 8006de6:	e004      	b.n	8006df2 <xTaskCheckForTimeOut+0x9e>
		}
		else
		{
			*pxTicksToWait = 0;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	2200      	movs	r2, #0
 8006dec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006dee:	2301      	movs	r3, #1
 8006df0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006df2:	f001 f897 	bl	8007f24 <vPortExitCritical>

	return xReturn;
 8006df6:	69fb      	ldr	r3, [r7, #28]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3720      	adds	r7, #32
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	200009b0 	.word	0x200009b0
 8006e04:	200009c4 	.word	0x200009c4

08006e08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006e08:	b480      	push	{r7}
 8006e0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006e0c:	4b03      	ldr	r3, [pc, #12]	; (8006e1c <vTaskMissedYield+0x14>)
 8006e0e:	2201      	movs	r2, #1
 8006e10:	601a      	str	r2, [r3, #0]
}
 8006e12:	bf00      	nop
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr
 8006e1c:	200009c0 	.word	0x200009c0

08006e20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006e28:	f000 f848 	bl	8006ebc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006e2c:	4b06      	ldr	r3, [pc, #24]	; (8006e48 <prvIdleTask+0x28>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d9f9      	bls.n	8006e28 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006e34:	4b05      	ldr	r3, [pc, #20]	; (8006e4c <prvIdleTask+0x2c>)
 8006e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e3a:	601a      	str	r2, [r3, #0]
 8006e3c:	f3bf 8f4f 	dsb	sy
 8006e40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006e44:	e7f0      	b.n	8006e28 <prvIdleTask+0x8>
 8006e46:	bf00      	nop
 8006e48:	200008dc 	.word	0x200008dc
 8006e4c:	e000ed04 	.word	0xe000ed04

08006e50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e56:	2300      	movs	r3, #0
 8006e58:	607b      	str	r3, [r7, #4]
 8006e5a:	e00c      	b.n	8006e76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	4613      	mov	r3, r2
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	4413      	add	r3, r2
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	4a0f      	ldr	r2, [pc, #60]	; (8006ea4 <prvInitialiseTaskLists+0x54>)
 8006e68:	4413      	add	r3, r2
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f7fe fcd8 	bl	8005820 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	3301      	adds	r3, #1
 8006e74:	607b      	str	r3, [r7, #4]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2b06      	cmp	r3, #6
 8006e7a:	d9ef      	bls.n	8006e5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006e7c:	480a      	ldr	r0, [pc, #40]	; (8006ea8 <prvInitialiseTaskLists+0x58>)
 8006e7e:	f7fe fccf 	bl	8005820 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006e82:	480a      	ldr	r0, [pc, #40]	; (8006eac <prvInitialiseTaskLists+0x5c>)
 8006e84:	f7fe fccc 	bl	8005820 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006e88:	4809      	ldr	r0, [pc, #36]	; (8006eb0 <prvInitialiseTaskLists+0x60>)
 8006e8a:	f7fe fcc9 	bl	8005820 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006e8e:	4b09      	ldr	r3, [pc, #36]	; (8006eb4 <prvInitialiseTaskLists+0x64>)
 8006e90:	4a05      	ldr	r2, [pc, #20]	; (8006ea8 <prvInitialiseTaskLists+0x58>)
 8006e92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006e94:	4b08      	ldr	r3, [pc, #32]	; (8006eb8 <prvInitialiseTaskLists+0x68>)
 8006e96:	4a05      	ldr	r2, [pc, #20]	; (8006eac <prvInitialiseTaskLists+0x5c>)
 8006e98:	601a      	str	r2, [r3, #0]
}
 8006e9a:	bf00      	nop
 8006e9c:	3708      	adds	r7, #8
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	200008dc 	.word	0x200008dc
 8006ea8:	20000968 	.word	0x20000968
 8006eac:	2000097c 	.word	0x2000097c
 8006eb0:	20000998 	.word	0x20000998
 8006eb4:	20000990 	.word	0x20000990
 8006eb8:	20000994 	.word	0x20000994

08006ebc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	af00      	add	r7, sp, #0

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ec0:	bf00      	nop
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr
	...

08006ecc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ed2:	4b0c      	ldr	r3, [pc, #48]	; (8006f04 <prvResetNextTaskUnblockTime+0x38>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d104      	bne.n	8006ee6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006edc:	4b0a      	ldr	r3, [pc, #40]	; (8006f08 <prvResetNextTaskUnblockTime+0x3c>)
 8006ede:	f04f 32ff 	mov.w	r2, #4294967295
 8006ee2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ee4:	e008      	b.n	8006ef8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ee6:	4b07      	ldr	r3, [pc, #28]	; (8006f04 <prvResetNextTaskUnblockTime+0x38>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	4a04      	ldr	r2, [pc, #16]	; (8006f08 <prvResetNextTaskUnblockTime+0x3c>)
 8006ef6:	6013      	str	r3, [r2, #0]
}
 8006ef8:	bf00      	nop
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr
 8006f04:	20000990 	.word	0x20000990
 8006f08:	200009cc 	.word	0x200009cc

08006f0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006f12:	4b0b      	ldr	r3, [pc, #44]	; (8006f40 <xTaskGetSchedulerState+0x34>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d102      	bne.n	8006f20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	607b      	str	r3, [r7, #4]
 8006f1e:	e008      	b.n	8006f32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f20:	4b08      	ldr	r3, [pc, #32]	; (8006f44 <xTaskGetSchedulerState+0x38>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d102      	bne.n	8006f2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006f28:	2302      	movs	r3, #2
 8006f2a:	607b      	str	r3, [r7, #4]
 8006f2c:	e001      	b.n	8006f32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006f32:	687b      	ldr	r3, [r7, #4]
	}
 8006f34:	4618      	mov	r0, r3
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr
 8006f40:	200009b8 	.word	0x200009b8
 8006f44:	200009d4 	.word	0x200009d4

08006f48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b086      	sub	sp, #24
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006f54:	2300      	movs	r3, #0
 8006f56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d06e      	beq.n	800703c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006f5e:	4b3a      	ldr	r3, [pc, #232]	; (8007048 <xTaskPriorityDisinherit+0x100>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	693a      	ldr	r2, [r7, #16]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d00a      	beq.n	8006f7e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6c:	f383 8811 	msr	BASEPRI, r3
 8006f70:	f3bf 8f6f 	isb	sy
 8006f74:	f3bf 8f4f 	dsb	sy
 8006f78:	60fb      	str	r3, [r7, #12]
}
 8006f7a:	bf00      	nop
 8006f7c:	e7fe      	b.n	8006f7c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d10a      	bne.n	8006f9c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8a:	f383 8811 	msr	BASEPRI, r3
 8006f8e:	f3bf 8f6f 	isb	sy
 8006f92:	f3bf 8f4f 	dsb	sy
 8006f96:	60bb      	str	r3, [r7, #8]
}
 8006f98:	bf00      	nop
 8006f9a:	e7fe      	b.n	8006f9a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fa0:	1e5a      	subs	r2, r3, #1
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d044      	beq.n	800703c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d140      	bne.n	800703c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	3304      	adds	r3, #4
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f7fe fcb8 	bl	8005934 <uxListRemove>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d115      	bne.n	8006ff6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fce:	491f      	ldr	r1, [pc, #124]	; (800704c <xTaskPriorityDisinherit+0x104>)
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	4413      	add	r3, r2
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	440b      	add	r3, r1
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d10a      	bne.n	8006ff6 <xTaskPriorityDisinherit+0xae>
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8006fea:	43da      	mvns	r2, r3
 8006fec:	4b18      	ldr	r3, [pc, #96]	; (8007050 <xTaskPriorityDisinherit+0x108>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4013      	ands	r3, r2
 8006ff2:	4a17      	ldr	r2, [pc, #92]	; (8007050 <xTaskPriorityDisinherit+0x108>)
 8006ff4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007002:	f1c3 0207 	rsb	r2, r3, #7
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700e:	2201      	movs	r2, #1
 8007010:	409a      	lsls	r2, r3
 8007012:	4b0f      	ldr	r3, [pc, #60]	; (8007050 <xTaskPriorityDisinherit+0x108>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4313      	orrs	r3, r2
 8007018:	4a0d      	ldr	r2, [pc, #52]	; (8007050 <xTaskPriorityDisinherit+0x108>)
 800701a:	6013      	str	r3, [r2, #0]
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007020:	4613      	mov	r3, r2
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	4413      	add	r3, r2
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	4a08      	ldr	r2, [pc, #32]	; (800704c <xTaskPriorityDisinherit+0x104>)
 800702a:	441a      	add	r2, r3
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	3304      	adds	r3, #4
 8007030:	4619      	mov	r1, r3
 8007032:	4610      	mov	r0, r2
 8007034:	f7fe fc21 	bl	800587a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007038:	2301      	movs	r3, #1
 800703a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800703c:	697b      	ldr	r3, [r7, #20]
	}
 800703e:	4618      	mov	r0, r3
 8007040:	3718      	adds	r7, #24
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	200008d8 	.word	0x200008d8
 800704c:	200008dc 	.word	0x200008dc
 8007050:	200009b4 	.word	0x200009b4

08007054 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8007054:	b580      	push	{r7, lr}
 8007056:	b086      	sub	sp, #24
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	607a      	str	r2, [r7, #4]
 8007060:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8007062:	f000 ff2f 	bl	8007ec4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007066:	4b26      	ldr	r3, [pc, #152]	; (8007100 <xTaskNotifyWait+0xac>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800706e:	b2db      	uxtb	r3, r3
 8007070:	2b02      	cmp	r3, #2
 8007072:	d01a      	beq.n	80070aa <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8007074:	4b22      	ldr	r3, [pc, #136]	; (8007100 <xTaskNotifyWait+0xac>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	43d2      	mvns	r2, r2
 800707e:	400a      	ands	r2, r1
 8007080:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007082:	4b1f      	ldr	r3, [pc, #124]	; (8007100 <xTaskNotifyWait+0xac>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00b      	beq.n	80070aa <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007092:	2101      	movs	r1, #1
 8007094:	6838      	ldr	r0, [r7, #0]
 8007096:	f000 f9c7 	bl	8007428 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800709a:	4b1a      	ldr	r3, [pc, #104]	; (8007104 <xTaskNotifyWait+0xb0>)
 800709c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070a0:	601a      	str	r2, [r3, #0]
 80070a2:	f3bf 8f4f 	dsb	sy
 80070a6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80070aa:	f000 ff3b 	bl	8007f24 <vPortExitCritical>

		taskENTER_CRITICAL();
 80070ae:	f000 ff09 	bl	8007ec4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d004      	beq.n	80070c2 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80070b8:	4b11      	ldr	r3, [pc, #68]	; (8007100 <xTaskNotifyWait+0xac>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80070c2:	4b0f      	ldr	r3, [pc, #60]	; (8007100 <xTaskNotifyWait+0xac>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d002      	beq.n	80070d6 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80070d0:	2300      	movs	r3, #0
 80070d2:	617b      	str	r3, [r7, #20]
 80070d4:	e008      	b.n	80070e8 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80070d6:	4b0a      	ldr	r3, [pc, #40]	; (8007100 <xTaskNotifyWait+0xac>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80070dc:	68ba      	ldr	r2, [r7, #8]
 80070de:	43d2      	mvns	r2, r2
 80070e0:	400a      	ands	r2, r1
 80070e2:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 80070e4:	2301      	movs	r3, #1
 80070e6:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80070e8:	4b05      	ldr	r3, [pc, #20]	; (8007100 <xTaskNotifyWait+0xac>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 80070f2:	f000 ff17 	bl	8007f24 <vPortExitCritical>

		return xReturn;
 80070f6:	697b      	ldr	r3, [r7, #20]
	}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3718      	adds	r7, #24
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	200008d8 	.word	0x200008d8
 8007104:	e000ed04 	.word	0xe000ed04

08007108 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8007108:	b580      	push	{r7, lr}
 800710a:	b08a      	sub	sp, #40	; 0x28
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	603b      	str	r3, [r7, #0]
 8007114:	4613      	mov	r3, r2
 8007116:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8007118:	2301      	movs	r3, #1
 800711a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d10a      	bne.n	8007138 <xTaskGenericNotify+0x30>
	__asm volatile
 8007122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007126:	f383 8811 	msr	BASEPRI, r3
 800712a:	f3bf 8f6f 	isb	sy
 800712e:	f3bf 8f4f 	dsb	sy
 8007132:	61bb      	str	r3, [r7, #24]
}
 8007134:	bf00      	nop
 8007136:	e7fe      	b.n	8007136 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800713c:	f000 fec2 	bl	8007ec4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d003      	beq.n	800714e <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007146:	6a3b      	ldr	r3, [r7, #32]
 8007148:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800714e:	6a3b      	ldr	r3, [r7, #32]
 8007150:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007154:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007156:	6a3b      	ldr	r3, [r7, #32]
 8007158:	2202      	movs	r2, #2
 800715a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 800715e:	79fb      	ldrb	r3, [r7, #7]
 8007160:	2b04      	cmp	r3, #4
 8007162:	d828      	bhi.n	80071b6 <xTaskGenericNotify+0xae>
 8007164:	a201      	add	r2, pc, #4	; (adr r2, 800716c <xTaskGenericNotify+0x64>)
 8007166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800716a:	bf00      	nop
 800716c:	080071d7 	.word	0x080071d7
 8007170:	08007181 	.word	0x08007181
 8007174:	0800718f 	.word	0x0800718f
 8007178:	0800719b 	.word	0x0800719b
 800717c:	080071a3 	.word	0x080071a3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007180:	6a3b      	ldr	r3, [r7, #32]
 8007182:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	431a      	orrs	r2, r3
 8007188:	6a3b      	ldr	r3, [r7, #32]
 800718a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800718c:	e026      	b.n	80071dc <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800718e:	6a3b      	ldr	r3, [r7, #32]
 8007190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007192:	1c5a      	adds	r2, r3, #1
 8007194:	6a3b      	ldr	r3, [r7, #32]
 8007196:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8007198:	e020      	b.n	80071dc <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800719a:	6a3b      	ldr	r3, [r7, #32]
 800719c:	68ba      	ldr	r2, [r7, #8]
 800719e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80071a0:	e01c      	b.n	80071dc <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80071a2:	7ffb      	ldrb	r3, [r7, #31]
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d003      	beq.n	80071b0 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80071a8:	6a3b      	ldr	r3, [r7, #32]
 80071aa:	68ba      	ldr	r2, [r7, #8]
 80071ac:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80071ae:	e015      	b.n	80071dc <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 80071b0:	2300      	movs	r3, #0
 80071b2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80071b4:	e012      	b.n	80071dc <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80071b6:	6a3b      	ldr	r3, [r7, #32]
 80071b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071be:	d00c      	beq.n	80071da <xTaskGenericNotify+0xd2>
	__asm volatile
 80071c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c4:	f383 8811 	msr	BASEPRI, r3
 80071c8:	f3bf 8f6f 	isb	sy
 80071cc:	f3bf 8f4f 	dsb	sy
 80071d0:	617b      	str	r3, [r7, #20]
}
 80071d2:	bf00      	nop
 80071d4:	e7fe      	b.n	80071d4 <xTaskGenericNotify+0xcc>
					break;
 80071d6:	bf00      	nop
 80071d8:	e000      	b.n	80071dc <xTaskGenericNotify+0xd4>

					break;
 80071da:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80071dc:	7ffb      	ldrb	r3, [r7, #31]
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d139      	bne.n	8007256 <xTaskGenericNotify+0x14e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071e2:	6a3b      	ldr	r3, [r7, #32]
 80071e4:	3304      	adds	r3, #4
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7fe fba4 	bl	8005934 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80071ec:	6a3b      	ldr	r3, [r7, #32]
 80071ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f0:	2201      	movs	r2, #1
 80071f2:	409a      	lsls	r2, r3
 80071f4:	4b1b      	ldr	r3, [pc, #108]	; (8007264 <xTaskGenericNotify+0x15c>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	4a1a      	ldr	r2, [pc, #104]	; (8007264 <xTaskGenericNotify+0x15c>)
 80071fc:	6013      	str	r3, [r2, #0]
 80071fe:	6a3b      	ldr	r3, [r7, #32]
 8007200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007202:	4613      	mov	r3, r2
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	4413      	add	r3, r2
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	4a17      	ldr	r2, [pc, #92]	; (8007268 <xTaskGenericNotify+0x160>)
 800720c:	441a      	add	r2, r3
 800720e:	6a3b      	ldr	r3, [r7, #32]
 8007210:	3304      	adds	r3, #4
 8007212:	4619      	mov	r1, r3
 8007214:	4610      	mov	r0, r2
 8007216:	f7fe fb30 	bl	800587a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800721a:	6a3b      	ldr	r3, [r7, #32]
 800721c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00a      	beq.n	8007238 <xTaskGenericNotify+0x130>
	__asm volatile
 8007222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007226:	f383 8811 	msr	BASEPRI, r3
 800722a:	f3bf 8f6f 	isb	sy
 800722e:	f3bf 8f4f 	dsb	sy
 8007232:	613b      	str	r3, [r7, #16]
}
 8007234:	bf00      	nop
 8007236:	e7fe      	b.n	8007236 <xTaskGenericNotify+0x12e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007238:	6a3b      	ldr	r3, [r7, #32]
 800723a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800723c:	4b0b      	ldr	r3, [pc, #44]	; (800726c <xTaskGenericNotify+0x164>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007242:	429a      	cmp	r2, r3
 8007244:	d907      	bls.n	8007256 <xTaskGenericNotify+0x14e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8007246:	4b0a      	ldr	r3, [pc, #40]	; (8007270 <xTaskGenericNotify+0x168>)
 8007248:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800724c:	601a      	str	r2, [r3, #0]
 800724e:	f3bf 8f4f 	dsb	sy
 8007252:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007256:	f000 fe65 	bl	8007f24 <vPortExitCritical>

		return xReturn;
 800725a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800725c:	4618      	mov	r0, r3
 800725e:	3728      	adds	r7, #40	; 0x28
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}
 8007264:	200009b4 	.word	0x200009b4
 8007268:	200008dc 	.word	0x200008dc
 800726c:	200008d8 	.word	0x200008d8
 8007270:	e000ed04 	.word	0xe000ed04

08007274 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007274:	b580      	push	{r7, lr}
 8007276:	b08e      	sub	sp, #56	; 0x38
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	603b      	str	r3, [r7, #0]
 8007280:	4613      	mov	r3, r2
 8007282:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007284:	2301      	movs	r3, #1
 8007286:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10a      	bne.n	80072a4 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800728e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007292:	f383 8811 	msr	BASEPRI, r3
 8007296:	f3bf 8f6f 	isb	sy
 800729a:	f3bf 8f4f 	dsb	sy
 800729e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80072a0:	bf00      	nop
 80072a2:	e7fe      	b.n	80072a2 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80072a4:	f000 fef0 	bl	8008088 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	633b      	str	r3, [r7, #48]	; 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80072ac:	f3ef 8211 	mrs	r2, BASEPRI
 80072b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b4:	f383 8811 	msr	BASEPRI, r3
 80072b8:	f3bf 8f6f 	isb	sy
 80072bc:	f3bf 8f4f 	dsb	sy
 80072c0:	623a      	str	r2, [r7, #32]
 80072c2:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80072c4:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80072c6:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d003      	beq.n	80072d6 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80072ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80072d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80072dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80072e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e2:	2202      	movs	r2, #2
 80072e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 80072e8:	79fb      	ldrb	r3, [r7, #7]
 80072ea:	2b04      	cmp	r3, #4
 80072ec:	d828      	bhi.n	8007340 <xTaskGenericNotifyFromISR+0xcc>
 80072ee:	a201      	add	r2, pc, #4	; (adr r2, 80072f4 <xTaskGenericNotifyFromISR+0x80>)
 80072f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f4:	08007361 	.word	0x08007361
 80072f8:	08007309 	.word	0x08007309
 80072fc:	08007317 	.word	0x08007317
 8007300:	08007323 	.word	0x08007323
 8007304:	0800732b 	.word	0x0800732b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	431a      	orrs	r2, r3
 8007310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007312:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8007314:	e027      	b.n	8007366 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800731a:	1c5a      	adds	r2, r3, #1
 800731c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8007320:	e021      	b.n	8007366 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007324:	68ba      	ldr	r2, [r7, #8]
 8007326:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8007328:	e01d      	b.n	8007366 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800732a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800732e:	2b02      	cmp	r3, #2
 8007330:	d003      	beq.n	800733a <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007338:	e015      	b.n	8007366 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800733a:	2300      	movs	r3, #0
 800733c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800733e:	e012      	b.n	8007366 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007348:	d00c      	beq.n	8007364 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800734a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734e:	f383 8811 	msr	BASEPRI, r3
 8007352:	f3bf 8f6f 	isb	sy
 8007356:	f3bf 8f4f 	dsb	sy
 800735a:	61bb      	str	r3, [r7, #24]
}
 800735c:	bf00      	nop
 800735e:	e7fe      	b.n	800735e <xTaskGenericNotifyFromISR+0xea>
					break;
 8007360:	bf00      	nop
 8007362:	e000      	b.n	8007366 <xTaskGenericNotifyFromISR+0xf2>
					break;
 8007364:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007366:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800736a:	2b01      	cmp	r3, #1
 800736c:	d145      	bne.n	80073fa <xTaskGenericNotifyFromISR+0x186>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800736e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00a      	beq.n	800738c <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8007376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737a:	f383 8811 	msr	BASEPRI, r3
 800737e:	f3bf 8f6f 	isb	sy
 8007382:	f3bf 8f4f 	dsb	sy
 8007386:	617b      	str	r3, [r7, #20]
}
 8007388:	bf00      	nop
 800738a:	e7fe      	b.n	800738a <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800738c:	4b20      	ldr	r3, [pc, #128]	; (8007410 <xTaskGenericNotifyFromISR+0x19c>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d11c      	bne.n	80073ce <xTaskGenericNotifyFromISR+0x15a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007396:	3304      	adds	r3, #4
 8007398:	4618      	mov	r0, r3
 800739a:	f7fe facb 	bl	8005934 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800739e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a2:	2201      	movs	r2, #1
 80073a4:	409a      	lsls	r2, r3
 80073a6:	4b1b      	ldr	r3, [pc, #108]	; (8007414 <xTaskGenericNotifyFromISR+0x1a0>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	4a19      	ldr	r2, [pc, #100]	; (8007414 <xTaskGenericNotifyFromISR+0x1a0>)
 80073ae:	6013      	str	r3, [r2, #0]
 80073b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073b4:	4613      	mov	r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	4413      	add	r3, r2
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	4a16      	ldr	r2, [pc, #88]	; (8007418 <xTaskGenericNotifyFromISR+0x1a4>)
 80073be:	441a      	add	r2, r3
 80073c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c2:	3304      	adds	r3, #4
 80073c4:	4619      	mov	r1, r3
 80073c6:	4610      	mov	r0, r2
 80073c8:	f7fe fa57 	bl	800587a <vListInsertEnd>
 80073cc:	e005      	b.n	80073da <xTaskGenericNotifyFromISR+0x166>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80073ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d0:	3318      	adds	r3, #24
 80073d2:	4619      	mov	r1, r3
 80073d4:	4811      	ldr	r0, [pc, #68]	; (800741c <xTaskGenericNotifyFromISR+0x1a8>)
 80073d6:	f7fe fa50 	bl	800587a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80073da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073de:	4b10      	ldr	r3, [pc, #64]	; (8007420 <xTaskGenericNotifyFromISR+0x1ac>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d908      	bls.n	80073fa <xTaskGenericNotifyFromISR+0x186>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80073e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d002      	beq.n	80073f4 <xTaskGenericNotifyFromISR+0x180>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80073ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073f0:	2201      	movs	r2, #1
 80073f2:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80073f4:	4b0b      	ldr	r3, [pc, #44]	; (8007424 <xTaskGenericNotifyFromISR+0x1b0>)
 80073f6:	2201      	movs	r2, #1
 80073f8:	601a      	str	r2, [r3, #0]
 80073fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073fc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007404:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8007406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8007408:	4618      	mov	r0, r3
 800740a:	3738      	adds	r7, #56	; 0x38
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}
 8007410:	200009d4 	.word	0x200009d4
 8007414:	200009b4 	.word	0x200009b4
 8007418:	200008dc 	.word	0x200008dc
 800741c:	20000998 	.word	0x20000998
 8007420:	200008d8 	.word	0x200008d8
 8007424:	200009c0 	.word	0x200009c0

08007428 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007432:	4b21      	ldr	r3, [pc, #132]	; (80074b8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007438:	4b20      	ldr	r3, [pc, #128]	; (80074bc <prvAddCurrentTaskToDelayedList+0x94>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	3304      	adds	r3, #4
 800743e:	4618      	mov	r0, r3
 8007440:	f7fe fa78 	bl	8005934 <uxListRemove>
 8007444:	4603      	mov	r3, r0
 8007446:	2b00      	cmp	r3, #0
 8007448:	d10b      	bne.n	8007462 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800744a:	4b1c      	ldr	r3, [pc, #112]	; (80074bc <prvAddCurrentTaskToDelayedList+0x94>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007450:	2201      	movs	r2, #1
 8007452:	fa02 f303 	lsl.w	r3, r2, r3
 8007456:	43da      	mvns	r2, r3
 8007458:	4b19      	ldr	r3, [pc, #100]	; (80074c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4013      	ands	r3, r2
 800745e:	4a18      	ldr	r2, [pc, #96]	; (80074c0 <prvAddCurrentTaskToDelayedList+0x98>)
 8007460:	6013      	str	r3, [r2, #0]
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4413      	add	r3, r2
 8007468:	60bb      	str	r3, [r7, #8]

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800746a:	4b14      	ldr	r3, [pc, #80]	; (80074bc <prvAddCurrentTaskToDelayedList+0x94>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68ba      	ldr	r2, [r7, #8]
 8007470:	605a      	str	r2, [r3, #4]

		if( xTimeToWake < xConstTickCount )
 8007472:	68ba      	ldr	r2, [r7, #8]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	429a      	cmp	r2, r3
 8007478:	d209      	bcs.n	800748e <prvAddCurrentTaskToDelayedList+0x66>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800747a:	4b12      	ldr	r3, [pc, #72]	; (80074c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	4b0f      	ldr	r3, [pc, #60]	; (80074bc <prvAddCurrentTaskToDelayedList+0x94>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	3304      	adds	r3, #4
 8007484:	4619      	mov	r1, r3
 8007486:	4610      	mov	r0, r2
 8007488:	f7fe fa1b 	bl	80058c2 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800748c:	e010      	b.n	80074b0 <prvAddCurrentTaskToDelayedList+0x88>
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800748e:	4b0e      	ldr	r3, [pc, #56]	; (80074c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	4b0a      	ldr	r3, [pc, #40]	; (80074bc <prvAddCurrentTaskToDelayedList+0x94>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	3304      	adds	r3, #4
 8007498:	4619      	mov	r1, r3
 800749a:	4610      	mov	r0, r2
 800749c:	f7fe fa11 	bl	80058c2 <vListInsert>
			if( xTimeToWake < xNextTaskUnblockTime )
 80074a0:	4b0a      	ldr	r3, [pc, #40]	; (80074cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	68ba      	ldr	r2, [r7, #8]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d202      	bcs.n	80074b0 <prvAddCurrentTaskToDelayedList+0x88>
				xNextTaskUnblockTime = xTimeToWake;
 80074aa:	4a08      	ldr	r2, [pc, #32]	; (80074cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	6013      	str	r3, [r2, #0]
}
 80074b0:	bf00      	nop
 80074b2:	3710      	adds	r7, #16
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	200009b0 	.word	0x200009b0
 80074bc:	200008d8 	.word	0x200008d8
 80074c0:	200009b4 	.word	0x200009b4
 80074c4:	20000994 	.word	0x20000994
 80074c8:	20000990 	.word	0x20000990
 80074cc:	200009cc 	.word	0x200009cc

080074d0 <xTimerCreateTimerTask>:
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b08a      	sub	sp, #40	; 0x28
 80074d4:	af04      	add	r7, sp, #16
 80074d6:	2300      	movs	r3, #0
 80074d8:	617b      	str	r3, [r7, #20]
 80074da:	f000 fb85 	bl	8007be8 <prvCheckForValidListAndQueue>
 80074de:	4b1c      	ldr	r3, [pc, #112]	; (8007550 <xTimerCreateTimerTask+0x80>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d021      	beq.n	800752a <xTimerCreateTimerTask+0x5a>
 80074e6:	2300      	movs	r3, #0
 80074e8:	60fb      	str	r3, [r7, #12]
 80074ea:	2300      	movs	r3, #0
 80074ec:	60bb      	str	r3, [r7, #8]
 80074ee:	1d3a      	adds	r2, r7, #4
 80074f0:	f107 0108 	add.w	r1, r7, #8
 80074f4:	f107 030c 	add.w	r3, r7, #12
 80074f8:	4618      	mov	r0, r3
 80074fa:	f7f9 fdb3 	bl	8001064 <vApplicationGetTimerTaskMemory>
 80074fe:	6879      	ldr	r1, [r7, #4]
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	68fa      	ldr	r2, [r7, #12]
 8007504:	9202      	str	r2, [sp, #8]
 8007506:	9301      	str	r3, [sp, #4]
 8007508:	2302      	movs	r3, #2
 800750a:	9300      	str	r3, [sp, #0]
 800750c:	2300      	movs	r3, #0
 800750e:	460a      	mov	r2, r1
 8007510:	4910      	ldr	r1, [pc, #64]	; (8007554 <xTimerCreateTimerTask+0x84>)
 8007512:	4811      	ldr	r0, [pc, #68]	; (8007558 <xTimerCreateTimerTask+0x88>)
 8007514:	f7fe ff5a 	bl	80063cc <xTaskCreateStatic>
 8007518:	4603      	mov	r3, r0
 800751a:	4a10      	ldr	r2, [pc, #64]	; (800755c <xTimerCreateTimerTask+0x8c>)
 800751c:	6013      	str	r3, [r2, #0]
 800751e:	4b0f      	ldr	r3, [pc, #60]	; (800755c <xTimerCreateTimerTask+0x8c>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d001      	beq.n	800752a <xTimerCreateTimerTask+0x5a>
 8007526:	2301      	movs	r3, #1
 8007528:	617b      	str	r3, [r7, #20]
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d10a      	bne.n	8007546 <xTimerCreateTimerTask+0x76>
 8007530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007534:	f383 8811 	msr	BASEPRI, r3
 8007538:	f3bf 8f6f 	isb	sy
 800753c:	f3bf 8f4f 	dsb	sy
 8007540:	613b      	str	r3, [r7, #16]
 8007542:	bf00      	nop
 8007544:	e7fe      	b.n	8007544 <xTimerCreateTimerTask+0x74>
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	4618      	mov	r0, r3
 800754a:	3718      	adds	r7, #24
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	20000a08 	.word	0x20000a08
 8007554:	0800907c 	.word	0x0800907c
 8007558:	080077c9 	.word	0x080077c9
 800755c:	20000a0c 	.word	0x20000a0c

08007560 <xTimerCreate>:
 8007560:	b580      	push	{r7, lr}
 8007562:	b088      	sub	sp, #32
 8007564:	af02      	add	r7, sp, #8
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
 800756c:	603b      	str	r3, [r7, #0]
 800756e:	2028      	movs	r0, #40	; 0x28
 8007570:	f000 fdca 	bl	8008108 <pvPortMalloc>
 8007574:	6178      	str	r0, [r7, #20]
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d00d      	beq.n	8007598 <xTimerCreate+0x38>
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	2200      	movs	r2, #0
 8007580:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	9301      	str	r3, [sp, #4]
 8007588:	6a3b      	ldr	r3, [r7, #32]
 800758a:	9300      	str	r3, [sp, #0]
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	68b9      	ldr	r1, [r7, #8]
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	f000 f843 	bl	800761e <prvInitialiseNewTimer>
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	4618      	mov	r0, r3
 800759c:	3718      	adds	r7, #24
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <xTimerCreateStatic>:
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b08a      	sub	sp, #40	; 0x28
 80075a6:	af02      	add	r7, sp, #8
 80075a8:	60f8      	str	r0, [r7, #12]
 80075aa:	60b9      	str	r1, [r7, #8]
 80075ac:	607a      	str	r2, [r7, #4]
 80075ae:	603b      	str	r3, [r7, #0]
 80075b0:	2328      	movs	r3, #40	; 0x28
 80075b2:	613b      	str	r3, [r7, #16]
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	2b28      	cmp	r3, #40	; 0x28
 80075b8:	d00a      	beq.n	80075d0 <xTimerCreateStatic+0x2e>
 80075ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075be:	f383 8811 	msr	BASEPRI, r3
 80075c2:	f3bf 8f6f 	isb	sy
 80075c6:	f3bf 8f4f 	dsb	sy
 80075ca:	61bb      	str	r3, [r7, #24]
 80075cc:	bf00      	nop
 80075ce:	e7fe      	b.n	80075ce <xTimerCreateStatic+0x2c>
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d10a      	bne.n	80075ee <xTimerCreateStatic+0x4c>
 80075d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075dc:	f383 8811 	msr	BASEPRI, r3
 80075e0:	f3bf 8f6f 	isb	sy
 80075e4:	f3bf 8f4f 	dsb	sy
 80075e8:	617b      	str	r3, [r7, #20]
 80075ea:	bf00      	nop
 80075ec:	e7fe      	b.n	80075ec <xTimerCreateStatic+0x4a>
 80075ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f0:	61fb      	str	r3, [r7, #28]
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00d      	beq.n	8007614 <xTimerCreateStatic+0x72>
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	2202      	movs	r2, #2
 80075fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	9301      	str	r3, [sp, #4]
 8007604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007606:	9300      	str	r3, [sp, #0]
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	68b9      	ldr	r1, [r7, #8]
 800760e:	68f8      	ldr	r0, [r7, #12]
 8007610:	f000 f805 	bl	800761e <prvInitialiseNewTimer>
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	4618      	mov	r0, r3
 8007618:	3720      	adds	r7, #32
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <prvInitialiseNewTimer>:
 800761e:	b580      	push	{r7, lr}
 8007620:	b086      	sub	sp, #24
 8007622:	af00      	add	r7, sp, #0
 8007624:	60f8      	str	r0, [r7, #12]
 8007626:	60b9      	str	r1, [r7, #8]
 8007628:	607a      	str	r2, [r7, #4]
 800762a:	603b      	str	r3, [r7, #0]
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d10a      	bne.n	8007648 <prvInitialiseNewTimer+0x2a>
 8007632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007636:	f383 8811 	msr	BASEPRI, r3
 800763a:	f3bf 8f6f 	isb	sy
 800763e:	f3bf 8f4f 	dsb	sy
 8007642:	617b      	str	r3, [r7, #20]
 8007644:	bf00      	nop
 8007646:	e7fe      	b.n	8007646 <prvInitialiseNewTimer+0x28>
 8007648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764a:	2b00      	cmp	r3, #0
 800764c:	d01e      	beq.n	800768c <prvInitialiseNewTimer+0x6e>
 800764e:	f000 facb 	bl	8007be8 <prvCheckForValidListAndQueue>
 8007652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	601a      	str	r2, [r3, #0]
 8007658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765a:	68ba      	ldr	r2, [r7, #8]
 800765c:	619a      	str	r2, [r3, #24]
 800765e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007660:	683a      	ldr	r2, [r7, #0]
 8007662:	61da      	str	r2, [r3, #28]
 8007664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007666:	6a3a      	ldr	r2, [r7, #32]
 8007668:	621a      	str	r2, [r3, #32]
 800766a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766c:	3304      	adds	r3, #4
 800766e:	4618      	mov	r0, r3
 8007670:	f7fe f8f6 	bl	8005860 <vListInitialiseItem>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d008      	beq.n	800768c <prvInitialiseNewTimer+0x6e>
 800767a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007680:	f043 0304 	orr.w	r3, r3, #4
 8007684:	b2da      	uxtb	r2, r3
 8007686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007688:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800768c:	bf00      	nop
 800768e:	3718      	adds	r7, #24
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <xTimerGenericCommand>:
 8007694:	b580      	push	{r7, lr}
 8007696:	b08a      	sub	sp, #40	; 0x28
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]
 80076a0:	603b      	str	r3, [r7, #0]
 80076a2:	2300      	movs	r3, #0
 80076a4:	627b      	str	r3, [r7, #36]	; 0x24
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d10a      	bne.n	80076c2 <xTimerGenericCommand+0x2e>
 80076ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b0:	f383 8811 	msr	BASEPRI, r3
 80076b4:	f3bf 8f6f 	isb	sy
 80076b8:	f3bf 8f4f 	dsb	sy
 80076bc:	623b      	str	r3, [r7, #32]
 80076be:	bf00      	nop
 80076c0:	e7fe      	b.n	80076c0 <xTimerGenericCommand+0x2c>
 80076c2:	4b1a      	ldr	r3, [pc, #104]	; (800772c <xTimerGenericCommand+0x98>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d02a      	beq.n	8007720 <xTimerGenericCommand+0x8c>
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	617b      	str	r3, [r7, #20]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	61bb      	str	r3, [r7, #24]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	61fb      	str	r3, [r7, #28]
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	2b05      	cmp	r3, #5
 80076da:	dc18      	bgt.n	800770e <xTimerGenericCommand+0x7a>
 80076dc:	f7ff fc16 	bl	8006f0c <xTaskGetSchedulerState>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d109      	bne.n	80076fa <xTimerGenericCommand+0x66>
 80076e6:	4b11      	ldr	r3, [pc, #68]	; (800772c <xTimerGenericCommand+0x98>)
 80076e8:	6818      	ldr	r0, [r3, #0]
 80076ea:	f107 0114 	add.w	r1, r7, #20
 80076ee:	2300      	movs	r3, #0
 80076f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076f2:	f7fe fa83 	bl	8005bfc <xQueueGenericSend>
 80076f6:	6278      	str	r0, [r7, #36]	; 0x24
 80076f8:	e012      	b.n	8007720 <xTimerGenericCommand+0x8c>
 80076fa:	4b0c      	ldr	r3, [pc, #48]	; (800772c <xTimerGenericCommand+0x98>)
 80076fc:	6818      	ldr	r0, [r3, #0]
 80076fe:	f107 0114 	add.w	r1, r7, #20
 8007702:	2300      	movs	r3, #0
 8007704:	2200      	movs	r2, #0
 8007706:	f7fe fa79 	bl	8005bfc <xQueueGenericSend>
 800770a:	6278      	str	r0, [r7, #36]	; 0x24
 800770c:	e008      	b.n	8007720 <xTimerGenericCommand+0x8c>
 800770e:	4b07      	ldr	r3, [pc, #28]	; (800772c <xTimerGenericCommand+0x98>)
 8007710:	6818      	ldr	r0, [r3, #0]
 8007712:	f107 0114 	add.w	r1, r7, #20
 8007716:	2300      	movs	r3, #0
 8007718:	683a      	ldr	r2, [r7, #0]
 800771a:	f7fe fb6d 	bl	8005df8 <xQueueGenericSendFromISR>
 800771e:	6278      	str	r0, [r7, #36]	; 0x24
 8007720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007722:	4618      	mov	r0, r3
 8007724:	3728      	adds	r7, #40	; 0x28
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	20000a08 	.word	0x20000a08

08007730 <prvProcessExpiredTimer>:
 8007730:	b580      	push	{r7, lr}
 8007732:	b088      	sub	sp, #32
 8007734:	af02      	add	r7, sp, #8
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
 800773a:	4b22      	ldr	r3, [pc, #136]	; (80077c4 <prvProcessExpiredTimer+0x94>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	617b      	str	r3, [r7, #20]
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	3304      	adds	r3, #4
 8007748:	4618      	mov	r0, r3
 800774a:	f7fe f8f3 	bl	8005934 <uxListRemove>
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007754:	f003 0304 	and.w	r3, r3, #4
 8007758:	2b00      	cmp	r3, #0
 800775a:	d022      	beq.n	80077a2 <prvProcessExpiredTimer+0x72>
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	699a      	ldr	r2, [r3, #24]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	18d1      	adds	r1, r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	683a      	ldr	r2, [r7, #0]
 8007768:	6978      	ldr	r0, [r7, #20]
 800776a:	f000 f8d1 	bl	8007910 <prvInsertTimerInActiveList>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d01f      	beq.n	80077b4 <prvProcessExpiredTimer+0x84>
 8007774:	2300      	movs	r3, #0
 8007776:	9300      	str	r3, [sp, #0]
 8007778:	2300      	movs	r3, #0
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	2100      	movs	r1, #0
 800777e:	6978      	ldr	r0, [r7, #20]
 8007780:	f7ff ff88 	bl	8007694 <xTimerGenericCommand>
 8007784:	6138      	str	r0, [r7, #16]
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d113      	bne.n	80077b4 <prvProcessExpiredTimer+0x84>
 800778c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007790:	f383 8811 	msr	BASEPRI, r3
 8007794:	f3bf 8f6f 	isb	sy
 8007798:	f3bf 8f4f 	dsb	sy
 800779c:	60fb      	str	r3, [r7, #12]
 800779e:	bf00      	nop
 80077a0:	e7fe      	b.n	80077a0 <prvProcessExpiredTimer+0x70>
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80077a8:	f023 0301 	bic.w	r3, r3, #1
 80077ac:	b2da      	uxtb	r2, r3
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	6a1b      	ldr	r3, [r3, #32]
 80077b8:	6978      	ldr	r0, [r7, #20]
 80077ba:	4798      	blx	r3
 80077bc:	bf00      	nop
 80077be:	3718      	adds	r7, #24
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	20000a00 	.word	0x20000a00

080077c8 <prvTimerTask>:
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	f107 0308 	add.w	r3, r7, #8
 80077d4:	4618      	mov	r0, r3
 80077d6:	f000 f857 	bl	8007888 <prvGetNextExpireTime>
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	4619      	mov	r1, r3
 80077e0:	68f8      	ldr	r0, [r7, #12]
 80077e2:	f000 f803 	bl	80077ec <prvProcessTimerOrBlockTask>
 80077e6:	f000 f8d5 	bl	8007994 <prvProcessReceivedCommands>
 80077ea:	e7f1      	b.n	80077d0 <prvTimerTask+0x8>

080077ec <prvProcessTimerOrBlockTask>:
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
 80077f6:	f7ff f817 	bl	8006828 <vTaskSuspendAll>
 80077fa:	f107 0308 	add.w	r3, r7, #8
 80077fe:	4618      	mov	r0, r3
 8007800:	f000 f866 	bl	80078d0 <prvSampleTimeNow>
 8007804:	60f8      	str	r0, [r7, #12]
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d130      	bne.n	800786e <prvProcessTimerOrBlockTask+0x82>
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d10a      	bne.n	8007828 <prvProcessTimerOrBlockTask+0x3c>
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	429a      	cmp	r2, r3
 8007818:	d806      	bhi.n	8007828 <prvProcessTimerOrBlockTask+0x3c>
 800781a:	f7ff f813 	bl	8006844 <xTaskResumeAll>
 800781e:	68f9      	ldr	r1, [r7, #12]
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f7ff ff85 	bl	8007730 <prvProcessExpiredTimer>
 8007826:	e024      	b.n	8007872 <prvProcessTimerOrBlockTask+0x86>
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d008      	beq.n	8007840 <prvProcessTimerOrBlockTask+0x54>
 800782e:	4b13      	ldr	r3, [pc, #76]	; (800787c <prvProcessTimerOrBlockTask+0x90>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d101      	bne.n	800783c <prvProcessTimerOrBlockTask+0x50>
 8007838:	2301      	movs	r3, #1
 800783a:	e000      	b.n	800783e <prvProcessTimerOrBlockTask+0x52>
 800783c:	2300      	movs	r3, #0
 800783e:	603b      	str	r3, [r7, #0]
 8007840:	4b0f      	ldr	r3, [pc, #60]	; (8007880 <prvProcessTimerOrBlockTask+0x94>)
 8007842:	6818      	ldr	r0, [r3, #0]
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	1ad3      	subs	r3, r2, r3
 800784a:	683a      	ldr	r2, [r7, #0]
 800784c:	4619      	mov	r1, r3
 800784e:	f7fe fd89 	bl	8006364 <vQueueWaitForMessageRestricted>
 8007852:	f7fe fff7 	bl	8006844 <xTaskResumeAll>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d10a      	bne.n	8007872 <prvProcessTimerOrBlockTask+0x86>
 800785c:	4b09      	ldr	r3, [pc, #36]	; (8007884 <prvProcessTimerOrBlockTask+0x98>)
 800785e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007862:	601a      	str	r2, [r3, #0]
 8007864:	f3bf 8f4f 	dsb	sy
 8007868:	f3bf 8f6f 	isb	sy
 800786c:	e001      	b.n	8007872 <prvProcessTimerOrBlockTask+0x86>
 800786e:	f7fe ffe9 	bl	8006844 <xTaskResumeAll>
 8007872:	bf00      	nop
 8007874:	3710      	adds	r7, #16
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	20000a04 	.word	0x20000a04
 8007880:	20000a08 	.word	0x20000a08
 8007884:	e000ed04 	.word	0xe000ed04

08007888 <prvGetNextExpireTime>:
 8007888:	b480      	push	{r7}
 800788a:	b085      	sub	sp, #20
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	4b0e      	ldr	r3, [pc, #56]	; (80078cc <prvGetNextExpireTime+0x44>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d101      	bne.n	800789e <prvGetNextExpireTime+0x16>
 800789a:	2201      	movs	r2, #1
 800789c:	e000      	b.n	80078a0 <prvGetNextExpireTime+0x18>
 800789e:	2200      	movs	r2, #0
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	601a      	str	r2, [r3, #0]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d105      	bne.n	80078b8 <prvGetNextExpireTime+0x30>
 80078ac:	4b07      	ldr	r3, [pc, #28]	; (80078cc <prvGetNextExpireTime+0x44>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	60fb      	str	r3, [r7, #12]
 80078b6:	e001      	b.n	80078bc <prvGetNextExpireTime+0x34>
 80078b8:	2300      	movs	r3, #0
 80078ba:	60fb      	str	r3, [r7, #12]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	4618      	mov	r0, r3
 80078c0:	3714      	adds	r7, #20
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop
 80078cc:	20000a00 	.word	0x20000a00

080078d0 <prvSampleTimeNow>:
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	f7ff f850 	bl	800697c <xTaskGetTickCount>
 80078dc:	60f8      	str	r0, [r7, #12]
 80078de:	4b0b      	ldr	r3, [pc, #44]	; (800790c <prvSampleTimeNow+0x3c>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	68fa      	ldr	r2, [r7, #12]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d205      	bcs.n	80078f4 <prvSampleTimeNow+0x24>
 80078e8:	f000 f91a 	bl	8007b20 <prvSwitchTimerLists>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	601a      	str	r2, [r3, #0]
 80078f2:	e002      	b.n	80078fa <prvSampleTimeNow+0x2a>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	601a      	str	r2, [r3, #0]
 80078fa:	4a04      	ldr	r2, [pc, #16]	; (800790c <prvSampleTimeNow+0x3c>)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6013      	str	r3, [r2, #0]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	4618      	mov	r0, r3
 8007904:	3710      	adds	r7, #16
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	20000a10 	.word	0x20000a10

08007910 <prvInsertTimerInActiveList>:
 8007910:	b580      	push	{r7, lr}
 8007912:	b086      	sub	sp, #24
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	607a      	str	r2, [r7, #4]
 800791c:	603b      	str	r3, [r7, #0]
 800791e:	2300      	movs	r3, #0
 8007920:	617b      	str	r3, [r7, #20]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	68ba      	ldr	r2, [r7, #8]
 8007926:	605a      	str	r2, [r3, #4]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	68fa      	ldr	r2, [r7, #12]
 800792c:	611a      	str	r2, [r3, #16]
 800792e:	68ba      	ldr	r2, [r7, #8]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	429a      	cmp	r2, r3
 8007934:	d812      	bhi.n	800795c <prvInsertTimerInActiveList+0x4c>
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	1ad2      	subs	r2, r2, r3
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	429a      	cmp	r2, r3
 8007942:	d302      	bcc.n	800794a <prvInsertTimerInActiveList+0x3a>
 8007944:	2301      	movs	r3, #1
 8007946:	617b      	str	r3, [r7, #20]
 8007948:	e01b      	b.n	8007982 <prvInsertTimerInActiveList+0x72>
 800794a:	4b10      	ldr	r3, [pc, #64]	; (800798c <prvInsertTimerInActiveList+0x7c>)
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	3304      	adds	r3, #4
 8007952:	4619      	mov	r1, r3
 8007954:	4610      	mov	r0, r2
 8007956:	f7fd ffb4 	bl	80058c2 <vListInsert>
 800795a:	e012      	b.n	8007982 <prvInsertTimerInActiveList+0x72>
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	429a      	cmp	r2, r3
 8007962:	d206      	bcs.n	8007972 <prvInsertTimerInActiveList+0x62>
 8007964:	68ba      	ldr	r2, [r7, #8]
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	429a      	cmp	r2, r3
 800796a:	d302      	bcc.n	8007972 <prvInsertTimerInActiveList+0x62>
 800796c:	2301      	movs	r3, #1
 800796e:	617b      	str	r3, [r7, #20]
 8007970:	e007      	b.n	8007982 <prvInsertTimerInActiveList+0x72>
 8007972:	4b07      	ldr	r3, [pc, #28]	; (8007990 <prvInsertTimerInActiveList+0x80>)
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	3304      	adds	r3, #4
 800797a:	4619      	mov	r1, r3
 800797c:	4610      	mov	r0, r2
 800797e:	f7fd ffa0 	bl	80058c2 <vListInsert>
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	4618      	mov	r0, r3
 8007986:	3718      	adds	r7, #24
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	20000a04 	.word	0x20000a04
 8007990:	20000a00 	.word	0x20000a00

08007994 <prvProcessReceivedCommands>:
 8007994:	b580      	push	{r7, lr}
 8007996:	b08c      	sub	sp, #48	; 0x30
 8007998:	af02      	add	r7, sp, #8
 800799a:	e0ae      	b.n	8007afa <prvProcessReceivedCommands+0x166>
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	f2c0 80aa 	blt.w	8007af8 <prvProcessReceivedCommands+0x164>
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	627b      	str	r3, [r7, #36]	; 0x24
 80079a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079aa:	695b      	ldr	r3, [r3, #20]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d004      	beq.n	80079ba <prvProcessReceivedCommands+0x26>
 80079b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b2:	3304      	adds	r3, #4
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7fd ffbd 	bl	8005934 <uxListRemove>
 80079ba:	1d3b      	adds	r3, r7, #4
 80079bc:	4618      	mov	r0, r3
 80079be:	f7ff ff87 	bl	80078d0 <prvSampleTimeNow>
 80079c2:	6238      	str	r0, [r7, #32]
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	2b09      	cmp	r3, #9
 80079c8:	f200 8097 	bhi.w	8007afa <prvProcessReceivedCommands+0x166>
 80079cc:	a201      	add	r2, pc, #4	; (adr r2, 80079d4 <prvProcessReceivedCommands+0x40>)
 80079ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d2:	bf00      	nop
 80079d4:	080079fd 	.word	0x080079fd
 80079d8:	080079fd 	.word	0x080079fd
 80079dc:	080079fd 	.word	0x080079fd
 80079e0:	08007a71 	.word	0x08007a71
 80079e4:	08007a85 	.word	0x08007a85
 80079e8:	08007acf 	.word	0x08007acf
 80079ec:	080079fd 	.word	0x080079fd
 80079f0:	080079fd 	.word	0x080079fd
 80079f4:	08007a71 	.word	0x08007a71
 80079f8:	08007a85 	.word	0x08007a85
 80079fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007a02:	f043 0301 	orr.w	r3, r3, #1
 8007a06:	b2da      	uxtb	r2, r3
 8007a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007a0e:	68fa      	ldr	r2, [r7, #12]
 8007a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a12:	699b      	ldr	r3, [r3, #24]
 8007a14:	18d1      	adds	r1, r2, r3
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6a3a      	ldr	r2, [r7, #32]
 8007a1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a1c:	f7ff ff78 	bl	8007910 <prvInsertTimerInActiveList>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d069      	beq.n	8007afa <prvProcessReceivedCommands+0x166>
 8007a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a28:	6a1b      	ldr	r3, [r3, #32]
 8007a2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a2c:	4798      	blx	r3
 8007a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007a34:	f003 0304 	and.w	r3, r3, #4
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d05e      	beq.n	8007afa <prvProcessReceivedCommands+0x166>
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a40:	699b      	ldr	r3, [r3, #24]
 8007a42:	441a      	add	r2, r3
 8007a44:	2300      	movs	r3, #0
 8007a46:	9300      	str	r3, [sp, #0]
 8007a48:	2300      	movs	r3, #0
 8007a4a:	2100      	movs	r1, #0
 8007a4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a4e:	f7ff fe21 	bl	8007694 <xTimerGenericCommand>
 8007a52:	61f8      	str	r0, [r7, #28]
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d14f      	bne.n	8007afa <prvProcessReceivedCommands+0x166>
 8007a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a5e:	f383 8811 	msr	BASEPRI, r3
 8007a62:	f3bf 8f6f 	isb	sy
 8007a66:	f3bf 8f4f 	dsb	sy
 8007a6a:	61bb      	str	r3, [r7, #24]
 8007a6c:	bf00      	nop
 8007a6e:	e7fe      	b.n	8007a6e <prvProcessReceivedCommands+0xda>
 8007a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007a76:	f023 0301 	bic.w	r3, r3, #1
 8007a7a:	b2da      	uxtb	r2, r3
 8007a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007a82:	e03a      	b.n	8007afa <prvProcessReceivedCommands+0x166>
 8007a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007a8a:	f043 0301 	orr.w	r3, r3, #1
 8007a8e:	b2da      	uxtb	r2, r3
 8007a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007a96:	68fa      	ldr	r2, [r7, #12]
 8007a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9a:	619a      	str	r2, [r3, #24]
 8007a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9e:	699b      	ldr	r3, [r3, #24]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d10a      	bne.n	8007aba <prvProcessReceivedCommands+0x126>
 8007aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa8:	f383 8811 	msr	BASEPRI, r3
 8007aac:	f3bf 8f6f 	isb	sy
 8007ab0:	f3bf 8f4f 	dsb	sy
 8007ab4:	617b      	str	r3, [r7, #20]
 8007ab6:	bf00      	nop
 8007ab8:	e7fe      	b.n	8007ab8 <prvProcessReceivedCommands+0x124>
 8007aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007abc:	699a      	ldr	r2, [r3, #24]
 8007abe:	6a3b      	ldr	r3, [r7, #32]
 8007ac0:	18d1      	adds	r1, r2, r3
 8007ac2:	6a3b      	ldr	r3, [r7, #32]
 8007ac4:	6a3a      	ldr	r2, [r7, #32]
 8007ac6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ac8:	f7ff ff22 	bl	8007910 <prvInsertTimerInActiveList>
 8007acc:	e015      	b.n	8007afa <prvProcessReceivedCommands+0x166>
 8007ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007ad4:	f003 0302 	and.w	r3, r3, #2
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d103      	bne.n	8007ae4 <prvProcessReceivedCommands+0x150>
 8007adc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ade:	f000 fbdf 	bl	80082a0 <vPortFree>
 8007ae2:	e00a      	b.n	8007afa <prvProcessReceivedCommands+0x166>
 8007ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007aea:	f023 0301 	bic.w	r3, r3, #1
 8007aee:	b2da      	uxtb	r2, r3
 8007af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007af6:	e000      	b.n	8007afa <prvProcessReceivedCommands+0x166>
 8007af8:	bf00      	nop
 8007afa:	4b08      	ldr	r3, [pc, #32]	; (8007b1c <prvProcessReceivedCommands+0x188>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f107 0108 	add.w	r1, r7, #8
 8007b02:	2200      	movs	r2, #0
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7fe fa13 	bl	8005f30 <xQueueReceive>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f47f af45 	bne.w	800799c <prvProcessReceivedCommands+0x8>
 8007b12:	bf00      	nop
 8007b14:	bf00      	nop
 8007b16:	3728      	adds	r7, #40	; 0x28
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	20000a08 	.word	0x20000a08

08007b20 <prvSwitchTimerLists>:
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b088      	sub	sp, #32
 8007b24:	af02      	add	r7, sp, #8
 8007b26:	e048      	b.n	8007bba <prvSwitchTimerLists+0x9a>
 8007b28:	4b2d      	ldr	r3, [pc, #180]	; (8007be0 <prvSwitchTimerLists+0xc0>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	613b      	str	r3, [r7, #16]
 8007b32:	4b2b      	ldr	r3, [pc, #172]	; (8007be0 <prvSwitchTimerLists+0xc0>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	68db      	ldr	r3, [r3, #12]
 8007b3a:	60fb      	str	r3, [r7, #12]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	3304      	adds	r3, #4
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7fd fef7 	bl	8005934 <uxListRemove>
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6a1b      	ldr	r3, [r3, #32]
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	4798      	blx	r3
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007b54:	f003 0304 	and.w	r3, r3, #4
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d02e      	beq.n	8007bba <prvSwitchTimerLists+0x9a>
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	699b      	ldr	r3, [r3, #24]
 8007b60:	693a      	ldr	r2, [r7, #16]
 8007b62:	4413      	add	r3, r2
 8007b64:	60bb      	str	r3, [r7, #8]
 8007b66:	68ba      	ldr	r2, [r7, #8]
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d90e      	bls.n	8007b8c <prvSwitchTimerLists+0x6c>
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	68ba      	ldr	r2, [r7, #8]
 8007b72:	605a      	str	r2, [r3, #4]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	611a      	str	r2, [r3, #16]
 8007b7a:	4b19      	ldr	r3, [pc, #100]	; (8007be0 <prvSwitchTimerLists+0xc0>)
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	3304      	adds	r3, #4
 8007b82:	4619      	mov	r1, r3
 8007b84:	4610      	mov	r0, r2
 8007b86:	f7fd fe9c 	bl	80058c2 <vListInsert>
 8007b8a:	e016      	b.n	8007bba <prvSwitchTimerLists+0x9a>
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	9300      	str	r3, [sp, #0]
 8007b90:	2300      	movs	r3, #0
 8007b92:	693a      	ldr	r2, [r7, #16]
 8007b94:	2100      	movs	r1, #0
 8007b96:	68f8      	ldr	r0, [r7, #12]
 8007b98:	f7ff fd7c 	bl	8007694 <xTimerGenericCommand>
 8007b9c:	6078      	str	r0, [r7, #4]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d10a      	bne.n	8007bba <prvSwitchTimerLists+0x9a>
 8007ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba8:	f383 8811 	msr	BASEPRI, r3
 8007bac:	f3bf 8f6f 	isb	sy
 8007bb0:	f3bf 8f4f 	dsb	sy
 8007bb4:	603b      	str	r3, [r7, #0]
 8007bb6:	bf00      	nop
 8007bb8:	e7fe      	b.n	8007bb8 <prvSwitchTimerLists+0x98>
 8007bba:	4b09      	ldr	r3, [pc, #36]	; (8007be0 <prvSwitchTimerLists+0xc0>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1b1      	bne.n	8007b28 <prvSwitchTimerLists+0x8>
 8007bc4:	4b06      	ldr	r3, [pc, #24]	; (8007be0 <prvSwitchTimerLists+0xc0>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	617b      	str	r3, [r7, #20]
 8007bca:	4b06      	ldr	r3, [pc, #24]	; (8007be4 <prvSwitchTimerLists+0xc4>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a04      	ldr	r2, [pc, #16]	; (8007be0 <prvSwitchTimerLists+0xc0>)
 8007bd0:	6013      	str	r3, [r2, #0]
 8007bd2:	4a04      	ldr	r2, [pc, #16]	; (8007be4 <prvSwitchTimerLists+0xc4>)
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	6013      	str	r3, [r2, #0]
 8007bd8:	bf00      	nop
 8007bda:	3718      	adds	r7, #24
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	20000a00 	.word	0x20000a00
 8007be4:	20000a04 	.word	0x20000a04

08007be8 <prvCheckForValidListAndQueue>:
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af02      	add	r7, sp, #8
 8007bee:	f000 f969 	bl	8007ec4 <vPortEnterCritical>
 8007bf2:	4b15      	ldr	r3, [pc, #84]	; (8007c48 <prvCheckForValidListAndQueue+0x60>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d120      	bne.n	8007c3c <prvCheckForValidListAndQueue+0x54>
 8007bfa:	4814      	ldr	r0, [pc, #80]	; (8007c4c <prvCheckForValidListAndQueue+0x64>)
 8007bfc:	f7fd fe10 	bl	8005820 <vListInitialise>
 8007c00:	4813      	ldr	r0, [pc, #76]	; (8007c50 <prvCheckForValidListAndQueue+0x68>)
 8007c02:	f7fd fe0d 	bl	8005820 <vListInitialise>
 8007c06:	4b13      	ldr	r3, [pc, #76]	; (8007c54 <prvCheckForValidListAndQueue+0x6c>)
 8007c08:	4a10      	ldr	r2, [pc, #64]	; (8007c4c <prvCheckForValidListAndQueue+0x64>)
 8007c0a:	601a      	str	r2, [r3, #0]
 8007c0c:	4b12      	ldr	r3, [pc, #72]	; (8007c58 <prvCheckForValidListAndQueue+0x70>)
 8007c0e:	4a10      	ldr	r2, [pc, #64]	; (8007c50 <prvCheckForValidListAndQueue+0x68>)
 8007c10:	601a      	str	r2, [r3, #0]
 8007c12:	2300      	movs	r3, #0
 8007c14:	9300      	str	r3, [sp, #0]
 8007c16:	4b11      	ldr	r3, [pc, #68]	; (8007c5c <prvCheckForValidListAndQueue+0x74>)
 8007c18:	4a11      	ldr	r2, [pc, #68]	; (8007c60 <prvCheckForValidListAndQueue+0x78>)
 8007c1a:	210c      	movs	r1, #12
 8007c1c:	200a      	movs	r0, #10
 8007c1e:	f7fd ff1b 	bl	8005a58 <xQueueGenericCreateStatic>
 8007c22:	4603      	mov	r3, r0
 8007c24:	4a08      	ldr	r2, [pc, #32]	; (8007c48 <prvCheckForValidListAndQueue+0x60>)
 8007c26:	6013      	str	r3, [r2, #0]
 8007c28:	4b07      	ldr	r3, [pc, #28]	; (8007c48 <prvCheckForValidListAndQueue+0x60>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d005      	beq.n	8007c3c <prvCheckForValidListAndQueue+0x54>
 8007c30:	4b05      	ldr	r3, [pc, #20]	; (8007c48 <prvCheckForValidListAndQueue+0x60>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	490b      	ldr	r1, [pc, #44]	; (8007c64 <prvCheckForValidListAndQueue+0x7c>)
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7fe fb6a 	bl	8006310 <vQueueAddToRegistry>
 8007c3c:	f000 f972 	bl	8007f24 <vPortExitCritical>
 8007c40:	bf00      	nop
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	20000a08 	.word	0x20000a08
 8007c4c:	200009d8 	.word	0x200009d8
 8007c50:	200009ec 	.word	0x200009ec
 8007c54:	20000a00 	.word	0x20000a00
 8007c58:	20000a04 	.word	0x20000a04
 8007c5c:	20000a8c 	.word	0x20000a8c
 8007c60:	20000a14 	.word	0x20000a14
 8007c64:	08009084 	.word	0x08009084

08007c68 <pxPortInitialiseStack>:
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	607a      	str	r2, [r7, #4]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	3b04      	subs	r3, #4
 8007c78:	60fb      	str	r3, [r7, #12]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007c80:	601a      	str	r2, [r3, #0]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	3b04      	subs	r3, #4
 8007c86:	60fb      	str	r3, [r7, #12]
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	f023 0201 	bic.w	r2, r3, #1
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	601a      	str	r2, [r3, #0]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	3b04      	subs	r3, #4
 8007c96:	60fb      	str	r3, [r7, #12]
 8007c98:	4a0c      	ldr	r2, [pc, #48]	; (8007ccc <pxPortInitialiseStack+0x64>)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	601a      	str	r2, [r3, #0]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	3b14      	subs	r3, #20
 8007ca2:	60fb      	str	r3, [r7, #12]
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	601a      	str	r2, [r3, #0]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	3b04      	subs	r3, #4
 8007cae:	60fb      	str	r3, [r7, #12]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f06f 0202 	mvn.w	r2, #2
 8007cb6:	601a      	str	r2, [r3, #0]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	3b20      	subs	r3, #32
 8007cbc:	60fb      	str	r3, [r7, #12]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3714      	adds	r7, #20
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr
 8007ccc:	08007cd1 	.word	0x08007cd1

08007cd0 <prvTaskExitError>:
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	607b      	str	r3, [r7, #4]
 8007cda:	4b12      	ldr	r3, [pc, #72]	; (8007d24 <prvTaskExitError+0x54>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ce2:	d00a      	beq.n	8007cfa <prvTaskExitError+0x2a>
 8007ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce8:	f383 8811 	msr	BASEPRI, r3
 8007cec:	f3bf 8f6f 	isb	sy
 8007cf0:	f3bf 8f4f 	dsb	sy
 8007cf4:	60fb      	str	r3, [r7, #12]
 8007cf6:	bf00      	nop
 8007cf8:	e7fe      	b.n	8007cf8 <prvTaskExitError+0x28>
 8007cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfe:	f383 8811 	msr	BASEPRI, r3
 8007d02:	f3bf 8f6f 	isb	sy
 8007d06:	f3bf 8f4f 	dsb	sy
 8007d0a:	60bb      	str	r3, [r7, #8]
 8007d0c:	bf00      	nop
 8007d0e:	bf00      	nop
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d0fc      	beq.n	8007d10 <prvTaskExitError+0x40>
 8007d16:	bf00      	nop
 8007d18:	bf00      	nop
 8007d1a:	3714      	adds	r7, #20
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr
 8007d24:	2000000c 	.word	0x2000000c
	...

08007d30 <SVC_Handler>:
 8007d30:	4b07      	ldr	r3, [pc, #28]	; (8007d50 <pxCurrentTCBConst2>)
 8007d32:	6819      	ldr	r1, [r3, #0]
 8007d34:	6808      	ldr	r0, [r1, #0]
 8007d36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d3a:	f380 8809 	msr	PSP, r0
 8007d3e:	f3bf 8f6f 	isb	sy
 8007d42:	f04f 0000 	mov.w	r0, #0
 8007d46:	f380 8811 	msr	BASEPRI, r0
 8007d4a:	4770      	bx	lr
 8007d4c:	f3af 8000 	nop.w

08007d50 <pxCurrentTCBConst2>:
 8007d50:	200008d8 	.word	0x200008d8
 8007d54:	bf00      	nop
 8007d56:	bf00      	nop

08007d58 <prvPortStartFirstTask>:
 8007d58:	4808      	ldr	r0, [pc, #32]	; (8007d7c <prvPortStartFirstTask+0x24>)
 8007d5a:	6800      	ldr	r0, [r0, #0]
 8007d5c:	6800      	ldr	r0, [r0, #0]
 8007d5e:	f380 8808 	msr	MSP, r0
 8007d62:	f04f 0000 	mov.w	r0, #0
 8007d66:	f380 8814 	msr	CONTROL, r0
 8007d6a:	b662      	cpsie	i
 8007d6c:	b661      	cpsie	f
 8007d6e:	f3bf 8f4f 	dsb	sy
 8007d72:	f3bf 8f6f 	isb	sy
 8007d76:	df00      	svc	0
 8007d78:	bf00      	nop
 8007d7a:	bf00      	nop
 8007d7c:	e000ed08 	.word	0xe000ed08

08007d80 <xPortStartScheduler>:
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b086      	sub	sp, #24
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	4b46      	ldr	r3, [pc, #280]	; (8007ea0 <xPortStartScheduler+0x120>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a46      	ldr	r2, [pc, #280]	; (8007ea4 <xPortStartScheduler+0x124>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d10a      	bne.n	8007da6 <xPortStartScheduler+0x26>
 8007d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d94:	f383 8811 	msr	BASEPRI, r3
 8007d98:	f3bf 8f6f 	isb	sy
 8007d9c:	f3bf 8f4f 	dsb	sy
 8007da0:	613b      	str	r3, [r7, #16]
 8007da2:	bf00      	nop
 8007da4:	e7fe      	b.n	8007da4 <xPortStartScheduler+0x24>
 8007da6:	4b3e      	ldr	r3, [pc, #248]	; (8007ea0 <xPortStartScheduler+0x120>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a3f      	ldr	r2, [pc, #252]	; (8007ea8 <xPortStartScheduler+0x128>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d10a      	bne.n	8007dc6 <xPortStartScheduler+0x46>
 8007db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db4:	f383 8811 	msr	BASEPRI, r3
 8007db8:	f3bf 8f6f 	isb	sy
 8007dbc:	f3bf 8f4f 	dsb	sy
 8007dc0:	60fb      	str	r3, [r7, #12]
 8007dc2:	bf00      	nop
 8007dc4:	e7fe      	b.n	8007dc4 <xPortStartScheduler+0x44>
 8007dc6:	4b39      	ldr	r3, [pc, #228]	; (8007eac <xPortStartScheduler+0x12c>)
 8007dc8:	617b      	str	r3, [r7, #20]
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	607b      	str	r3, [r7, #4]
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	22ff      	movs	r2, #255	; 0xff
 8007dd6:	701a      	strb	r2, [r3, #0]
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	70fb      	strb	r3, [r7, #3]
 8007de0:	78fb      	ldrb	r3, [r7, #3]
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007de8:	b2da      	uxtb	r2, r3
 8007dea:	4b31      	ldr	r3, [pc, #196]	; (8007eb0 <xPortStartScheduler+0x130>)
 8007dec:	701a      	strb	r2, [r3, #0]
 8007dee:	4b31      	ldr	r3, [pc, #196]	; (8007eb4 <xPortStartScheduler+0x134>)
 8007df0:	2207      	movs	r2, #7
 8007df2:	601a      	str	r2, [r3, #0]
 8007df4:	e009      	b.n	8007e0a <xPortStartScheduler+0x8a>
 8007df6:	4b2f      	ldr	r3, [pc, #188]	; (8007eb4 <xPortStartScheduler+0x134>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	3b01      	subs	r3, #1
 8007dfc:	4a2d      	ldr	r2, [pc, #180]	; (8007eb4 <xPortStartScheduler+0x134>)
 8007dfe:	6013      	str	r3, [r2, #0]
 8007e00:	78fb      	ldrb	r3, [r7, #3]
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	005b      	lsls	r3, r3, #1
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	70fb      	strb	r3, [r7, #3]
 8007e0a:	78fb      	ldrb	r3, [r7, #3]
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e12:	2b80      	cmp	r3, #128	; 0x80
 8007e14:	d0ef      	beq.n	8007df6 <xPortStartScheduler+0x76>
 8007e16:	4b27      	ldr	r3, [pc, #156]	; (8007eb4 <xPortStartScheduler+0x134>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f1c3 0307 	rsb	r3, r3, #7
 8007e1e:	2b04      	cmp	r3, #4
 8007e20:	d00a      	beq.n	8007e38 <xPortStartScheduler+0xb8>
 8007e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e26:	f383 8811 	msr	BASEPRI, r3
 8007e2a:	f3bf 8f6f 	isb	sy
 8007e2e:	f3bf 8f4f 	dsb	sy
 8007e32:	60bb      	str	r3, [r7, #8]
 8007e34:	bf00      	nop
 8007e36:	e7fe      	b.n	8007e36 <xPortStartScheduler+0xb6>
 8007e38:	4b1e      	ldr	r3, [pc, #120]	; (8007eb4 <xPortStartScheduler+0x134>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	021b      	lsls	r3, r3, #8
 8007e3e:	4a1d      	ldr	r2, [pc, #116]	; (8007eb4 <xPortStartScheduler+0x134>)
 8007e40:	6013      	str	r3, [r2, #0]
 8007e42:	4b1c      	ldr	r3, [pc, #112]	; (8007eb4 <xPortStartScheduler+0x134>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e4a:	4a1a      	ldr	r2, [pc, #104]	; (8007eb4 <xPortStartScheduler+0x134>)
 8007e4c:	6013      	str	r3, [r2, #0]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	b2da      	uxtb	r2, r3
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	701a      	strb	r2, [r3, #0]
 8007e56:	4b18      	ldr	r3, [pc, #96]	; (8007eb8 <xPortStartScheduler+0x138>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a17      	ldr	r2, [pc, #92]	; (8007eb8 <xPortStartScheduler+0x138>)
 8007e5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007e60:	6013      	str	r3, [r2, #0]
 8007e62:	4b15      	ldr	r3, [pc, #84]	; (8007eb8 <xPortStartScheduler+0x138>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a14      	ldr	r2, [pc, #80]	; (8007eb8 <xPortStartScheduler+0x138>)
 8007e68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007e6c:	6013      	str	r3, [r2, #0]
 8007e6e:	f000 f8dd 	bl	800802c <vPortSetupTimerInterrupt>
 8007e72:	4b12      	ldr	r3, [pc, #72]	; (8007ebc <xPortStartScheduler+0x13c>)
 8007e74:	2200      	movs	r2, #0
 8007e76:	601a      	str	r2, [r3, #0]
 8007e78:	f000 f8fc 	bl	8008074 <vPortEnableVFP>
 8007e7c:	4b10      	ldr	r3, [pc, #64]	; (8007ec0 <xPortStartScheduler+0x140>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a0f      	ldr	r2, [pc, #60]	; (8007ec0 <xPortStartScheduler+0x140>)
 8007e82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007e86:	6013      	str	r3, [r2, #0]
 8007e88:	f7ff ff66 	bl	8007d58 <prvPortStartFirstTask>
 8007e8c:	f7fe fe3e 	bl	8006b0c <vTaskSwitchContext>
 8007e90:	f7ff ff1e 	bl	8007cd0 <prvTaskExitError>
 8007e94:	2300      	movs	r3, #0
 8007e96:	4618      	mov	r0, r3
 8007e98:	3718      	adds	r7, #24
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	e000ed00 	.word	0xe000ed00
 8007ea4:	410fc271 	.word	0x410fc271
 8007ea8:	410fc270 	.word	0x410fc270
 8007eac:	e000e400 	.word	0xe000e400
 8007eb0:	20000ad4 	.word	0x20000ad4
 8007eb4:	20000ad8 	.word	0x20000ad8
 8007eb8:	e000ed20 	.word	0xe000ed20
 8007ebc:	2000000c 	.word	0x2000000c
 8007ec0:	e000ef34 	.word	0xe000ef34

08007ec4 <vPortEnterCritical>:
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ece:	f383 8811 	msr	BASEPRI, r3
 8007ed2:	f3bf 8f6f 	isb	sy
 8007ed6:	f3bf 8f4f 	dsb	sy
 8007eda:	607b      	str	r3, [r7, #4]
 8007edc:	bf00      	nop
 8007ede:	4b0f      	ldr	r3, [pc, #60]	; (8007f1c <vPortEnterCritical+0x58>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	4a0d      	ldr	r2, [pc, #52]	; (8007f1c <vPortEnterCritical+0x58>)
 8007ee6:	6013      	str	r3, [r2, #0]
 8007ee8:	4b0c      	ldr	r3, [pc, #48]	; (8007f1c <vPortEnterCritical+0x58>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d10f      	bne.n	8007f10 <vPortEnterCritical+0x4c>
 8007ef0:	4b0b      	ldr	r3, [pc, #44]	; (8007f20 <vPortEnterCritical+0x5c>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d00a      	beq.n	8007f10 <vPortEnterCritical+0x4c>
 8007efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007efe:	f383 8811 	msr	BASEPRI, r3
 8007f02:	f3bf 8f6f 	isb	sy
 8007f06:	f3bf 8f4f 	dsb	sy
 8007f0a:	603b      	str	r3, [r7, #0]
 8007f0c:	bf00      	nop
 8007f0e:	e7fe      	b.n	8007f0e <vPortEnterCritical+0x4a>
 8007f10:	bf00      	nop
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr
 8007f1c:	2000000c 	.word	0x2000000c
 8007f20:	e000ed04 	.word	0xe000ed04

08007f24 <vPortExitCritical>:
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	4b12      	ldr	r3, [pc, #72]	; (8007f74 <vPortExitCritical+0x50>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d10a      	bne.n	8007f48 <vPortExitCritical+0x24>
 8007f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f36:	f383 8811 	msr	BASEPRI, r3
 8007f3a:	f3bf 8f6f 	isb	sy
 8007f3e:	f3bf 8f4f 	dsb	sy
 8007f42:	607b      	str	r3, [r7, #4]
 8007f44:	bf00      	nop
 8007f46:	e7fe      	b.n	8007f46 <vPortExitCritical+0x22>
 8007f48:	4b0a      	ldr	r3, [pc, #40]	; (8007f74 <vPortExitCritical+0x50>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	4a09      	ldr	r2, [pc, #36]	; (8007f74 <vPortExitCritical+0x50>)
 8007f50:	6013      	str	r3, [r2, #0]
 8007f52:	4b08      	ldr	r3, [pc, #32]	; (8007f74 <vPortExitCritical+0x50>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d105      	bne.n	8007f66 <vPortExitCritical+0x42>
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	603b      	str	r3, [r7, #0]
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	f383 8811 	msr	BASEPRI, r3
 8007f64:	bf00      	nop
 8007f66:	bf00      	nop
 8007f68:	370c      	adds	r7, #12
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	2000000c 	.word	0x2000000c
	...

08007f80 <PendSV_Handler>:
 8007f80:	f3ef 8009 	mrs	r0, PSP
 8007f84:	f3bf 8f6f 	isb	sy
 8007f88:	4b15      	ldr	r3, [pc, #84]	; (8007fe0 <pxCurrentTCBConst>)
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	f01e 0f10 	tst.w	lr, #16
 8007f90:	bf08      	it	eq
 8007f92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007f96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f9a:	6010      	str	r0, [r2, #0]
 8007f9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007fa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007fa4:	f380 8811 	msr	BASEPRI, r0
 8007fa8:	f3bf 8f4f 	dsb	sy
 8007fac:	f3bf 8f6f 	isb	sy
 8007fb0:	f7fe fdac 	bl	8006b0c <vTaskSwitchContext>
 8007fb4:	f04f 0000 	mov.w	r0, #0
 8007fb8:	f380 8811 	msr	BASEPRI, r0
 8007fbc:	bc09      	pop	{r0, r3}
 8007fbe:	6819      	ldr	r1, [r3, #0]
 8007fc0:	6808      	ldr	r0, [r1, #0]
 8007fc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc6:	f01e 0f10 	tst.w	lr, #16
 8007fca:	bf08      	it	eq
 8007fcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007fd0:	f380 8809 	msr	PSP, r0
 8007fd4:	f3bf 8f6f 	isb	sy
 8007fd8:	4770      	bx	lr
 8007fda:	bf00      	nop
 8007fdc:	f3af 8000 	nop.w

08007fe0 <pxCurrentTCBConst>:
 8007fe0:	200008d8 	.word	0x200008d8
 8007fe4:	bf00      	nop
 8007fe6:	bf00      	nop

08007fe8 <SysTick_Handler>:
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b082      	sub	sp, #8
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff2:	f383 8811 	msr	BASEPRI, r3
 8007ff6:	f3bf 8f6f 	isb	sy
 8007ffa:	f3bf 8f4f 	dsb	sy
 8007ffe:	607b      	str	r3, [r7, #4]
 8008000:	bf00      	nop
 8008002:	f7fe fccb 	bl	800699c <xTaskIncrementTick>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d003      	beq.n	8008014 <SysTick_Handler+0x2c>
 800800c:	4b06      	ldr	r3, [pc, #24]	; (8008028 <SysTick_Handler+0x40>)
 800800e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008012:	601a      	str	r2, [r3, #0]
 8008014:	2300      	movs	r3, #0
 8008016:	603b      	str	r3, [r7, #0]
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	f383 8811 	msr	BASEPRI, r3
 800801e:	bf00      	nop
 8008020:	bf00      	nop
 8008022:	3708      	adds	r7, #8
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}
 8008028:	e000ed04 	.word	0xe000ed04

0800802c <vPortSetupTimerInterrupt>:
 800802c:	b480      	push	{r7}
 800802e:	af00      	add	r7, sp, #0
 8008030:	4b0b      	ldr	r3, [pc, #44]	; (8008060 <vPortSetupTimerInterrupt+0x34>)
 8008032:	2200      	movs	r2, #0
 8008034:	601a      	str	r2, [r3, #0]
 8008036:	4b0b      	ldr	r3, [pc, #44]	; (8008064 <vPortSetupTimerInterrupt+0x38>)
 8008038:	2200      	movs	r2, #0
 800803a:	601a      	str	r2, [r3, #0]
 800803c:	4b0a      	ldr	r3, [pc, #40]	; (8008068 <vPortSetupTimerInterrupt+0x3c>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a0a      	ldr	r2, [pc, #40]	; (800806c <vPortSetupTimerInterrupt+0x40>)
 8008042:	fba2 2303 	umull	r2, r3, r2, r3
 8008046:	099b      	lsrs	r3, r3, #6
 8008048:	4a09      	ldr	r2, [pc, #36]	; (8008070 <vPortSetupTimerInterrupt+0x44>)
 800804a:	3b01      	subs	r3, #1
 800804c:	6013      	str	r3, [r2, #0]
 800804e:	4b04      	ldr	r3, [pc, #16]	; (8008060 <vPortSetupTimerInterrupt+0x34>)
 8008050:	2207      	movs	r2, #7
 8008052:	601a      	str	r2, [r3, #0]
 8008054:	bf00      	nop
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr
 800805e:	bf00      	nop
 8008060:	e000e010 	.word	0xe000e010
 8008064:	e000e018 	.word	0xe000e018
 8008068:	20000000 	.word	0x20000000
 800806c:	10624dd3 	.word	0x10624dd3
 8008070:	e000e014 	.word	0xe000e014

08008074 <vPortEnableVFP>:
 8008074:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008084 <vPortEnableVFP+0x10>
 8008078:	6801      	ldr	r1, [r0, #0]
 800807a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800807e:	6001      	str	r1, [r0, #0]
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	e000ed88 	.word	0xe000ed88

08008088 <vPortValidateInterruptPriority>:
 8008088:	b480      	push	{r7}
 800808a:	b085      	sub	sp, #20
 800808c:	af00      	add	r7, sp, #0
 800808e:	f3ef 8305 	mrs	r3, IPSR
 8008092:	60fb      	str	r3, [r7, #12]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2b0f      	cmp	r3, #15
 8008098:	d914      	bls.n	80080c4 <vPortValidateInterruptPriority+0x3c>
 800809a:	4a17      	ldr	r2, [pc, #92]	; (80080f8 <vPortValidateInterruptPriority+0x70>)
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	4413      	add	r3, r2
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	72fb      	strb	r3, [r7, #11]
 80080a4:	4b15      	ldr	r3, [pc, #84]	; (80080fc <vPortValidateInterruptPriority+0x74>)
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	7afa      	ldrb	r2, [r7, #11]
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d20a      	bcs.n	80080c4 <vPortValidateInterruptPriority+0x3c>
 80080ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b2:	f383 8811 	msr	BASEPRI, r3
 80080b6:	f3bf 8f6f 	isb	sy
 80080ba:	f3bf 8f4f 	dsb	sy
 80080be:	607b      	str	r3, [r7, #4]
 80080c0:	bf00      	nop
 80080c2:	e7fe      	b.n	80080c2 <vPortValidateInterruptPriority+0x3a>
 80080c4:	4b0e      	ldr	r3, [pc, #56]	; (8008100 <vPortValidateInterruptPriority+0x78>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80080cc:	4b0d      	ldr	r3, [pc, #52]	; (8008104 <vPortValidateInterruptPriority+0x7c>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d90a      	bls.n	80080ea <vPortValidateInterruptPriority+0x62>
 80080d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d8:	f383 8811 	msr	BASEPRI, r3
 80080dc:	f3bf 8f6f 	isb	sy
 80080e0:	f3bf 8f4f 	dsb	sy
 80080e4:	603b      	str	r3, [r7, #0]
 80080e6:	bf00      	nop
 80080e8:	e7fe      	b.n	80080e8 <vPortValidateInterruptPriority+0x60>
 80080ea:	bf00      	nop
 80080ec:	3714      	adds	r7, #20
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr
 80080f6:	bf00      	nop
 80080f8:	e000e3f0 	.word	0xe000e3f0
 80080fc:	20000ad4 	.word	0x20000ad4
 8008100:	e000ed0c 	.word	0xe000ed0c
 8008104:	20000ad8 	.word	0x20000ad8

08008108 <pvPortMalloc>:
 8008108:	b580      	push	{r7, lr}
 800810a:	b08a      	sub	sp, #40	; 0x28
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	2300      	movs	r3, #0
 8008112:	61fb      	str	r3, [r7, #28]
 8008114:	f7fe fb88 	bl	8006828 <vTaskSuspendAll>
 8008118:	4b5b      	ldr	r3, [pc, #364]	; (8008288 <pvPortMalloc+0x180>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d101      	bne.n	8008124 <pvPortMalloc+0x1c>
 8008120:	f000 f920 	bl	8008364 <prvHeapInit>
 8008124:	4b59      	ldr	r3, [pc, #356]	; (800828c <pvPortMalloc+0x184>)
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4013      	ands	r3, r2
 800812c:	2b00      	cmp	r3, #0
 800812e:	f040 8093 	bne.w	8008258 <pvPortMalloc+0x150>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d01d      	beq.n	8008174 <pvPortMalloc+0x6c>
 8008138:	2208      	movs	r2, #8
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4413      	add	r3, r2
 800813e:	607b      	str	r3, [r7, #4]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f003 0307 	and.w	r3, r3, #7
 8008146:	2b00      	cmp	r3, #0
 8008148:	d014      	beq.n	8008174 <pvPortMalloc+0x6c>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f023 0307 	bic.w	r3, r3, #7
 8008150:	3308      	adds	r3, #8
 8008152:	607b      	str	r3, [r7, #4]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f003 0307 	and.w	r3, r3, #7
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00a      	beq.n	8008174 <pvPortMalloc+0x6c>
 800815e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008162:	f383 8811 	msr	BASEPRI, r3
 8008166:	f3bf 8f6f 	isb	sy
 800816a:	f3bf 8f4f 	dsb	sy
 800816e:	617b      	str	r3, [r7, #20]
 8008170:	bf00      	nop
 8008172:	e7fe      	b.n	8008172 <pvPortMalloc+0x6a>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d06e      	beq.n	8008258 <pvPortMalloc+0x150>
 800817a:	4b45      	ldr	r3, [pc, #276]	; (8008290 <pvPortMalloc+0x188>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	429a      	cmp	r2, r3
 8008182:	d869      	bhi.n	8008258 <pvPortMalloc+0x150>
 8008184:	4b43      	ldr	r3, [pc, #268]	; (8008294 <pvPortMalloc+0x18c>)
 8008186:	623b      	str	r3, [r7, #32]
 8008188:	4b42      	ldr	r3, [pc, #264]	; (8008294 <pvPortMalloc+0x18c>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	627b      	str	r3, [r7, #36]	; 0x24
 800818e:	e004      	b.n	800819a <pvPortMalloc+0x92>
 8008190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008192:	623b      	str	r3, [r7, #32]
 8008194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	627b      	str	r3, [r7, #36]	; 0x24
 800819a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d903      	bls.n	80081ac <pvPortMalloc+0xa4>
 80081a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d1f1      	bne.n	8008190 <pvPortMalloc+0x88>
 80081ac:	4b36      	ldr	r3, [pc, #216]	; (8008288 <pvPortMalloc+0x180>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d050      	beq.n	8008258 <pvPortMalloc+0x150>
 80081b6:	6a3b      	ldr	r3, [r7, #32]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2208      	movs	r2, #8
 80081bc:	4413      	add	r3, r2
 80081be:	61fb      	str	r3, [r7, #28]
 80081c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	6a3b      	ldr	r3, [r7, #32]
 80081c6:	601a      	str	r2, [r3, #0]
 80081c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ca:	685a      	ldr	r2, [r3, #4]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	1ad2      	subs	r2, r2, r3
 80081d0:	2308      	movs	r3, #8
 80081d2:	005b      	lsls	r3, r3, #1
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d91f      	bls.n	8008218 <pvPortMalloc+0x110>
 80081d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4413      	add	r3, r2
 80081de:	61bb      	str	r3, [r7, #24]
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	f003 0307 	and.w	r3, r3, #7
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d00a      	beq.n	8008200 <pvPortMalloc+0xf8>
 80081ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ee:	f383 8811 	msr	BASEPRI, r3
 80081f2:	f3bf 8f6f 	isb	sy
 80081f6:	f3bf 8f4f 	dsb	sy
 80081fa:	613b      	str	r3, [r7, #16]
 80081fc:	bf00      	nop
 80081fe:	e7fe      	b.n	80081fe <pvPortMalloc+0xf6>
 8008200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008202:	685a      	ldr	r2, [r3, #4]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	1ad2      	subs	r2, r2, r3
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	605a      	str	r2, [r3, #4]
 800820c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	605a      	str	r2, [r3, #4]
 8008212:	69b8      	ldr	r0, [r7, #24]
 8008214:	f000 f908 	bl	8008428 <prvInsertBlockIntoFreeList>
 8008218:	4b1d      	ldr	r3, [pc, #116]	; (8008290 <pvPortMalloc+0x188>)
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	4a1b      	ldr	r2, [pc, #108]	; (8008290 <pvPortMalloc+0x188>)
 8008224:	6013      	str	r3, [r2, #0]
 8008226:	4b1a      	ldr	r3, [pc, #104]	; (8008290 <pvPortMalloc+0x188>)
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	4b1b      	ldr	r3, [pc, #108]	; (8008298 <pvPortMalloc+0x190>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	429a      	cmp	r2, r3
 8008230:	d203      	bcs.n	800823a <pvPortMalloc+0x132>
 8008232:	4b17      	ldr	r3, [pc, #92]	; (8008290 <pvPortMalloc+0x188>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a18      	ldr	r2, [pc, #96]	; (8008298 <pvPortMalloc+0x190>)
 8008238:	6013      	str	r3, [r2, #0]
 800823a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823c:	685a      	ldr	r2, [r3, #4]
 800823e:	4b13      	ldr	r3, [pc, #76]	; (800828c <pvPortMalloc+0x184>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	431a      	orrs	r2, r3
 8008244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008246:	605a      	str	r2, [r3, #4]
 8008248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824a:	2200      	movs	r2, #0
 800824c:	601a      	str	r2, [r3, #0]
 800824e:	4b13      	ldr	r3, [pc, #76]	; (800829c <pvPortMalloc+0x194>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	3301      	adds	r3, #1
 8008254:	4a11      	ldr	r2, [pc, #68]	; (800829c <pvPortMalloc+0x194>)
 8008256:	6013      	str	r3, [r2, #0]
 8008258:	f7fe faf4 	bl	8006844 <xTaskResumeAll>
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	f003 0307 	and.w	r3, r3, #7
 8008262:	2b00      	cmp	r3, #0
 8008264:	d00a      	beq.n	800827c <pvPortMalloc+0x174>
 8008266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826a:	f383 8811 	msr	BASEPRI, r3
 800826e:	f3bf 8f6f 	isb	sy
 8008272:	f3bf 8f4f 	dsb	sy
 8008276:	60fb      	str	r3, [r7, #12]
 8008278:	bf00      	nop
 800827a:	e7fe      	b.n	800827a <pvPortMalloc+0x172>
 800827c:	69fb      	ldr	r3, [r7, #28]
 800827e:	4618      	mov	r0, r3
 8008280:	3728      	adds	r7, #40	; 0x28
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	200046e4 	.word	0x200046e4
 800828c:	200046f8 	.word	0x200046f8
 8008290:	200046e8 	.word	0x200046e8
 8008294:	200046dc 	.word	0x200046dc
 8008298:	200046ec 	.word	0x200046ec
 800829c:	200046f0 	.word	0x200046f0

080082a0 <vPortFree>:
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b086      	sub	sp, #24
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	617b      	str	r3, [r7, #20]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d04d      	beq.n	800834e <vPortFree+0xae>
 80082b2:	2308      	movs	r3, #8
 80082b4:	425b      	negs	r3, r3
 80082b6:	697a      	ldr	r2, [r7, #20]
 80082b8:	4413      	add	r3, r2
 80082ba:	617b      	str	r3, [r7, #20]
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	613b      	str	r3, [r7, #16]
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	685a      	ldr	r2, [r3, #4]
 80082c4:	4b24      	ldr	r3, [pc, #144]	; (8008358 <vPortFree+0xb8>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4013      	ands	r3, r2
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d10a      	bne.n	80082e4 <vPortFree+0x44>
 80082ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d2:	f383 8811 	msr	BASEPRI, r3
 80082d6:	f3bf 8f6f 	isb	sy
 80082da:	f3bf 8f4f 	dsb	sy
 80082de:	60fb      	str	r3, [r7, #12]
 80082e0:	bf00      	nop
 80082e2:	e7fe      	b.n	80082e2 <vPortFree+0x42>
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00a      	beq.n	8008302 <vPortFree+0x62>
 80082ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f0:	f383 8811 	msr	BASEPRI, r3
 80082f4:	f3bf 8f6f 	isb	sy
 80082f8:	f3bf 8f4f 	dsb	sy
 80082fc:	60bb      	str	r3, [r7, #8]
 80082fe:	bf00      	nop
 8008300:	e7fe      	b.n	8008300 <vPortFree+0x60>
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	685a      	ldr	r2, [r3, #4]
 8008306:	4b14      	ldr	r3, [pc, #80]	; (8008358 <vPortFree+0xb8>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4013      	ands	r3, r2
 800830c:	2b00      	cmp	r3, #0
 800830e:	d01e      	beq.n	800834e <vPortFree+0xae>
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d11a      	bne.n	800834e <vPortFree+0xae>
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	685a      	ldr	r2, [r3, #4]
 800831c:	4b0e      	ldr	r3, [pc, #56]	; (8008358 <vPortFree+0xb8>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	43db      	mvns	r3, r3
 8008322:	401a      	ands	r2, r3
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	605a      	str	r2, [r3, #4]
 8008328:	f7fe fa7e 	bl	8006828 <vTaskSuspendAll>
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	685a      	ldr	r2, [r3, #4]
 8008330:	4b0a      	ldr	r3, [pc, #40]	; (800835c <vPortFree+0xbc>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4413      	add	r3, r2
 8008336:	4a09      	ldr	r2, [pc, #36]	; (800835c <vPortFree+0xbc>)
 8008338:	6013      	str	r3, [r2, #0]
 800833a:	6938      	ldr	r0, [r7, #16]
 800833c:	f000 f874 	bl	8008428 <prvInsertBlockIntoFreeList>
 8008340:	4b07      	ldr	r3, [pc, #28]	; (8008360 <vPortFree+0xc0>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	3301      	adds	r3, #1
 8008346:	4a06      	ldr	r2, [pc, #24]	; (8008360 <vPortFree+0xc0>)
 8008348:	6013      	str	r3, [r2, #0]
 800834a:	f7fe fa7b 	bl	8006844 <xTaskResumeAll>
 800834e:	bf00      	nop
 8008350:	3718      	adds	r7, #24
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	200046f8 	.word	0x200046f8
 800835c:	200046e8 	.word	0x200046e8
 8008360:	200046f4 	.word	0x200046f4

08008364 <prvHeapInit>:
 8008364:	b480      	push	{r7}
 8008366:	b085      	sub	sp, #20
 8008368:	af00      	add	r7, sp, #0
 800836a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800836e:	60bb      	str	r3, [r7, #8]
 8008370:	4b27      	ldr	r3, [pc, #156]	; (8008410 <prvHeapInit+0xac>)
 8008372:	60fb      	str	r3, [r7, #12]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f003 0307 	and.w	r3, r3, #7
 800837a:	2b00      	cmp	r3, #0
 800837c:	d00c      	beq.n	8008398 <prvHeapInit+0x34>
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	3307      	adds	r3, #7
 8008382:	60fb      	str	r3, [r7, #12]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f023 0307 	bic.w	r3, r3, #7
 800838a:	60fb      	str	r3, [r7, #12]
 800838c:	68ba      	ldr	r2, [r7, #8]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	4a1f      	ldr	r2, [pc, #124]	; (8008410 <prvHeapInit+0xac>)
 8008394:	4413      	add	r3, r2
 8008396:	60bb      	str	r3, [r7, #8]
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	607b      	str	r3, [r7, #4]
 800839c:	4a1d      	ldr	r2, [pc, #116]	; (8008414 <prvHeapInit+0xb0>)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6013      	str	r3, [r2, #0]
 80083a2:	4b1c      	ldr	r3, [pc, #112]	; (8008414 <prvHeapInit+0xb0>)
 80083a4:	2200      	movs	r2, #0
 80083a6:	605a      	str	r2, [r3, #4]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	68ba      	ldr	r2, [r7, #8]
 80083ac:	4413      	add	r3, r2
 80083ae:	60fb      	str	r3, [r7, #12]
 80083b0:	2208      	movs	r2, #8
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	1a9b      	subs	r3, r3, r2
 80083b6:	60fb      	str	r3, [r7, #12]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f023 0307 	bic.w	r3, r3, #7
 80083be:	60fb      	str	r3, [r7, #12]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	4a15      	ldr	r2, [pc, #84]	; (8008418 <prvHeapInit+0xb4>)
 80083c4:	6013      	str	r3, [r2, #0]
 80083c6:	4b14      	ldr	r3, [pc, #80]	; (8008418 <prvHeapInit+0xb4>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2200      	movs	r2, #0
 80083cc:	605a      	str	r2, [r3, #4]
 80083ce:	4b12      	ldr	r3, [pc, #72]	; (8008418 <prvHeapInit+0xb4>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	2200      	movs	r2, #0
 80083d4:	601a      	str	r2, [r3, #0]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	603b      	str	r3, [r7, #0]
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	1ad2      	subs	r2, r2, r3
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	605a      	str	r2, [r3, #4]
 80083e4:	4b0c      	ldr	r3, [pc, #48]	; (8008418 <prvHeapInit+0xb4>)
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	601a      	str	r2, [r3, #0]
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	4a0a      	ldr	r2, [pc, #40]	; (800841c <prvHeapInit+0xb8>)
 80083f2:	6013      	str	r3, [r2, #0]
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	4a09      	ldr	r2, [pc, #36]	; (8008420 <prvHeapInit+0xbc>)
 80083fa:	6013      	str	r3, [r2, #0]
 80083fc:	4b09      	ldr	r3, [pc, #36]	; (8008424 <prvHeapInit+0xc0>)
 80083fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008402:	601a      	str	r2, [r3, #0]
 8008404:	bf00      	nop
 8008406:	3714      	adds	r7, #20
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr
 8008410:	20000adc 	.word	0x20000adc
 8008414:	200046dc 	.word	0x200046dc
 8008418:	200046e4 	.word	0x200046e4
 800841c:	200046ec 	.word	0x200046ec
 8008420:	200046e8 	.word	0x200046e8
 8008424:	200046f8 	.word	0x200046f8

08008428 <prvInsertBlockIntoFreeList>:
 8008428:	b480      	push	{r7}
 800842a:	b085      	sub	sp, #20
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	4b28      	ldr	r3, [pc, #160]	; (80084d4 <prvInsertBlockIntoFreeList+0xac>)
 8008432:	60fb      	str	r3, [r7, #12]
 8008434:	e002      	b.n	800843c <prvInsertBlockIntoFreeList+0x14>
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	60fb      	str	r3, [r7, #12]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	429a      	cmp	r2, r3
 8008444:	d8f7      	bhi.n	8008436 <prvInsertBlockIntoFreeList+0xe>
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	60bb      	str	r3, [r7, #8]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	68ba      	ldr	r2, [r7, #8]
 8008450:	4413      	add	r3, r2
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	429a      	cmp	r2, r3
 8008456:	d108      	bne.n	800846a <prvInsertBlockIntoFreeList+0x42>
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	685a      	ldr	r2, [r3, #4]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	441a      	add	r2, r3
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	605a      	str	r2, [r3, #4]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	607b      	str	r3, [r7, #4]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	60bb      	str	r3, [r7, #8]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	68ba      	ldr	r2, [r7, #8]
 8008474:	441a      	add	r2, r3
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	429a      	cmp	r2, r3
 800847c:	d118      	bne.n	80084b0 <prvInsertBlockIntoFreeList+0x88>
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	4b15      	ldr	r3, [pc, #84]	; (80084d8 <prvInsertBlockIntoFreeList+0xb0>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	429a      	cmp	r2, r3
 8008488:	d00d      	beq.n	80084a6 <prvInsertBlockIntoFreeList+0x7e>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	685a      	ldr	r2, [r3, #4]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	441a      	add	r2, r3
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	605a      	str	r2, [r3, #4]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	601a      	str	r2, [r3, #0]
 80084a4:	e008      	b.n	80084b8 <prvInsertBlockIntoFreeList+0x90>
 80084a6:	4b0c      	ldr	r3, [pc, #48]	; (80084d8 <prvInsertBlockIntoFreeList+0xb0>)
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	601a      	str	r2, [r3, #0]
 80084ae:	e003      	b.n	80084b8 <prvInsertBlockIntoFreeList+0x90>
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	601a      	str	r2, [r3, #0]
 80084b8:	68fa      	ldr	r2, [r7, #12]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	429a      	cmp	r2, r3
 80084be:	d002      	beq.n	80084c6 <prvInsertBlockIntoFreeList+0x9e>
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	601a      	str	r2, [r3, #0]
 80084c6:	bf00      	nop
 80084c8:	3714      	adds	r7, #20
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr
 80084d2:	bf00      	nop
 80084d4:	200046dc 	.word	0x200046dc
 80084d8:	200046e4 	.word	0x200046e4

080084dc <__errno>:
 80084dc:	4b01      	ldr	r3, [pc, #4]	; (80084e4 <__errno+0x8>)
 80084de:	6818      	ldr	r0, [r3, #0]
 80084e0:	4770      	bx	lr
 80084e2:	bf00      	nop
 80084e4:	20000010 	.word	0x20000010

080084e8 <__libc_init_array>:
 80084e8:	b570      	push	{r4, r5, r6, lr}
 80084ea:	4d0d      	ldr	r5, [pc, #52]	; (8008520 <__libc_init_array+0x38>)
 80084ec:	4c0d      	ldr	r4, [pc, #52]	; (8008524 <__libc_init_array+0x3c>)
 80084ee:	1b64      	subs	r4, r4, r5
 80084f0:	10a4      	asrs	r4, r4, #2
 80084f2:	2600      	movs	r6, #0
 80084f4:	42a6      	cmp	r6, r4
 80084f6:	d109      	bne.n	800850c <__libc_init_array+0x24>
 80084f8:	4d0b      	ldr	r5, [pc, #44]	; (8008528 <__libc_init_array+0x40>)
 80084fa:	4c0c      	ldr	r4, [pc, #48]	; (800852c <__libc_init_array+0x44>)
 80084fc:	f000 fc8e 	bl	8008e1c <_init>
 8008500:	1b64      	subs	r4, r4, r5
 8008502:	10a4      	asrs	r4, r4, #2
 8008504:	2600      	movs	r6, #0
 8008506:	42a6      	cmp	r6, r4
 8008508:	d105      	bne.n	8008516 <__libc_init_array+0x2e>
 800850a:	bd70      	pop	{r4, r5, r6, pc}
 800850c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008510:	4798      	blx	r3
 8008512:	3601      	adds	r6, #1
 8008514:	e7ee      	b.n	80084f4 <__libc_init_array+0xc>
 8008516:	f855 3b04 	ldr.w	r3, [r5], #4
 800851a:	4798      	blx	r3
 800851c:	3601      	adds	r6, #1
 800851e:	e7f2      	b.n	8008506 <__libc_init_array+0x1e>
 8008520:	080090e0 	.word	0x080090e0
 8008524:	080090e0 	.word	0x080090e0
 8008528:	080090e0 	.word	0x080090e0
 800852c:	080090e4 	.word	0x080090e4

08008530 <memcpy>:
 8008530:	440a      	add	r2, r1
 8008532:	4291      	cmp	r1, r2
 8008534:	f100 33ff 	add.w	r3, r0, #4294967295
 8008538:	d100      	bne.n	800853c <memcpy+0xc>
 800853a:	4770      	bx	lr
 800853c:	b510      	push	{r4, lr}
 800853e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008542:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008546:	4291      	cmp	r1, r2
 8008548:	d1f9      	bne.n	800853e <memcpy+0xe>
 800854a:	bd10      	pop	{r4, pc}

0800854c <memset>:
 800854c:	4402      	add	r2, r0
 800854e:	4603      	mov	r3, r0
 8008550:	4293      	cmp	r3, r2
 8008552:	d100      	bne.n	8008556 <memset+0xa>
 8008554:	4770      	bx	lr
 8008556:	f803 1b01 	strb.w	r1, [r3], #1
 800855a:	e7f9      	b.n	8008550 <memset+0x4>

0800855c <siprintf>:
 800855c:	b40e      	push	{r1, r2, r3}
 800855e:	b500      	push	{lr}
 8008560:	b09c      	sub	sp, #112	; 0x70
 8008562:	ab1d      	add	r3, sp, #116	; 0x74
 8008564:	9002      	str	r0, [sp, #8]
 8008566:	9006      	str	r0, [sp, #24]
 8008568:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800856c:	4809      	ldr	r0, [pc, #36]	; (8008594 <siprintf+0x38>)
 800856e:	9107      	str	r1, [sp, #28]
 8008570:	9104      	str	r1, [sp, #16]
 8008572:	4909      	ldr	r1, [pc, #36]	; (8008598 <siprintf+0x3c>)
 8008574:	f853 2b04 	ldr.w	r2, [r3], #4
 8008578:	9105      	str	r1, [sp, #20]
 800857a:	6800      	ldr	r0, [r0, #0]
 800857c:	9301      	str	r3, [sp, #4]
 800857e:	a902      	add	r1, sp, #8
 8008580:	f000 f868 	bl	8008654 <_svfiprintf_r>
 8008584:	9b02      	ldr	r3, [sp, #8]
 8008586:	2200      	movs	r2, #0
 8008588:	701a      	strb	r2, [r3, #0]
 800858a:	b01c      	add	sp, #112	; 0x70
 800858c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008590:	b003      	add	sp, #12
 8008592:	4770      	bx	lr
 8008594:	20000010 	.word	0x20000010
 8008598:	ffff0208 	.word	0xffff0208

0800859c <__ssputs_r>:
 800859c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085a0:	688e      	ldr	r6, [r1, #8]
 80085a2:	429e      	cmp	r6, r3
 80085a4:	4682      	mov	sl, r0
 80085a6:	460c      	mov	r4, r1
 80085a8:	4690      	mov	r8, r2
 80085aa:	461f      	mov	r7, r3
 80085ac:	d838      	bhi.n	8008620 <__ssputs_r+0x84>
 80085ae:	898a      	ldrh	r2, [r1, #12]
 80085b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80085b4:	d032      	beq.n	800861c <__ssputs_r+0x80>
 80085b6:	6825      	ldr	r5, [r4, #0]
 80085b8:	6909      	ldr	r1, [r1, #16]
 80085ba:	eba5 0901 	sub.w	r9, r5, r1
 80085be:	6965      	ldr	r5, [r4, #20]
 80085c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80085c8:	3301      	adds	r3, #1
 80085ca:	444b      	add	r3, r9
 80085cc:	106d      	asrs	r5, r5, #1
 80085ce:	429d      	cmp	r5, r3
 80085d0:	bf38      	it	cc
 80085d2:	461d      	movcc	r5, r3
 80085d4:	0553      	lsls	r3, r2, #21
 80085d6:	d531      	bpl.n	800863c <__ssputs_r+0xa0>
 80085d8:	4629      	mov	r1, r5
 80085da:	f000 fb55 	bl	8008c88 <_malloc_r>
 80085de:	4606      	mov	r6, r0
 80085e0:	b950      	cbnz	r0, 80085f8 <__ssputs_r+0x5c>
 80085e2:	230c      	movs	r3, #12
 80085e4:	f8ca 3000 	str.w	r3, [sl]
 80085e8:	89a3      	ldrh	r3, [r4, #12]
 80085ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085ee:	81a3      	strh	r3, [r4, #12]
 80085f0:	f04f 30ff 	mov.w	r0, #4294967295
 80085f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085f8:	6921      	ldr	r1, [r4, #16]
 80085fa:	464a      	mov	r2, r9
 80085fc:	f7ff ff98 	bl	8008530 <memcpy>
 8008600:	89a3      	ldrh	r3, [r4, #12]
 8008602:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008606:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800860a:	81a3      	strh	r3, [r4, #12]
 800860c:	6126      	str	r6, [r4, #16]
 800860e:	6165      	str	r5, [r4, #20]
 8008610:	444e      	add	r6, r9
 8008612:	eba5 0509 	sub.w	r5, r5, r9
 8008616:	6026      	str	r6, [r4, #0]
 8008618:	60a5      	str	r5, [r4, #8]
 800861a:	463e      	mov	r6, r7
 800861c:	42be      	cmp	r6, r7
 800861e:	d900      	bls.n	8008622 <__ssputs_r+0x86>
 8008620:	463e      	mov	r6, r7
 8008622:	6820      	ldr	r0, [r4, #0]
 8008624:	4632      	mov	r2, r6
 8008626:	4641      	mov	r1, r8
 8008628:	f000 faa8 	bl	8008b7c <memmove>
 800862c:	68a3      	ldr	r3, [r4, #8]
 800862e:	1b9b      	subs	r3, r3, r6
 8008630:	60a3      	str	r3, [r4, #8]
 8008632:	6823      	ldr	r3, [r4, #0]
 8008634:	4433      	add	r3, r6
 8008636:	6023      	str	r3, [r4, #0]
 8008638:	2000      	movs	r0, #0
 800863a:	e7db      	b.n	80085f4 <__ssputs_r+0x58>
 800863c:	462a      	mov	r2, r5
 800863e:	f000 fb97 	bl	8008d70 <_realloc_r>
 8008642:	4606      	mov	r6, r0
 8008644:	2800      	cmp	r0, #0
 8008646:	d1e1      	bne.n	800860c <__ssputs_r+0x70>
 8008648:	6921      	ldr	r1, [r4, #16]
 800864a:	4650      	mov	r0, sl
 800864c:	f000 fab0 	bl	8008bb0 <_free_r>
 8008650:	e7c7      	b.n	80085e2 <__ssputs_r+0x46>
	...

08008654 <_svfiprintf_r>:
 8008654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008658:	4698      	mov	r8, r3
 800865a:	898b      	ldrh	r3, [r1, #12]
 800865c:	061b      	lsls	r3, r3, #24
 800865e:	b09d      	sub	sp, #116	; 0x74
 8008660:	4607      	mov	r7, r0
 8008662:	460d      	mov	r5, r1
 8008664:	4614      	mov	r4, r2
 8008666:	d50e      	bpl.n	8008686 <_svfiprintf_r+0x32>
 8008668:	690b      	ldr	r3, [r1, #16]
 800866a:	b963      	cbnz	r3, 8008686 <_svfiprintf_r+0x32>
 800866c:	2140      	movs	r1, #64	; 0x40
 800866e:	f000 fb0b 	bl	8008c88 <_malloc_r>
 8008672:	6028      	str	r0, [r5, #0]
 8008674:	6128      	str	r0, [r5, #16]
 8008676:	b920      	cbnz	r0, 8008682 <_svfiprintf_r+0x2e>
 8008678:	230c      	movs	r3, #12
 800867a:	603b      	str	r3, [r7, #0]
 800867c:	f04f 30ff 	mov.w	r0, #4294967295
 8008680:	e0d1      	b.n	8008826 <_svfiprintf_r+0x1d2>
 8008682:	2340      	movs	r3, #64	; 0x40
 8008684:	616b      	str	r3, [r5, #20]
 8008686:	2300      	movs	r3, #0
 8008688:	9309      	str	r3, [sp, #36]	; 0x24
 800868a:	2320      	movs	r3, #32
 800868c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008690:	f8cd 800c 	str.w	r8, [sp, #12]
 8008694:	2330      	movs	r3, #48	; 0x30
 8008696:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008840 <_svfiprintf_r+0x1ec>
 800869a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800869e:	f04f 0901 	mov.w	r9, #1
 80086a2:	4623      	mov	r3, r4
 80086a4:	469a      	mov	sl, r3
 80086a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086aa:	b10a      	cbz	r2, 80086b0 <_svfiprintf_r+0x5c>
 80086ac:	2a25      	cmp	r2, #37	; 0x25
 80086ae:	d1f9      	bne.n	80086a4 <_svfiprintf_r+0x50>
 80086b0:	ebba 0b04 	subs.w	fp, sl, r4
 80086b4:	d00b      	beq.n	80086ce <_svfiprintf_r+0x7a>
 80086b6:	465b      	mov	r3, fp
 80086b8:	4622      	mov	r2, r4
 80086ba:	4629      	mov	r1, r5
 80086bc:	4638      	mov	r0, r7
 80086be:	f7ff ff6d 	bl	800859c <__ssputs_r>
 80086c2:	3001      	adds	r0, #1
 80086c4:	f000 80aa 	beq.w	800881c <_svfiprintf_r+0x1c8>
 80086c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086ca:	445a      	add	r2, fp
 80086cc:	9209      	str	r2, [sp, #36]	; 0x24
 80086ce:	f89a 3000 	ldrb.w	r3, [sl]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	f000 80a2 	beq.w	800881c <_svfiprintf_r+0x1c8>
 80086d8:	2300      	movs	r3, #0
 80086da:	f04f 32ff 	mov.w	r2, #4294967295
 80086de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086e2:	f10a 0a01 	add.w	sl, sl, #1
 80086e6:	9304      	str	r3, [sp, #16]
 80086e8:	9307      	str	r3, [sp, #28]
 80086ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086ee:	931a      	str	r3, [sp, #104]	; 0x68
 80086f0:	4654      	mov	r4, sl
 80086f2:	2205      	movs	r2, #5
 80086f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086f8:	4851      	ldr	r0, [pc, #324]	; (8008840 <_svfiprintf_r+0x1ec>)
 80086fa:	f7f7 fd69 	bl	80001d0 <memchr>
 80086fe:	9a04      	ldr	r2, [sp, #16]
 8008700:	b9d8      	cbnz	r0, 800873a <_svfiprintf_r+0xe6>
 8008702:	06d0      	lsls	r0, r2, #27
 8008704:	bf44      	itt	mi
 8008706:	2320      	movmi	r3, #32
 8008708:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800870c:	0711      	lsls	r1, r2, #28
 800870e:	bf44      	itt	mi
 8008710:	232b      	movmi	r3, #43	; 0x2b
 8008712:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008716:	f89a 3000 	ldrb.w	r3, [sl]
 800871a:	2b2a      	cmp	r3, #42	; 0x2a
 800871c:	d015      	beq.n	800874a <_svfiprintf_r+0xf6>
 800871e:	9a07      	ldr	r2, [sp, #28]
 8008720:	4654      	mov	r4, sl
 8008722:	2000      	movs	r0, #0
 8008724:	f04f 0c0a 	mov.w	ip, #10
 8008728:	4621      	mov	r1, r4
 800872a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800872e:	3b30      	subs	r3, #48	; 0x30
 8008730:	2b09      	cmp	r3, #9
 8008732:	d94e      	bls.n	80087d2 <_svfiprintf_r+0x17e>
 8008734:	b1b0      	cbz	r0, 8008764 <_svfiprintf_r+0x110>
 8008736:	9207      	str	r2, [sp, #28]
 8008738:	e014      	b.n	8008764 <_svfiprintf_r+0x110>
 800873a:	eba0 0308 	sub.w	r3, r0, r8
 800873e:	fa09 f303 	lsl.w	r3, r9, r3
 8008742:	4313      	orrs	r3, r2
 8008744:	9304      	str	r3, [sp, #16]
 8008746:	46a2      	mov	sl, r4
 8008748:	e7d2      	b.n	80086f0 <_svfiprintf_r+0x9c>
 800874a:	9b03      	ldr	r3, [sp, #12]
 800874c:	1d19      	adds	r1, r3, #4
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	9103      	str	r1, [sp, #12]
 8008752:	2b00      	cmp	r3, #0
 8008754:	bfbb      	ittet	lt
 8008756:	425b      	neglt	r3, r3
 8008758:	f042 0202 	orrlt.w	r2, r2, #2
 800875c:	9307      	strge	r3, [sp, #28]
 800875e:	9307      	strlt	r3, [sp, #28]
 8008760:	bfb8      	it	lt
 8008762:	9204      	strlt	r2, [sp, #16]
 8008764:	7823      	ldrb	r3, [r4, #0]
 8008766:	2b2e      	cmp	r3, #46	; 0x2e
 8008768:	d10c      	bne.n	8008784 <_svfiprintf_r+0x130>
 800876a:	7863      	ldrb	r3, [r4, #1]
 800876c:	2b2a      	cmp	r3, #42	; 0x2a
 800876e:	d135      	bne.n	80087dc <_svfiprintf_r+0x188>
 8008770:	9b03      	ldr	r3, [sp, #12]
 8008772:	1d1a      	adds	r2, r3, #4
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	9203      	str	r2, [sp, #12]
 8008778:	2b00      	cmp	r3, #0
 800877a:	bfb8      	it	lt
 800877c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008780:	3402      	adds	r4, #2
 8008782:	9305      	str	r3, [sp, #20]
 8008784:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008850 <_svfiprintf_r+0x1fc>
 8008788:	7821      	ldrb	r1, [r4, #0]
 800878a:	2203      	movs	r2, #3
 800878c:	4650      	mov	r0, sl
 800878e:	f7f7 fd1f 	bl	80001d0 <memchr>
 8008792:	b140      	cbz	r0, 80087a6 <_svfiprintf_r+0x152>
 8008794:	2340      	movs	r3, #64	; 0x40
 8008796:	eba0 000a 	sub.w	r0, r0, sl
 800879a:	fa03 f000 	lsl.w	r0, r3, r0
 800879e:	9b04      	ldr	r3, [sp, #16]
 80087a0:	4303      	orrs	r3, r0
 80087a2:	3401      	adds	r4, #1
 80087a4:	9304      	str	r3, [sp, #16]
 80087a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087aa:	4826      	ldr	r0, [pc, #152]	; (8008844 <_svfiprintf_r+0x1f0>)
 80087ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087b0:	2206      	movs	r2, #6
 80087b2:	f7f7 fd0d 	bl	80001d0 <memchr>
 80087b6:	2800      	cmp	r0, #0
 80087b8:	d038      	beq.n	800882c <_svfiprintf_r+0x1d8>
 80087ba:	4b23      	ldr	r3, [pc, #140]	; (8008848 <_svfiprintf_r+0x1f4>)
 80087bc:	bb1b      	cbnz	r3, 8008806 <_svfiprintf_r+0x1b2>
 80087be:	9b03      	ldr	r3, [sp, #12]
 80087c0:	3307      	adds	r3, #7
 80087c2:	f023 0307 	bic.w	r3, r3, #7
 80087c6:	3308      	adds	r3, #8
 80087c8:	9303      	str	r3, [sp, #12]
 80087ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087cc:	4433      	add	r3, r6
 80087ce:	9309      	str	r3, [sp, #36]	; 0x24
 80087d0:	e767      	b.n	80086a2 <_svfiprintf_r+0x4e>
 80087d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80087d6:	460c      	mov	r4, r1
 80087d8:	2001      	movs	r0, #1
 80087da:	e7a5      	b.n	8008728 <_svfiprintf_r+0xd4>
 80087dc:	2300      	movs	r3, #0
 80087de:	3401      	adds	r4, #1
 80087e0:	9305      	str	r3, [sp, #20]
 80087e2:	4619      	mov	r1, r3
 80087e4:	f04f 0c0a 	mov.w	ip, #10
 80087e8:	4620      	mov	r0, r4
 80087ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087ee:	3a30      	subs	r2, #48	; 0x30
 80087f0:	2a09      	cmp	r2, #9
 80087f2:	d903      	bls.n	80087fc <_svfiprintf_r+0x1a8>
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d0c5      	beq.n	8008784 <_svfiprintf_r+0x130>
 80087f8:	9105      	str	r1, [sp, #20]
 80087fa:	e7c3      	b.n	8008784 <_svfiprintf_r+0x130>
 80087fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008800:	4604      	mov	r4, r0
 8008802:	2301      	movs	r3, #1
 8008804:	e7f0      	b.n	80087e8 <_svfiprintf_r+0x194>
 8008806:	ab03      	add	r3, sp, #12
 8008808:	9300      	str	r3, [sp, #0]
 800880a:	462a      	mov	r2, r5
 800880c:	4b0f      	ldr	r3, [pc, #60]	; (800884c <_svfiprintf_r+0x1f8>)
 800880e:	a904      	add	r1, sp, #16
 8008810:	4638      	mov	r0, r7
 8008812:	f3af 8000 	nop.w
 8008816:	1c42      	adds	r2, r0, #1
 8008818:	4606      	mov	r6, r0
 800881a:	d1d6      	bne.n	80087ca <_svfiprintf_r+0x176>
 800881c:	89ab      	ldrh	r3, [r5, #12]
 800881e:	065b      	lsls	r3, r3, #25
 8008820:	f53f af2c 	bmi.w	800867c <_svfiprintf_r+0x28>
 8008824:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008826:	b01d      	add	sp, #116	; 0x74
 8008828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800882c:	ab03      	add	r3, sp, #12
 800882e:	9300      	str	r3, [sp, #0]
 8008830:	462a      	mov	r2, r5
 8008832:	4b06      	ldr	r3, [pc, #24]	; (800884c <_svfiprintf_r+0x1f8>)
 8008834:	a904      	add	r1, sp, #16
 8008836:	4638      	mov	r0, r7
 8008838:	f000 f87a 	bl	8008930 <_printf_i>
 800883c:	e7eb      	b.n	8008816 <_svfiprintf_r+0x1c2>
 800883e:	bf00      	nop
 8008840:	080090a4 	.word	0x080090a4
 8008844:	080090ae 	.word	0x080090ae
 8008848:	00000000 	.word	0x00000000
 800884c:	0800859d 	.word	0x0800859d
 8008850:	080090aa 	.word	0x080090aa

08008854 <_printf_common>:
 8008854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008858:	4616      	mov	r6, r2
 800885a:	4699      	mov	r9, r3
 800885c:	688a      	ldr	r2, [r1, #8]
 800885e:	690b      	ldr	r3, [r1, #16]
 8008860:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008864:	4293      	cmp	r3, r2
 8008866:	bfb8      	it	lt
 8008868:	4613      	movlt	r3, r2
 800886a:	6033      	str	r3, [r6, #0]
 800886c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008870:	4607      	mov	r7, r0
 8008872:	460c      	mov	r4, r1
 8008874:	b10a      	cbz	r2, 800887a <_printf_common+0x26>
 8008876:	3301      	adds	r3, #1
 8008878:	6033      	str	r3, [r6, #0]
 800887a:	6823      	ldr	r3, [r4, #0]
 800887c:	0699      	lsls	r1, r3, #26
 800887e:	bf42      	ittt	mi
 8008880:	6833      	ldrmi	r3, [r6, #0]
 8008882:	3302      	addmi	r3, #2
 8008884:	6033      	strmi	r3, [r6, #0]
 8008886:	6825      	ldr	r5, [r4, #0]
 8008888:	f015 0506 	ands.w	r5, r5, #6
 800888c:	d106      	bne.n	800889c <_printf_common+0x48>
 800888e:	f104 0a19 	add.w	sl, r4, #25
 8008892:	68e3      	ldr	r3, [r4, #12]
 8008894:	6832      	ldr	r2, [r6, #0]
 8008896:	1a9b      	subs	r3, r3, r2
 8008898:	42ab      	cmp	r3, r5
 800889a:	dc26      	bgt.n	80088ea <_printf_common+0x96>
 800889c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80088a0:	1e13      	subs	r3, r2, #0
 80088a2:	6822      	ldr	r2, [r4, #0]
 80088a4:	bf18      	it	ne
 80088a6:	2301      	movne	r3, #1
 80088a8:	0692      	lsls	r2, r2, #26
 80088aa:	d42b      	bmi.n	8008904 <_printf_common+0xb0>
 80088ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80088b0:	4649      	mov	r1, r9
 80088b2:	4638      	mov	r0, r7
 80088b4:	47c0      	blx	r8
 80088b6:	3001      	adds	r0, #1
 80088b8:	d01e      	beq.n	80088f8 <_printf_common+0xa4>
 80088ba:	6823      	ldr	r3, [r4, #0]
 80088bc:	68e5      	ldr	r5, [r4, #12]
 80088be:	6832      	ldr	r2, [r6, #0]
 80088c0:	f003 0306 	and.w	r3, r3, #6
 80088c4:	2b04      	cmp	r3, #4
 80088c6:	bf08      	it	eq
 80088c8:	1aad      	subeq	r5, r5, r2
 80088ca:	68a3      	ldr	r3, [r4, #8]
 80088cc:	6922      	ldr	r2, [r4, #16]
 80088ce:	bf0c      	ite	eq
 80088d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80088d4:	2500      	movne	r5, #0
 80088d6:	4293      	cmp	r3, r2
 80088d8:	bfc4      	itt	gt
 80088da:	1a9b      	subgt	r3, r3, r2
 80088dc:	18ed      	addgt	r5, r5, r3
 80088de:	2600      	movs	r6, #0
 80088e0:	341a      	adds	r4, #26
 80088e2:	42b5      	cmp	r5, r6
 80088e4:	d11a      	bne.n	800891c <_printf_common+0xc8>
 80088e6:	2000      	movs	r0, #0
 80088e8:	e008      	b.n	80088fc <_printf_common+0xa8>
 80088ea:	2301      	movs	r3, #1
 80088ec:	4652      	mov	r2, sl
 80088ee:	4649      	mov	r1, r9
 80088f0:	4638      	mov	r0, r7
 80088f2:	47c0      	blx	r8
 80088f4:	3001      	adds	r0, #1
 80088f6:	d103      	bne.n	8008900 <_printf_common+0xac>
 80088f8:	f04f 30ff 	mov.w	r0, #4294967295
 80088fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008900:	3501      	adds	r5, #1
 8008902:	e7c6      	b.n	8008892 <_printf_common+0x3e>
 8008904:	18e1      	adds	r1, r4, r3
 8008906:	1c5a      	adds	r2, r3, #1
 8008908:	2030      	movs	r0, #48	; 0x30
 800890a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800890e:	4422      	add	r2, r4
 8008910:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008914:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008918:	3302      	adds	r3, #2
 800891a:	e7c7      	b.n	80088ac <_printf_common+0x58>
 800891c:	2301      	movs	r3, #1
 800891e:	4622      	mov	r2, r4
 8008920:	4649      	mov	r1, r9
 8008922:	4638      	mov	r0, r7
 8008924:	47c0      	blx	r8
 8008926:	3001      	adds	r0, #1
 8008928:	d0e6      	beq.n	80088f8 <_printf_common+0xa4>
 800892a:	3601      	adds	r6, #1
 800892c:	e7d9      	b.n	80088e2 <_printf_common+0x8e>
	...

08008930 <_printf_i>:
 8008930:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008934:	7e0f      	ldrb	r7, [r1, #24]
 8008936:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008938:	2f78      	cmp	r7, #120	; 0x78
 800893a:	4691      	mov	r9, r2
 800893c:	4680      	mov	r8, r0
 800893e:	460c      	mov	r4, r1
 8008940:	469a      	mov	sl, r3
 8008942:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008946:	d807      	bhi.n	8008958 <_printf_i+0x28>
 8008948:	2f62      	cmp	r7, #98	; 0x62
 800894a:	d80a      	bhi.n	8008962 <_printf_i+0x32>
 800894c:	2f00      	cmp	r7, #0
 800894e:	f000 80d8 	beq.w	8008b02 <_printf_i+0x1d2>
 8008952:	2f58      	cmp	r7, #88	; 0x58
 8008954:	f000 80a3 	beq.w	8008a9e <_printf_i+0x16e>
 8008958:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800895c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008960:	e03a      	b.n	80089d8 <_printf_i+0xa8>
 8008962:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008966:	2b15      	cmp	r3, #21
 8008968:	d8f6      	bhi.n	8008958 <_printf_i+0x28>
 800896a:	a101      	add	r1, pc, #4	; (adr r1, 8008970 <_printf_i+0x40>)
 800896c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008970:	080089c9 	.word	0x080089c9
 8008974:	080089dd 	.word	0x080089dd
 8008978:	08008959 	.word	0x08008959
 800897c:	08008959 	.word	0x08008959
 8008980:	08008959 	.word	0x08008959
 8008984:	08008959 	.word	0x08008959
 8008988:	080089dd 	.word	0x080089dd
 800898c:	08008959 	.word	0x08008959
 8008990:	08008959 	.word	0x08008959
 8008994:	08008959 	.word	0x08008959
 8008998:	08008959 	.word	0x08008959
 800899c:	08008ae9 	.word	0x08008ae9
 80089a0:	08008a0d 	.word	0x08008a0d
 80089a4:	08008acb 	.word	0x08008acb
 80089a8:	08008959 	.word	0x08008959
 80089ac:	08008959 	.word	0x08008959
 80089b0:	08008b0b 	.word	0x08008b0b
 80089b4:	08008959 	.word	0x08008959
 80089b8:	08008a0d 	.word	0x08008a0d
 80089bc:	08008959 	.word	0x08008959
 80089c0:	08008959 	.word	0x08008959
 80089c4:	08008ad3 	.word	0x08008ad3
 80089c8:	682b      	ldr	r3, [r5, #0]
 80089ca:	1d1a      	adds	r2, r3, #4
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	602a      	str	r2, [r5, #0]
 80089d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089d8:	2301      	movs	r3, #1
 80089da:	e0a3      	b.n	8008b24 <_printf_i+0x1f4>
 80089dc:	6820      	ldr	r0, [r4, #0]
 80089de:	6829      	ldr	r1, [r5, #0]
 80089e0:	0606      	lsls	r6, r0, #24
 80089e2:	f101 0304 	add.w	r3, r1, #4
 80089e6:	d50a      	bpl.n	80089fe <_printf_i+0xce>
 80089e8:	680e      	ldr	r6, [r1, #0]
 80089ea:	602b      	str	r3, [r5, #0]
 80089ec:	2e00      	cmp	r6, #0
 80089ee:	da03      	bge.n	80089f8 <_printf_i+0xc8>
 80089f0:	232d      	movs	r3, #45	; 0x2d
 80089f2:	4276      	negs	r6, r6
 80089f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089f8:	485e      	ldr	r0, [pc, #376]	; (8008b74 <_printf_i+0x244>)
 80089fa:	230a      	movs	r3, #10
 80089fc:	e019      	b.n	8008a32 <_printf_i+0x102>
 80089fe:	680e      	ldr	r6, [r1, #0]
 8008a00:	602b      	str	r3, [r5, #0]
 8008a02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008a06:	bf18      	it	ne
 8008a08:	b236      	sxthne	r6, r6
 8008a0a:	e7ef      	b.n	80089ec <_printf_i+0xbc>
 8008a0c:	682b      	ldr	r3, [r5, #0]
 8008a0e:	6820      	ldr	r0, [r4, #0]
 8008a10:	1d19      	adds	r1, r3, #4
 8008a12:	6029      	str	r1, [r5, #0]
 8008a14:	0601      	lsls	r1, r0, #24
 8008a16:	d501      	bpl.n	8008a1c <_printf_i+0xec>
 8008a18:	681e      	ldr	r6, [r3, #0]
 8008a1a:	e002      	b.n	8008a22 <_printf_i+0xf2>
 8008a1c:	0646      	lsls	r6, r0, #25
 8008a1e:	d5fb      	bpl.n	8008a18 <_printf_i+0xe8>
 8008a20:	881e      	ldrh	r6, [r3, #0]
 8008a22:	4854      	ldr	r0, [pc, #336]	; (8008b74 <_printf_i+0x244>)
 8008a24:	2f6f      	cmp	r7, #111	; 0x6f
 8008a26:	bf0c      	ite	eq
 8008a28:	2308      	moveq	r3, #8
 8008a2a:	230a      	movne	r3, #10
 8008a2c:	2100      	movs	r1, #0
 8008a2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a32:	6865      	ldr	r5, [r4, #4]
 8008a34:	60a5      	str	r5, [r4, #8]
 8008a36:	2d00      	cmp	r5, #0
 8008a38:	bfa2      	ittt	ge
 8008a3a:	6821      	ldrge	r1, [r4, #0]
 8008a3c:	f021 0104 	bicge.w	r1, r1, #4
 8008a40:	6021      	strge	r1, [r4, #0]
 8008a42:	b90e      	cbnz	r6, 8008a48 <_printf_i+0x118>
 8008a44:	2d00      	cmp	r5, #0
 8008a46:	d04d      	beq.n	8008ae4 <_printf_i+0x1b4>
 8008a48:	4615      	mov	r5, r2
 8008a4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008a4e:	fb03 6711 	mls	r7, r3, r1, r6
 8008a52:	5dc7      	ldrb	r7, [r0, r7]
 8008a54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008a58:	4637      	mov	r7, r6
 8008a5a:	42bb      	cmp	r3, r7
 8008a5c:	460e      	mov	r6, r1
 8008a5e:	d9f4      	bls.n	8008a4a <_printf_i+0x11a>
 8008a60:	2b08      	cmp	r3, #8
 8008a62:	d10b      	bne.n	8008a7c <_printf_i+0x14c>
 8008a64:	6823      	ldr	r3, [r4, #0]
 8008a66:	07de      	lsls	r6, r3, #31
 8008a68:	d508      	bpl.n	8008a7c <_printf_i+0x14c>
 8008a6a:	6923      	ldr	r3, [r4, #16]
 8008a6c:	6861      	ldr	r1, [r4, #4]
 8008a6e:	4299      	cmp	r1, r3
 8008a70:	bfde      	ittt	le
 8008a72:	2330      	movle	r3, #48	; 0x30
 8008a74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008a7c:	1b52      	subs	r2, r2, r5
 8008a7e:	6122      	str	r2, [r4, #16]
 8008a80:	f8cd a000 	str.w	sl, [sp]
 8008a84:	464b      	mov	r3, r9
 8008a86:	aa03      	add	r2, sp, #12
 8008a88:	4621      	mov	r1, r4
 8008a8a:	4640      	mov	r0, r8
 8008a8c:	f7ff fee2 	bl	8008854 <_printf_common>
 8008a90:	3001      	adds	r0, #1
 8008a92:	d14c      	bne.n	8008b2e <_printf_i+0x1fe>
 8008a94:	f04f 30ff 	mov.w	r0, #4294967295
 8008a98:	b004      	add	sp, #16
 8008a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a9e:	4835      	ldr	r0, [pc, #212]	; (8008b74 <_printf_i+0x244>)
 8008aa0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008aa4:	6829      	ldr	r1, [r5, #0]
 8008aa6:	6823      	ldr	r3, [r4, #0]
 8008aa8:	f851 6b04 	ldr.w	r6, [r1], #4
 8008aac:	6029      	str	r1, [r5, #0]
 8008aae:	061d      	lsls	r5, r3, #24
 8008ab0:	d514      	bpl.n	8008adc <_printf_i+0x1ac>
 8008ab2:	07df      	lsls	r7, r3, #31
 8008ab4:	bf44      	itt	mi
 8008ab6:	f043 0320 	orrmi.w	r3, r3, #32
 8008aba:	6023      	strmi	r3, [r4, #0]
 8008abc:	b91e      	cbnz	r6, 8008ac6 <_printf_i+0x196>
 8008abe:	6823      	ldr	r3, [r4, #0]
 8008ac0:	f023 0320 	bic.w	r3, r3, #32
 8008ac4:	6023      	str	r3, [r4, #0]
 8008ac6:	2310      	movs	r3, #16
 8008ac8:	e7b0      	b.n	8008a2c <_printf_i+0xfc>
 8008aca:	6823      	ldr	r3, [r4, #0]
 8008acc:	f043 0320 	orr.w	r3, r3, #32
 8008ad0:	6023      	str	r3, [r4, #0]
 8008ad2:	2378      	movs	r3, #120	; 0x78
 8008ad4:	4828      	ldr	r0, [pc, #160]	; (8008b78 <_printf_i+0x248>)
 8008ad6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008ada:	e7e3      	b.n	8008aa4 <_printf_i+0x174>
 8008adc:	0659      	lsls	r1, r3, #25
 8008ade:	bf48      	it	mi
 8008ae0:	b2b6      	uxthmi	r6, r6
 8008ae2:	e7e6      	b.n	8008ab2 <_printf_i+0x182>
 8008ae4:	4615      	mov	r5, r2
 8008ae6:	e7bb      	b.n	8008a60 <_printf_i+0x130>
 8008ae8:	682b      	ldr	r3, [r5, #0]
 8008aea:	6826      	ldr	r6, [r4, #0]
 8008aec:	6961      	ldr	r1, [r4, #20]
 8008aee:	1d18      	adds	r0, r3, #4
 8008af0:	6028      	str	r0, [r5, #0]
 8008af2:	0635      	lsls	r5, r6, #24
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	d501      	bpl.n	8008afc <_printf_i+0x1cc>
 8008af8:	6019      	str	r1, [r3, #0]
 8008afa:	e002      	b.n	8008b02 <_printf_i+0x1d2>
 8008afc:	0670      	lsls	r0, r6, #25
 8008afe:	d5fb      	bpl.n	8008af8 <_printf_i+0x1c8>
 8008b00:	8019      	strh	r1, [r3, #0]
 8008b02:	2300      	movs	r3, #0
 8008b04:	6123      	str	r3, [r4, #16]
 8008b06:	4615      	mov	r5, r2
 8008b08:	e7ba      	b.n	8008a80 <_printf_i+0x150>
 8008b0a:	682b      	ldr	r3, [r5, #0]
 8008b0c:	1d1a      	adds	r2, r3, #4
 8008b0e:	602a      	str	r2, [r5, #0]
 8008b10:	681d      	ldr	r5, [r3, #0]
 8008b12:	6862      	ldr	r2, [r4, #4]
 8008b14:	2100      	movs	r1, #0
 8008b16:	4628      	mov	r0, r5
 8008b18:	f7f7 fb5a 	bl	80001d0 <memchr>
 8008b1c:	b108      	cbz	r0, 8008b22 <_printf_i+0x1f2>
 8008b1e:	1b40      	subs	r0, r0, r5
 8008b20:	6060      	str	r0, [r4, #4]
 8008b22:	6863      	ldr	r3, [r4, #4]
 8008b24:	6123      	str	r3, [r4, #16]
 8008b26:	2300      	movs	r3, #0
 8008b28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b2c:	e7a8      	b.n	8008a80 <_printf_i+0x150>
 8008b2e:	6923      	ldr	r3, [r4, #16]
 8008b30:	462a      	mov	r2, r5
 8008b32:	4649      	mov	r1, r9
 8008b34:	4640      	mov	r0, r8
 8008b36:	47d0      	blx	sl
 8008b38:	3001      	adds	r0, #1
 8008b3a:	d0ab      	beq.n	8008a94 <_printf_i+0x164>
 8008b3c:	6823      	ldr	r3, [r4, #0]
 8008b3e:	079b      	lsls	r3, r3, #30
 8008b40:	d413      	bmi.n	8008b6a <_printf_i+0x23a>
 8008b42:	68e0      	ldr	r0, [r4, #12]
 8008b44:	9b03      	ldr	r3, [sp, #12]
 8008b46:	4298      	cmp	r0, r3
 8008b48:	bfb8      	it	lt
 8008b4a:	4618      	movlt	r0, r3
 8008b4c:	e7a4      	b.n	8008a98 <_printf_i+0x168>
 8008b4e:	2301      	movs	r3, #1
 8008b50:	4632      	mov	r2, r6
 8008b52:	4649      	mov	r1, r9
 8008b54:	4640      	mov	r0, r8
 8008b56:	47d0      	blx	sl
 8008b58:	3001      	adds	r0, #1
 8008b5a:	d09b      	beq.n	8008a94 <_printf_i+0x164>
 8008b5c:	3501      	adds	r5, #1
 8008b5e:	68e3      	ldr	r3, [r4, #12]
 8008b60:	9903      	ldr	r1, [sp, #12]
 8008b62:	1a5b      	subs	r3, r3, r1
 8008b64:	42ab      	cmp	r3, r5
 8008b66:	dcf2      	bgt.n	8008b4e <_printf_i+0x21e>
 8008b68:	e7eb      	b.n	8008b42 <_printf_i+0x212>
 8008b6a:	2500      	movs	r5, #0
 8008b6c:	f104 0619 	add.w	r6, r4, #25
 8008b70:	e7f5      	b.n	8008b5e <_printf_i+0x22e>
 8008b72:	bf00      	nop
 8008b74:	080090b5 	.word	0x080090b5
 8008b78:	080090c6 	.word	0x080090c6

08008b7c <memmove>:
 8008b7c:	4288      	cmp	r0, r1
 8008b7e:	b510      	push	{r4, lr}
 8008b80:	eb01 0402 	add.w	r4, r1, r2
 8008b84:	d902      	bls.n	8008b8c <memmove+0x10>
 8008b86:	4284      	cmp	r4, r0
 8008b88:	4623      	mov	r3, r4
 8008b8a:	d807      	bhi.n	8008b9c <memmove+0x20>
 8008b8c:	1e43      	subs	r3, r0, #1
 8008b8e:	42a1      	cmp	r1, r4
 8008b90:	d008      	beq.n	8008ba4 <memmove+0x28>
 8008b92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b9a:	e7f8      	b.n	8008b8e <memmove+0x12>
 8008b9c:	4402      	add	r2, r0
 8008b9e:	4601      	mov	r1, r0
 8008ba0:	428a      	cmp	r2, r1
 8008ba2:	d100      	bne.n	8008ba6 <memmove+0x2a>
 8008ba4:	bd10      	pop	{r4, pc}
 8008ba6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008baa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008bae:	e7f7      	b.n	8008ba0 <memmove+0x24>

08008bb0 <_free_r>:
 8008bb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008bb2:	2900      	cmp	r1, #0
 8008bb4:	d044      	beq.n	8008c40 <_free_r+0x90>
 8008bb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bba:	9001      	str	r0, [sp, #4]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	f1a1 0404 	sub.w	r4, r1, #4
 8008bc2:	bfb8      	it	lt
 8008bc4:	18e4      	addlt	r4, r4, r3
 8008bc6:	f000 f913 	bl	8008df0 <__malloc_lock>
 8008bca:	4a1e      	ldr	r2, [pc, #120]	; (8008c44 <_free_r+0x94>)
 8008bcc:	9801      	ldr	r0, [sp, #4]
 8008bce:	6813      	ldr	r3, [r2, #0]
 8008bd0:	b933      	cbnz	r3, 8008be0 <_free_r+0x30>
 8008bd2:	6063      	str	r3, [r4, #4]
 8008bd4:	6014      	str	r4, [r2, #0]
 8008bd6:	b003      	add	sp, #12
 8008bd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008bdc:	f000 b90e 	b.w	8008dfc <__malloc_unlock>
 8008be0:	42a3      	cmp	r3, r4
 8008be2:	d908      	bls.n	8008bf6 <_free_r+0x46>
 8008be4:	6825      	ldr	r5, [r4, #0]
 8008be6:	1961      	adds	r1, r4, r5
 8008be8:	428b      	cmp	r3, r1
 8008bea:	bf01      	itttt	eq
 8008bec:	6819      	ldreq	r1, [r3, #0]
 8008bee:	685b      	ldreq	r3, [r3, #4]
 8008bf0:	1949      	addeq	r1, r1, r5
 8008bf2:	6021      	streq	r1, [r4, #0]
 8008bf4:	e7ed      	b.n	8008bd2 <_free_r+0x22>
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	b10b      	cbz	r3, 8008c00 <_free_r+0x50>
 8008bfc:	42a3      	cmp	r3, r4
 8008bfe:	d9fa      	bls.n	8008bf6 <_free_r+0x46>
 8008c00:	6811      	ldr	r1, [r2, #0]
 8008c02:	1855      	adds	r5, r2, r1
 8008c04:	42a5      	cmp	r5, r4
 8008c06:	d10b      	bne.n	8008c20 <_free_r+0x70>
 8008c08:	6824      	ldr	r4, [r4, #0]
 8008c0a:	4421      	add	r1, r4
 8008c0c:	1854      	adds	r4, r2, r1
 8008c0e:	42a3      	cmp	r3, r4
 8008c10:	6011      	str	r1, [r2, #0]
 8008c12:	d1e0      	bne.n	8008bd6 <_free_r+0x26>
 8008c14:	681c      	ldr	r4, [r3, #0]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	6053      	str	r3, [r2, #4]
 8008c1a:	4421      	add	r1, r4
 8008c1c:	6011      	str	r1, [r2, #0]
 8008c1e:	e7da      	b.n	8008bd6 <_free_r+0x26>
 8008c20:	d902      	bls.n	8008c28 <_free_r+0x78>
 8008c22:	230c      	movs	r3, #12
 8008c24:	6003      	str	r3, [r0, #0]
 8008c26:	e7d6      	b.n	8008bd6 <_free_r+0x26>
 8008c28:	6825      	ldr	r5, [r4, #0]
 8008c2a:	1961      	adds	r1, r4, r5
 8008c2c:	428b      	cmp	r3, r1
 8008c2e:	bf04      	itt	eq
 8008c30:	6819      	ldreq	r1, [r3, #0]
 8008c32:	685b      	ldreq	r3, [r3, #4]
 8008c34:	6063      	str	r3, [r4, #4]
 8008c36:	bf04      	itt	eq
 8008c38:	1949      	addeq	r1, r1, r5
 8008c3a:	6021      	streq	r1, [r4, #0]
 8008c3c:	6054      	str	r4, [r2, #4]
 8008c3e:	e7ca      	b.n	8008bd6 <_free_r+0x26>
 8008c40:	b003      	add	sp, #12
 8008c42:	bd30      	pop	{r4, r5, pc}
 8008c44:	200046fc 	.word	0x200046fc

08008c48 <sbrk_aligned>:
 8008c48:	b570      	push	{r4, r5, r6, lr}
 8008c4a:	4e0e      	ldr	r6, [pc, #56]	; (8008c84 <sbrk_aligned+0x3c>)
 8008c4c:	460c      	mov	r4, r1
 8008c4e:	6831      	ldr	r1, [r6, #0]
 8008c50:	4605      	mov	r5, r0
 8008c52:	b911      	cbnz	r1, 8008c5a <sbrk_aligned+0x12>
 8008c54:	f000 f8bc 	bl	8008dd0 <_sbrk_r>
 8008c58:	6030      	str	r0, [r6, #0]
 8008c5a:	4621      	mov	r1, r4
 8008c5c:	4628      	mov	r0, r5
 8008c5e:	f000 f8b7 	bl	8008dd0 <_sbrk_r>
 8008c62:	1c43      	adds	r3, r0, #1
 8008c64:	d00a      	beq.n	8008c7c <sbrk_aligned+0x34>
 8008c66:	1cc4      	adds	r4, r0, #3
 8008c68:	f024 0403 	bic.w	r4, r4, #3
 8008c6c:	42a0      	cmp	r0, r4
 8008c6e:	d007      	beq.n	8008c80 <sbrk_aligned+0x38>
 8008c70:	1a21      	subs	r1, r4, r0
 8008c72:	4628      	mov	r0, r5
 8008c74:	f000 f8ac 	bl	8008dd0 <_sbrk_r>
 8008c78:	3001      	adds	r0, #1
 8008c7a:	d101      	bne.n	8008c80 <sbrk_aligned+0x38>
 8008c7c:	f04f 34ff 	mov.w	r4, #4294967295
 8008c80:	4620      	mov	r0, r4
 8008c82:	bd70      	pop	{r4, r5, r6, pc}
 8008c84:	20004700 	.word	0x20004700

08008c88 <_malloc_r>:
 8008c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c8c:	1ccd      	adds	r5, r1, #3
 8008c8e:	f025 0503 	bic.w	r5, r5, #3
 8008c92:	3508      	adds	r5, #8
 8008c94:	2d0c      	cmp	r5, #12
 8008c96:	bf38      	it	cc
 8008c98:	250c      	movcc	r5, #12
 8008c9a:	2d00      	cmp	r5, #0
 8008c9c:	4607      	mov	r7, r0
 8008c9e:	db01      	blt.n	8008ca4 <_malloc_r+0x1c>
 8008ca0:	42a9      	cmp	r1, r5
 8008ca2:	d905      	bls.n	8008cb0 <_malloc_r+0x28>
 8008ca4:	230c      	movs	r3, #12
 8008ca6:	603b      	str	r3, [r7, #0]
 8008ca8:	2600      	movs	r6, #0
 8008caa:	4630      	mov	r0, r6
 8008cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cb0:	4e2e      	ldr	r6, [pc, #184]	; (8008d6c <_malloc_r+0xe4>)
 8008cb2:	f000 f89d 	bl	8008df0 <__malloc_lock>
 8008cb6:	6833      	ldr	r3, [r6, #0]
 8008cb8:	461c      	mov	r4, r3
 8008cba:	bb34      	cbnz	r4, 8008d0a <_malloc_r+0x82>
 8008cbc:	4629      	mov	r1, r5
 8008cbe:	4638      	mov	r0, r7
 8008cc0:	f7ff ffc2 	bl	8008c48 <sbrk_aligned>
 8008cc4:	1c43      	adds	r3, r0, #1
 8008cc6:	4604      	mov	r4, r0
 8008cc8:	d14d      	bne.n	8008d66 <_malloc_r+0xde>
 8008cca:	6834      	ldr	r4, [r6, #0]
 8008ccc:	4626      	mov	r6, r4
 8008cce:	2e00      	cmp	r6, #0
 8008cd0:	d140      	bne.n	8008d54 <_malloc_r+0xcc>
 8008cd2:	6823      	ldr	r3, [r4, #0]
 8008cd4:	4631      	mov	r1, r6
 8008cd6:	4638      	mov	r0, r7
 8008cd8:	eb04 0803 	add.w	r8, r4, r3
 8008cdc:	f000 f878 	bl	8008dd0 <_sbrk_r>
 8008ce0:	4580      	cmp	r8, r0
 8008ce2:	d13a      	bne.n	8008d5a <_malloc_r+0xd2>
 8008ce4:	6821      	ldr	r1, [r4, #0]
 8008ce6:	3503      	adds	r5, #3
 8008ce8:	1a6d      	subs	r5, r5, r1
 8008cea:	f025 0503 	bic.w	r5, r5, #3
 8008cee:	3508      	adds	r5, #8
 8008cf0:	2d0c      	cmp	r5, #12
 8008cf2:	bf38      	it	cc
 8008cf4:	250c      	movcc	r5, #12
 8008cf6:	4629      	mov	r1, r5
 8008cf8:	4638      	mov	r0, r7
 8008cfa:	f7ff ffa5 	bl	8008c48 <sbrk_aligned>
 8008cfe:	3001      	adds	r0, #1
 8008d00:	d02b      	beq.n	8008d5a <_malloc_r+0xd2>
 8008d02:	6823      	ldr	r3, [r4, #0]
 8008d04:	442b      	add	r3, r5
 8008d06:	6023      	str	r3, [r4, #0]
 8008d08:	e00e      	b.n	8008d28 <_malloc_r+0xa0>
 8008d0a:	6822      	ldr	r2, [r4, #0]
 8008d0c:	1b52      	subs	r2, r2, r5
 8008d0e:	d41e      	bmi.n	8008d4e <_malloc_r+0xc6>
 8008d10:	2a0b      	cmp	r2, #11
 8008d12:	d916      	bls.n	8008d42 <_malloc_r+0xba>
 8008d14:	1961      	adds	r1, r4, r5
 8008d16:	42a3      	cmp	r3, r4
 8008d18:	6025      	str	r5, [r4, #0]
 8008d1a:	bf18      	it	ne
 8008d1c:	6059      	strne	r1, [r3, #4]
 8008d1e:	6863      	ldr	r3, [r4, #4]
 8008d20:	bf08      	it	eq
 8008d22:	6031      	streq	r1, [r6, #0]
 8008d24:	5162      	str	r2, [r4, r5]
 8008d26:	604b      	str	r3, [r1, #4]
 8008d28:	4638      	mov	r0, r7
 8008d2a:	f104 060b 	add.w	r6, r4, #11
 8008d2e:	f000 f865 	bl	8008dfc <__malloc_unlock>
 8008d32:	f026 0607 	bic.w	r6, r6, #7
 8008d36:	1d23      	adds	r3, r4, #4
 8008d38:	1af2      	subs	r2, r6, r3
 8008d3a:	d0b6      	beq.n	8008caa <_malloc_r+0x22>
 8008d3c:	1b9b      	subs	r3, r3, r6
 8008d3e:	50a3      	str	r3, [r4, r2]
 8008d40:	e7b3      	b.n	8008caa <_malloc_r+0x22>
 8008d42:	6862      	ldr	r2, [r4, #4]
 8008d44:	42a3      	cmp	r3, r4
 8008d46:	bf0c      	ite	eq
 8008d48:	6032      	streq	r2, [r6, #0]
 8008d4a:	605a      	strne	r2, [r3, #4]
 8008d4c:	e7ec      	b.n	8008d28 <_malloc_r+0xa0>
 8008d4e:	4623      	mov	r3, r4
 8008d50:	6864      	ldr	r4, [r4, #4]
 8008d52:	e7b2      	b.n	8008cba <_malloc_r+0x32>
 8008d54:	4634      	mov	r4, r6
 8008d56:	6876      	ldr	r6, [r6, #4]
 8008d58:	e7b9      	b.n	8008cce <_malloc_r+0x46>
 8008d5a:	230c      	movs	r3, #12
 8008d5c:	603b      	str	r3, [r7, #0]
 8008d5e:	4638      	mov	r0, r7
 8008d60:	f000 f84c 	bl	8008dfc <__malloc_unlock>
 8008d64:	e7a1      	b.n	8008caa <_malloc_r+0x22>
 8008d66:	6025      	str	r5, [r4, #0]
 8008d68:	e7de      	b.n	8008d28 <_malloc_r+0xa0>
 8008d6a:	bf00      	nop
 8008d6c:	200046fc 	.word	0x200046fc

08008d70 <_realloc_r>:
 8008d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d74:	4680      	mov	r8, r0
 8008d76:	4614      	mov	r4, r2
 8008d78:	460e      	mov	r6, r1
 8008d7a:	b921      	cbnz	r1, 8008d86 <_realloc_r+0x16>
 8008d7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d80:	4611      	mov	r1, r2
 8008d82:	f7ff bf81 	b.w	8008c88 <_malloc_r>
 8008d86:	b92a      	cbnz	r2, 8008d94 <_realloc_r+0x24>
 8008d88:	f7ff ff12 	bl	8008bb0 <_free_r>
 8008d8c:	4625      	mov	r5, r4
 8008d8e:	4628      	mov	r0, r5
 8008d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d94:	f000 f838 	bl	8008e08 <_malloc_usable_size_r>
 8008d98:	4284      	cmp	r4, r0
 8008d9a:	4607      	mov	r7, r0
 8008d9c:	d802      	bhi.n	8008da4 <_realloc_r+0x34>
 8008d9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008da2:	d812      	bhi.n	8008dca <_realloc_r+0x5a>
 8008da4:	4621      	mov	r1, r4
 8008da6:	4640      	mov	r0, r8
 8008da8:	f7ff ff6e 	bl	8008c88 <_malloc_r>
 8008dac:	4605      	mov	r5, r0
 8008dae:	2800      	cmp	r0, #0
 8008db0:	d0ed      	beq.n	8008d8e <_realloc_r+0x1e>
 8008db2:	42bc      	cmp	r4, r7
 8008db4:	4622      	mov	r2, r4
 8008db6:	4631      	mov	r1, r6
 8008db8:	bf28      	it	cs
 8008dba:	463a      	movcs	r2, r7
 8008dbc:	f7ff fbb8 	bl	8008530 <memcpy>
 8008dc0:	4631      	mov	r1, r6
 8008dc2:	4640      	mov	r0, r8
 8008dc4:	f7ff fef4 	bl	8008bb0 <_free_r>
 8008dc8:	e7e1      	b.n	8008d8e <_realloc_r+0x1e>
 8008dca:	4635      	mov	r5, r6
 8008dcc:	e7df      	b.n	8008d8e <_realloc_r+0x1e>
	...

08008dd0 <_sbrk_r>:
 8008dd0:	b538      	push	{r3, r4, r5, lr}
 8008dd2:	4d06      	ldr	r5, [pc, #24]	; (8008dec <_sbrk_r+0x1c>)
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	4604      	mov	r4, r0
 8008dd8:	4608      	mov	r0, r1
 8008dda:	602b      	str	r3, [r5, #0]
 8008ddc:	f7f9 f998 	bl	8002110 <_sbrk>
 8008de0:	1c43      	adds	r3, r0, #1
 8008de2:	d102      	bne.n	8008dea <_sbrk_r+0x1a>
 8008de4:	682b      	ldr	r3, [r5, #0]
 8008de6:	b103      	cbz	r3, 8008dea <_sbrk_r+0x1a>
 8008de8:	6023      	str	r3, [r4, #0]
 8008dea:	bd38      	pop	{r3, r4, r5, pc}
 8008dec:	20004704 	.word	0x20004704

08008df0 <__malloc_lock>:
 8008df0:	4801      	ldr	r0, [pc, #4]	; (8008df8 <__malloc_lock+0x8>)
 8008df2:	f000 b811 	b.w	8008e18 <__retarget_lock_acquire_recursive>
 8008df6:	bf00      	nop
 8008df8:	20004708 	.word	0x20004708

08008dfc <__malloc_unlock>:
 8008dfc:	4801      	ldr	r0, [pc, #4]	; (8008e04 <__malloc_unlock+0x8>)
 8008dfe:	f000 b80c 	b.w	8008e1a <__retarget_lock_release_recursive>
 8008e02:	bf00      	nop
 8008e04:	20004708 	.word	0x20004708

08008e08 <_malloc_usable_size_r>:
 8008e08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e0c:	1f18      	subs	r0, r3, #4
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	bfbc      	itt	lt
 8008e12:	580b      	ldrlt	r3, [r1, r0]
 8008e14:	18c0      	addlt	r0, r0, r3
 8008e16:	4770      	bx	lr

08008e18 <__retarget_lock_acquire_recursive>:
 8008e18:	4770      	bx	lr

08008e1a <__retarget_lock_release_recursive>:
 8008e1a:	4770      	bx	lr

08008e1c <_init>:
 8008e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e1e:	bf00      	nop
 8008e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e22:	bc08      	pop	{r3}
 8008e24:	469e      	mov	lr, r3
 8008e26:	4770      	bx	lr

08008e28 <_fini>:
 8008e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e2a:	bf00      	nop
 8008e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e2e:	bc08      	pop	{r3}
 8008e30:	469e      	mov	lr, r3
 8008e32:	4770      	bx	lr
