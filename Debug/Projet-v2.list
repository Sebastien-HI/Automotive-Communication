
Projet-v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008eb4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  08009044  08009044  00019044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092a4  080092a4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080092a4  080092a4  000192a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092ac  080092ac  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092ac  080092ac  000192ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092b0  080092b0  000192b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080092b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004698  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000470c  2000470c  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b923  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000042e1  00000000  00000000  0003b9c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001730  00000000  00000000  0003fca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001578  00000000  00000000  000413d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024906  00000000  00000000  00042950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b149  00000000  00000000  00067256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dcb73  00000000  00000000  0008239f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015ef12  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000646c  00000000  00000000  0015ef64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800902c 	.word	0x0800902c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800902c 	.word	0x0800902c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_d2uiz>:
 80005e8:	004a      	lsls	r2, r1, #1
 80005ea:	d211      	bcs.n	8000610 <__aeabi_d2uiz+0x28>
 80005ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005f0:	d211      	bcs.n	8000616 <__aeabi_d2uiz+0x2e>
 80005f2:	d50d      	bpl.n	8000610 <__aeabi_d2uiz+0x28>
 80005f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005fc:	d40e      	bmi.n	800061c <__aeabi_d2uiz+0x34>
 80005fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800060a:	fa23 f002 	lsr.w	r0, r3, r2
 800060e:	4770      	bx	lr
 8000610:	f04f 0000 	mov.w	r0, #0
 8000614:	4770      	bx	lr
 8000616:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800061a:	d102      	bne.n	8000622 <__aeabi_d2uiz+0x3a>
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	4770      	bx	lr
 8000622:	f04f 0000 	mov.w	r0, #0
 8000626:	4770      	bx	lr

08000628 <__aeabi_uldivmod>:
 8000628:	b953      	cbnz	r3, 8000640 <__aeabi_uldivmod+0x18>
 800062a:	b94a      	cbnz	r2, 8000640 <__aeabi_uldivmod+0x18>
 800062c:	2900      	cmp	r1, #0
 800062e:	bf08      	it	eq
 8000630:	2800      	cmpeq	r0, #0
 8000632:	bf1c      	itt	ne
 8000634:	f04f 31ff 	movne.w	r1, #4294967295
 8000638:	f04f 30ff 	movne.w	r0, #4294967295
 800063c:	f000 b974 	b.w	8000928 <__aeabi_idiv0>
 8000640:	f1ad 0c08 	sub.w	ip, sp, #8
 8000644:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000648:	f000 f806 	bl	8000658 <__udivmoddi4>
 800064c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000650:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000654:	b004      	add	sp, #16
 8000656:	4770      	bx	lr

08000658 <__udivmoddi4>:
 8000658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800065c:	9d08      	ldr	r5, [sp, #32]
 800065e:	4604      	mov	r4, r0
 8000660:	468e      	mov	lr, r1
 8000662:	2b00      	cmp	r3, #0
 8000664:	d14d      	bne.n	8000702 <__udivmoddi4+0xaa>
 8000666:	428a      	cmp	r2, r1
 8000668:	4694      	mov	ip, r2
 800066a:	d969      	bls.n	8000740 <__udivmoddi4+0xe8>
 800066c:	fab2 f282 	clz	r2, r2
 8000670:	b152      	cbz	r2, 8000688 <__udivmoddi4+0x30>
 8000672:	fa01 f302 	lsl.w	r3, r1, r2
 8000676:	f1c2 0120 	rsb	r1, r2, #32
 800067a:	fa20 f101 	lsr.w	r1, r0, r1
 800067e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000682:	ea41 0e03 	orr.w	lr, r1, r3
 8000686:	4094      	lsls	r4, r2
 8000688:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800068c:	0c21      	lsrs	r1, r4, #16
 800068e:	fbbe f6f8 	udiv	r6, lr, r8
 8000692:	fa1f f78c 	uxth.w	r7, ip
 8000696:	fb08 e316 	mls	r3, r8, r6, lr
 800069a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800069e:	fb06 f107 	mul.w	r1, r6, r7
 80006a2:	4299      	cmp	r1, r3
 80006a4:	d90a      	bls.n	80006bc <__udivmoddi4+0x64>
 80006a6:	eb1c 0303 	adds.w	r3, ip, r3
 80006aa:	f106 30ff 	add.w	r0, r6, #4294967295
 80006ae:	f080 811f 	bcs.w	80008f0 <__udivmoddi4+0x298>
 80006b2:	4299      	cmp	r1, r3
 80006b4:	f240 811c 	bls.w	80008f0 <__udivmoddi4+0x298>
 80006b8:	3e02      	subs	r6, #2
 80006ba:	4463      	add	r3, ip
 80006bc:	1a5b      	subs	r3, r3, r1
 80006be:	b2a4      	uxth	r4, r4
 80006c0:	fbb3 f0f8 	udiv	r0, r3, r8
 80006c4:	fb08 3310 	mls	r3, r8, r0, r3
 80006c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006cc:	fb00 f707 	mul.w	r7, r0, r7
 80006d0:	42a7      	cmp	r7, r4
 80006d2:	d90a      	bls.n	80006ea <__udivmoddi4+0x92>
 80006d4:	eb1c 0404 	adds.w	r4, ip, r4
 80006d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80006dc:	f080 810a 	bcs.w	80008f4 <__udivmoddi4+0x29c>
 80006e0:	42a7      	cmp	r7, r4
 80006e2:	f240 8107 	bls.w	80008f4 <__udivmoddi4+0x29c>
 80006e6:	4464      	add	r4, ip
 80006e8:	3802      	subs	r0, #2
 80006ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006ee:	1be4      	subs	r4, r4, r7
 80006f0:	2600      	movs	r6, #0
 80006f2:	b11d      	cbz	r5, 80006fc <__udivmoddi4+0xa4>
 80006f4:	40d4      	lsrs	r4, r2
 80006f6:	2300      	movs	r3, #0
 80006f8:	e9c5 4300 	strd	r4, r3, [r5]
 80006fc:	4631      	mov	r1, r6
 80006fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000702:	428b      	cmp	r3, r1
 8000704:	d909      	bls.n	800071a <__udivmoddi4+0xc2>
 8000706:	2d00      	cmp	r5, #0
 8000708:	f000 80ef 	beq.w	80008ea <__udivmoddi4+0x292>
 800070c:	2600      	movs	r6, #0
 800070e:	e9c5 0100 	strd	r0, r1, [r5]
 8000712:	4630      	mov	r0, r6
 8000714:	4631      	mov	r1, r6
 8000716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800071a:	fab3 f683 	clz	r6, r3
 800071e:	2e00      	cmp	r6, #0
 8000720:	d14a      	bne.n	80007b8 <__udivmoddi4+0x160>
 8000722:	428b      	cmp	r3, r1
 8000724:	d302      	bcc.n	800072c <__udivmoddi4+0xd4>
 8000726:	4282      	cmp	r2, r0
 8000728:	f200 80f9 	bhi.w	800091e <__udivmoddi4+0x2c6>
 800072c:	1a84      	subs	r4, r0, r2
 800072e:	eb61 0303 	sbc.w	r3, r1, r3
 8000732:	2001      	movs	r0, #1
 8000734:	469e      	mov	lr, r3
 8000736:	2d00      	cmp	r5, #0
 8000738:	d0e0      	beq.n	80006fc <__udivmoddi4+0xa4>
 800073a:	e9c5 4e00 	strd	r4, lr, [r5]
 800073e:	e7dd      	b.n	80006fc <__udivmoddi4+0xa4>
 8000740:	b902      	cbnz	r2, 8000744 <__udivmoddi4+0xec>
 8000742:	deff      	udf	#255	; 0xff
 8000744:	fab2 f282 	clz	r2, r2
 8000748:	2a00      	cmp	r2, #0
 800074a:	f040 8092 	bne.w	8000872 <__udivmoddi4+0x21a>
 800074e:	eba1 010c 	sub.w	r1, r1, ip
 8000752:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000756:	fa1f fe8c 	uxth.w	lr, ip
 800075a:	2601      	movs	r6, #1
 800075c:	0c20      	lsrs	r0, r4, #16
 800075e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000762:	fb07 1113 	mls	r1, r7, r3, r1
 8000766:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800076a:	fb0e f003 	mul.w	r0, lr, r3
 800076e:	4288      	cmp	r0, r1
 8000770:	d908      	bls.n	8000784 <__udivmoddi4+0x12c>
 8000772:	eb1c 0101 	adds.w	r1, ip, r1
 8000776:	f103 38ff 	add.w	r8, r3, #4294967295
 800077a:	d202      	bcs.n	8000782 <__udivmoddi4+0x12a>
 800077c:	4288      	cmp	r0, r1
 800077e:	f200 80cb 	bhi.w	8000918 <__udivmoddi4+0x2c0>
 8000782:	4643      	mov	r3, r8
 8000784:	1a09      	subs	r1, r1, r0
 8000786:	b2a4      	uxth	r4, r4
 8000788:	fbb1 f0f7 	udiv	r0, r1, r7
 800078c:	fb07 1110 	mls	r1, r7, r0, r1
 8000790:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000794:	fb0e fe00 	mul.w	lr, lr, r0
 8000798:	45a6      	cmp	lr, r4
 800079a:	d908      	bls.n	80007ae <__udivmoddi4+0x156>
 800079c:	eb1c 0404 	adds.w	r4, ip, r4
 80007a0:	f100 31ff 	add.w	r1, r0, #4294967295
 80007a4:	d202      	bcs.n	80007ac <__udivmoddi4+0x154>
 80007a6:	45a6      	cmp	lr, r4
 80007a8:	f200 80bb 	bhi.w	8000922 <__udivmoddi4+0x2ca>
 80007ac:	4608      	mov	r0, r1
 80007ae:	eba4 040e 	sub.w	r4, r4, lr
 80007b2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007b6:	e79c      	b.n	80006f2 <__udivmoddi4+0x9a>
 80007b8:	f1c6 0720 	rsb	r7, r6, #32
 80007bc:	40b3      	lsls	r3, r6
 80007be:	fa22 fc07 	lsr.w	ip, r2, r7
 80007c2:	ea4c 0c03 	orr.w	ip, ip, r3
 80007c6:	fa20 f407 	lsr.w	r4, r0, r7
 80007ca:	fa01 f306 	lsl.w	r3, r1, r6
 80007ce:	431c      	orrs	r4, r3
 80007d0:	40f9      	lsrs	r1, r7
 80007d2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007d6:	fa00 f306 	lsl.w	r3, r0, r6
 80007da:	fbb1 f8f9 	udiv	r8, r1, r9
 80007de:	0c20      	lsrs	r0, r4, #16
 80007e0:	fa1f fe8c 	uxth.w	lr, ip
 80007e4:	fb09 1118 	mls	r1, r9, r8, r1
 80007e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007ec:	fb08 f00e 	mul.w	r0, r8, lr
 80007f0:	4288      	cmp	r0, r1
 80007f2:	fa02 f206 	lsl.w	r2, r2, r6
 80007f6:	d90b      	bls.n	8000810 <__udivmoddi4+0x1b8>
 80007f8:	eb1c 0101 	adds.w	r1, ip, r1
 80007fc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000800:	f080 8088 	bcs.w	8000914 <__udivmoddi4+0x2bc>
 8000804:	4288      	cmp	r0, r1
 8000806:	f240 8085 	bls.w	8000914 <__udivmoddi4+0x2bc>
 800080a:	f1a8 0802 	sub.w	r8, r8, #2
 800080e:	4461      	add	r1, ip
 8000810:	1a09      	subs	r1, r1, r0
 8000812:	b2a4      	uxth	r4, r4
 8000814:	fbb1 f0f9 	udiv	r0, r1, r9
 8000818:	fb09 1110 	mls	r1, r9, r0, r1
 800081c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000820:	fb00 fe0e 	mul.w	lr, r0, lr
 8000824:	458e      	cmp	lr, r1
 8000826:	d908      	bls.n	800083a <__udivmoddi4+0x1e2>
 8000828:	eb1c 0101 	adds.w	r1, ip, r1
 800082c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000830:	d26c      	bcs.n	800090c <__udivmoddi4+0x2b4>
 8000832:	458e      	cmp	lr, r1
 8000834:	d96a      	bls.n	800090c <__udivmoddi4+0x2b4>
 8000836:	3802      	subs	r0, #2
 8000838:	4461      	add	r1, ip
 800083a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800083e:	fba0 9402 	umull	r9, r4, r0, r2
 8000842:	eba1 010e 	sub.w	r1, r1, lr
 8000846:	42a1      	cmp	r1, r4
 8000848:	46c8      	mov	r8, r9
 800084a:	46a6      	mov	lr, r4
 800084c:	d356      	bcc.n	80008fc <__udivmoddi4+0x2a4>
 800084e:	d053      	beq.n	80008f8 <__udivmoddi4+0x2a0>
 8000850:	b15d      	cbz	r5, 800086a <__udivmoddi4+0x212>
 8000852:	ebb3 0208 	subs.w	r2, r3, r8
 8000856:	eb61 010e 	sbc.w	r1, r1, lr
 800085a:	fa01 f707 	lsl.w	r7, r1, r7
 800085e:	fa22 f306 	lsr.w	r3, r2, r6
 8000862:	40f1      	lsrs	r1, r6
 8000864:	431f      	orrs	r7, r3
 8000866:	e9c5 7100 	strd	r7, r1, [r5]
 800086a:	2600      	movs	r6, #0
 800086c:	4631      	mov	r1, r6
 800086e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000872:	f1c2 0320 	rsb	r3, r2, #32
 8000876:	40d8      	lsrs	r0, r3
 8000878:	fa0c fc02 	lsl.w	ip, ip, r2
 800087c:	fa21 f303 	lsr.w	r3, r1, r3
 8000880:	4091      	lsls	r1, r2
 8000882:	4301      	orrs	r1, r0
 8000884:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000888:	fa1f fe8c 	uxth.w	lr, ip
 800088c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000890:	fb07 3610 	mls	r6, r7, r0, r3
 8000894:	0c0b      	lsrs	r3, r1, #16
 8000896:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800089a:	fb00 f60e 	mul.w	r6, r0, lr
 800089e:	429e      	cmp	r6, r3
 80008a0:	fa04 f402 	lsl.w	r4, r4, r2
 80008a4:	d908      	bls.n	80008b8 <__udivmoddi4+0x260>
 80008a6:	eb1c 0303 	adds.w	r3, ip, r3
 80008aa:	f100 38ff 	add.w	r8, r0, #4294967295
 80008ae:	d22f      	bcs.n	8000910 <__udivmoddi4+0x2b8>
 80008b0:	429e      	cmp	r6, r3
 80008b2:	d92d      	bls.n	8000910 <__udivmoddi4+0x2b8>
 80008b4:	3802      	subs	r0, #2
 80008b6:	4463      	add	r3, ip
 80008b8:	1b9b      	subs	r3, r3, r6
 80008ba:	b289      	uxth	r1, r1
 80008bc:	fbb3 f6f7 	udiv	r6, r3, r7
 80008c0:	fb07 3316 	mls	r3, r7, r6, r3
 80008c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008c8:	fb06 f30e 	mul.w	r3, r6, lr
 80008cc:	428b      	cmp	r3, r1
 80008ce:	d908      	bls.n	80008e2 <__udivmoddi4+0x28a>
 80008d0:	eb1c 0101 	adds.w	r1, ip, r1
 80008d4:	f106 38ff 	add.w	r8, r6, #4294967295
 80008d8:	d216      	bcs.n	8000908 <__udivmoddi4+0x2b0>
 80008da:	428b      	cmp	r3, r1
 80008dc:	d914      	bls.n	8000908 <__udivmoddi4+0x2b0>
 80008de:	3e02      	subs	r6, #2
 80008e0:	4461      	add	r1, ip
 80008e2:	1ac9      	subs	r1, r1, r3
 80008e4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008e8:	e738      	b.n	800075c <__udivmoddi4+0x104>
 80008ea:	462e      	mov	r6, r5
 80008ec:	4628      	mov	r0, r5
 80008ee:	e705      	b.n	80006fc <__udivmoddi4+0xa4>
 80008f0:	4606      	mov	r6, r0
 80008f2:	e6e3      	b.n	80006bc <__udivmoddi4+0x64>
 80008f4:	4618      	mov	r0, r3
 80008f6:	e6f8      	b.n	80006ea <__udivmoddi4+0x92>
 80008f8:	454b      	cmp	r3, r9
 80008fa:	d2a9      	bcs.n	8000850 <__udivmoddi4+0x1f8>
 80008fc:	ebb9 0802 	subs.w	r8, r9, r2
 8000900:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000904:	3801      	subs	r0, #1
 8000906:	e7a3      	b.n	8000850 <__udivmoddi4+0x1f8>
 8000908:	4646      	mov	r6, r8
 800090a:	e7ea      	b.n	80008e2 <__udivmoddi4+0x28a>
 800090c:	4620      	mov	r0, r4
 800090e:	e794      	b.n	800083a <__udivmoddi4+0x1e2>
 8000910:	4640      	mov	r0, r8
 8000912:	e7d1      	b.n	80008b8 <__udivmoddi4+0x260>
 8000914:	46d0      	mov	r8, sl
 8000916:	e77b      	b.n	8000810 <__udivmoddi4+0x1b8>
 8000918:	3b02      	subs	r3, #2
 800091a:	4461      	add	r1, ip
 800091c:	e732      	b.n	8000784 <__udivmoddi4+0x12c>
 800091e:	4630      	mov	r0, r6
 8000920:	e709      	b.n	8000736 <__udivmoddi4+0xde>
 8000922:	4464      	add	r4, ip
 8000924:	3802      	subs	r0, #2
 8000926:	e742      	b.n	80007ae <__udivmoddi4+0x156>

08000928 <__aeabi_idiv0>:
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop

0800092c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
void MX_CAN1_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08c      	sub	sp, #48	; 0x30
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000932:	4b2a      	ldr	r3, [pc, #168]	; (80009dc <MX_CAN1_Init+0xb0>)
 8000934:	4a2a      	ldr	r2, [pc, #168]	; (80009e0 <MX_CAN1_Init+0xb4>)
 8000936:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 17;
 8000938:	4b28      	ldr	r3, [pc, #160]	; (80009dc <MX_CAN1_Init+0xb0>)
 800093a:	2211      	movs	r2, #17
 800093c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800093e:	4b27      	ldr	r3, [pc, #156]	; (80009dc <MX_CAN1_Init+0xb0>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000944:	4b25      	ldr	r3, [pc, #148]	; (80009dc <MX_CAN1_Init+0xb0>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 800094a:	4b24      	ldr	r3, [pc, #144]	; (80009dc <MX_CAN1_Init+0xb0>)
 800094c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8000950:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000952:	4b22      	ldr	r3, [pc, #136]	; (80009dc <MX_CAN1_Init+0xb0>)
 8000954:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000958:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800095a:	4b20      	ldr	r3, [pc, #128]	; (80009dc <MX_CAN1_Init+0xb0>)
 800095c:	2200      	movs	r2, #0
 800095e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000960:	4b1e      	ldr	r3, [pc, #120]	; (80009dc <MX_CAN1_Init+0xb0>)
 8000962:	2200      	movs	r2, #0
 8000964:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000966:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <MX_CAN1_Init+0xb0>)
 8000968:	2200      	movs	r2, #0
 800096a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800096c:	4b1b      	ldr	r3, [pc, #108]	; (80009dc <MX_CAN1_Init+0xb0>)
 800096e:	2200      	movs	r2, #0
 8000970:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000972:	4b1a      	ldr	r3, [pc, #104]	; (80009dc <MX_CAN1_Init+0xb0>)
 8000974:	2200      	movs	r2, #0
 8000976:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000978:	4b18      	ldr	r3, [pc, #96]	; (80009dc <MX_CAN1_Init+0xb0>)
 800097a:	2200      	movs	r2, #0
 800097c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800097e:	4817      	ldr	r0, [pc, #92]	; (80009dc <MX_CAN1_Init+0xb0>)
 8000980:	f001 fc74 	bl	800226c <HAL_CAN_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800098a:	f001 f933 	bl	8001bf4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef Filtre_Reception;
  Filtre_Reception.FilterBank = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
  Filtre_Reception.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
  Filtre_Reception.FilterActivation = CAN_FILTER_ENABLE;
 8000996:	2301      	movs	r3, #1
 8000998:	623b      	str	r3, [r7, #32]
  Filtre_Reception.FilterScale = CAN_FILTERSCALE_32BIT;
 800099a:	2301      	movs	r3, #1
 800099c:	61fb      	str	r3, [r7, #28]
  Filtre_Reception.FilterMode = CAN_FILTERMODE_IDMASK;
 800099e:	2300      	movs	r3, #0
 80009a0:	61bb      	str	r3, [r7, #24]

  uint32_t IDref =  0x10005000 << 3 | 0b100; //IDs venant d'un esclave envoyant pour tout le réseau
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <MX_CAN1_Init+0xb8>)
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t Masque = 0x1F00FF00 << 3 | 0b000; //Valeurs qui filtreront les arrivages -> 0 parce que tout est canné
 80009a6:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <MX_CAN1_Init+0xbc>)
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28

  Filtre_Reception.FilterIdHigh = IDref >> 16;
 80009aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009ac:	0c1b      	lsrs	r3, r3, #16
 80009ae:	603b      	str	r3, [r7, #0]
  Filtre_Reception.FilterIdLow = IDref & 0xFFFF;
 80009b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	607b      	str	r3, [r7, #4]
  Filtre_Reception.FilterMaskIdHigh = Masque >> 16;
 80009b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009b8:	0c1b      	lsrs	r3, r3, #16
 80009ba:	60bb      	str	r3, [r7, #8]
  Filtre_Reception.FilterMaskIdLow = Masque & 0xFFFF;
 80009bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009be:	b29b      	uxth	r3, r3
 80009c0:	60fb      	str	r3, [r7, #12]

  HAL_CAN_ConfigFilter (&hcan1, &Filtre_Reception);
 80009c2:	463b      	mov	r3, r7
 80009c4:	4619      	mov	r1, r3
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <MX_CAN1_Init+0xb0>)
 80009c8:	f001 fd4c 	bl	8002464 <HAL_CAN_ConfigFilter>

  //Exemple d'ID d'esclave à tout le réseau :  0x 1000 630F
  //Exemple d'ID de STM répondant à l'esclave :0x 1063 100F

  HAL_CAN_ActivateNotification (&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING);
 80009cc:	2102      	movs	r1, #2
 80009ce:	4803      	ldr	r0, [pc, #12]	; (80009dc <MX_CAN1_Init+0xb0>)
 80009d0:	f001 ff47 	bl	8002862 <HAL_CAN_ActivateNotification>

  /* USER CODE END CAN1_Init 2 */

}
 80009d4:	bf00      	nop
 80009d6:	3730      	adds	r7, #48	; 0x30
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	200007c8 	.word	0x200007c8
 80009e0:	40006400 	.word	0x40006400
 80009e4:	80028004 	.word	0x80028004
 80009e8:	f807f800 	.word	0xf807f800

080009ec <CAN_Act>:

void CAN_Act(uint8_t Slave_Addr, uint8_t Port_Addr, int8_t Data){
 80009ec:	b5b0      	push	{r4, r5, r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	71fb      	strb	r3, [r7, #7]
 80009f6:	460b      	mov	r3, r1
 80009f8:	71bb      	strb	r3, [r7, #6]
 80009fa:	4613      	mov	r3, r2
 80009fc:	717b      	strb	r3, [r7, #5]
	int32_t Adresse = 0x10000000 | (Slave_Addr << 16) | (CAN_MASTER_ADDR << 8) | Port_Addr; //Esclave + Port Read A
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	041b      	lsls	r3, r3, #16
 8000a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a06:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8000a0a:	79ba      	ldrb	r2, [r7, #6]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	60fb      	str	r3, [r7, #12]
	CAN_Send(Adresse,Data);
 8000a10:	68f8      	ldr	r0, [r7, #12]
 8000a12:	f7ff fd7f 	bl	8000514 <__aeabi_i2d>
 8000a16:	4604      	mov	r4, r0
 8000a18:	460d      	mov	r5, r1
 8000a1a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	ec45 4b10 	vmov	d0, r4, r5
 8000a24:	f000 f804 	bl	8000a30 <CAN_Send>
}
 8000a28:	bf00      	nop
 8000a2a:	3710      	adds	r7, #16
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bdb0      	pop	{r4, r5, r7, pc}

08000a30 <CAN_Send>:
/**
 * @brief CAN Send message
 * @retval none
 * Dans l'hypothèse qu'on aura pas besoin d'envoyer de trames avec plus d'un octet
 */
void CAN_Send(double Addr, int8_t Data){
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08e      	sub	sp, #56	; 0x38
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	ed87 0b02 	vstr	d0, [r7, #8]
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
	CAN_TxHeaderTypeDef   TxHeader;
	uint8_t               TxData[8];
	uint32_t              TxMailbox;

	TxHeader.IDE = CAN_ID_EXT; //MODE CAN ETENDU
 8000a3e:	2304      	movs	r3, #4
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.ExtId = Addr;
 8000a42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000a46:	f7ff fdcf 	bl	80005e8 <__aeabi_d2uiz>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.RTR = CAN_RTR_DATA;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	62fb      	str	r3, [r7, #44]	; 0x2c
	TxHeader.DLC = 1;
 8000a52:	2301      	movs	r3, #1
 8000a54:	633b      	str	r3, [r7, #48]	; 0x30
	TxData[0] = Data;
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	763b      	strb	r3, [r7, #24]

	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	f107 0218 	add.w	r2, r7, #24
 8000a62:	f107 0120 	add.w	r1, r7, #32
 8000a66:	4806      	ldr	r0, [pc, #24]	; (8000a80 <CAN_Send+0x50>)
 8000a68:	f001 fe20 	bl	80026ac <HAL_CAN_AddTxMessage>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <CAN_Send+0x46>
	{
	 Error_Handler ();
 8000a72:	f001 f8bf 	bl	8001bf4 <Error_Handler>
	}
	//Message envoyé ?
	//while(HAL_CAN_IsTxMessagePending(&hcan1, &TxMailbox));

}
 8000a76:	bf00      	nop
 8000a78:	3738      	adds	r7, #56	; 0x38
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200007c8 	.word	0x200007c8

08000a84 <temporisation>:

//Rotate les LEDs [loops] fois, 0 = infini

#include "Misc.h"

void temporisation(int temps){
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  int temporisation = temps * 1000 * 21; //Approximation de la milliseconde
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f245 2208 	movw	r2, #21000	; 0x5208
 8000a92:	fb02 f303 	mul.w	r3, r2, r3
 8000a96:	60fb      	str	r3, [r7, #12]
  while(temporisation -- > 0);
 8000a98:	bf00      	nop
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	1e5a      	subs	r2, r3, #1
 8000a9e:	60fa      	str	r2, [r7, #12]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	dcfa      	bgt.n	8000a9a <temporisation+0x16>
}
 8000aa4:	bf00      	nop
 8000aa6:	bf00      	nop
 8000aa8:	3714      	adds	r7, #20
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
	...

08000ab4 <LED_Blink>:
	}while((loops > 0) | !inf);
	GPIOD->ODR = ActualState;
}

//Blinke les LEDs [loops] fois, 0 = infini
void LED_Blink(int loops){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	char ActualState = GPIOD->ODR;
 8000abc:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <LED_Blink+0x6c>)
 8000abe:	695b      	ldr	r3, [r3, #20]
 8000ac0:	73fb      	strb	r3, [r7, #15]
	char dec = loops ? 1 : 0;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	bf14      	ite	ne
 8000ac8:	2301      	movne	r3, #1
 8000aca:	2300      	moveq	r3, #0
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	73bb      	strb	r3, [r7, #14]
	do{
		GPIOD->ODR = 0xF000;
 8000ad0:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <LED_Blink+0x6c>)
 8000ad2:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 8000ad6:	615a      	str	r2, [r3, #20]
		temporisation(150);
 8000ad8:	2096      	movs	r0, #150	; 0x96
 8000ada:	f7ff ffd3 	bl	8000a84 <temporisation>
		GPIOD->ODR = 0x0000;
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <LED_Blink+0x6c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	615a      	str	r2, [r3, #20]
		temporisation(150);
 8000ae4:	2096      	movs	r0, #150	; 0x96
 8000ae6:	f7ff ffcd 	bl	8000a84 <temporisation>
		loops --;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	3b01      	subs	r3, #1
 8000aee:	607b      	str	r3, [r7, #4]
	}while((loops > 0) |( dec == 0));
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	bfcc      	ite	gt
 8000af6:	2301      	movgt	r3, #1
 8000af8:	2300      	movle	r3, #0
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	7bbb      	ldrb	r3, [r7, #14]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	bf0c      	ite	eq
 8000b02:	2301      	moveq	r3, #1
 8000b04:	2300      	movne	r3, #0
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d1df      	bne.n	8000ad0 <LED_Blink+0x1c>

	GPIOD->ODR = ActualState;
 8000b10:	4a03      	ldr	r2, [pc, #12]	; (8000b20 <LED_Blink+0x6c>)
 8000b12:	7bfb      	ldrb	r3, [r7, #15]
 8000b14:	6153      	str	r3, [r2, #20]
}
 8000b16:	bf00      	nop
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40020c00 	.word	0x40020c00

08000b24 <LED_Operate>:

//Allume toutes les LEDs
void LED_Operate(char State){
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	71fb      	strb	r3, [r7, #7]
	GPIOD->ODR = 0xF000 * State;
 8000b2e:	79fa      	ldrb	r2, [r7, #7]
 8000b30:	4613      	mov	r3, r2
 8000b32:	011b      	lsls	r3, r3, #4
 8000b34:	1a9b      	subs	r3, r3, r2
 8000b36:	031b      	lsls	r3, r3, #12
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <LED_Operate+0x28>)
 8000b3c:	615a      	str	r2, [r3, #20]
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	40020c00 	.word	0x40020c00

08000b50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b54:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <__NVIC_GetPriorityGrouping+0x18>)
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	0a1b      	lsrs	r3, r3, #8
 8000b5a:	f003 0307 	and.w	r3, r3, #7
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	db0b      	blt.n	8000b96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	f003 021f 	and.w	r2, r3, #31
 8000b84:	4907      	ldr	r1, [pc, #28]	; (8000ba4 <__NVIC_EnableIRQ+0x38>)
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	095b      	lsrs	r3, r3, #5
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	e000e100 	.word	0xe000e100

08000ba8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	6039      	str	r1, [r7, #0]
 8000bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	db0a      	blt.n	8000bd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	490c      	ldr	r1, [pc, #48]	; (8000bf4 <__NVIC_SetPriority+0x4c>)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	0112      	lsls	r2, r2, #4
 8000bc8:	b2d2      	uxtb	r2, r2
 8000bca:	440b      	add	r3, r1
 8000bcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd0:	e00a      	b.n	8000be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	4908      	ldr	r1, [pc, #32]	; (8000bf8 <__NVIC_SetPriority+0x50>)
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	f003 030f 	and.w	r3, r3, #15
 8000bde:	3b04      	subs	r3, #4
 8000be0:	0112      	lsls	r2, r2, #4
 8000be2:	b2d2      	uxtb	r2, r2
 8000be4:	440b      	add	r3, r1
 8000be6:	761a      	strb	r2, [r3, #24]
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000e100 	.word	0xe000e100
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b089      	sub	sp, #36	; 0x24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	f1c3 0307 	rsb	r3, r3, #7
 8000c16:	2b04      	cmp	r3, #4
 8000c18:	bf28      	it	cs
 8000c1a:	2304      	movcs	r3, #4
 8000c1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3304      	adds	r3, #4
 8000c22:	2b06      	cmp	r3, #6
 8000c24:	d902      	bls.n	8000c2c <NVIC_EncodePriority+0x30>
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	3b03      	subs	r3, #3
 8000c2a:	e000      	b.n	8000c2e <NVIC_EncodePriority+0x32>
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c30:	f04f 32ff 	mov.w	r2, #4294967295
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43da      	mvns	r2, r3
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	401a      	ands	r2, r3
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c44:	f04f 31ff 	mov.w	r1, #4294967295
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4e:	43d9      	mvns	r1, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	4313      	orrs	r3, r2
         );
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3724      	adds	r7, #36	; 0x24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
	...

08000c64 <UART_Init>:
extern osThreadId LIN_SelectorHandle;

//UART_Init() sets up the UART for a 8-bit data, No Parity, 1 Stop bit
//at 9600 baud with transmitter interrupts enabled
void UART_Init (void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
	/* Enable interrupt */
	NVIC_EnableIRQ(USART3_IRQn);
 8000c6a:	2027      	movs	r0, #39	; 0x27
 8000c6c:	f7ff ff7e 	bl	8000b6c <__NVIC_EnableIRQ>

	//enable GPIO
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c70:	2300      	movs	r3, #0
 8000c72:	60bb      	str	r3, [r7, #8]
 8000c74:	4b36      	ldr	r3, [pc, #216]	; (8000d50 <UART_Init+0xec>)
 8000c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c78:	4a35      	ldr	r2, [pc, #212]	; (8000d50 <UART_Init+0xec>)
 8000c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c80:	4b33      	ldr	r3, [pc, #204]	; (8000d50 <UART_Init+0xec>)
 8000c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	4b2f      	ldr	r3, [pc, #188]	; (8000d50 <UART_Init+0xec>)
 8000c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c94:	4a2e      	ldr	r2, [pc, #184]	; (8000d50 <UART_Init+0xec>)
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9c:	4b2c      	ldr	r3, [pc, #176]	; (8000d50 <UART_Init+0xec>)
 8000c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca0:	f003 0301 	and.w	r3, r3, #1
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca8:	2300      	movs	r3, #0
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	4b28      	ldr	r3, [pc, #160]	; (8000d50 <UART_Init+0xec>)
 8000cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb0:	4a27      	ldr	r2, [pc, #156]	; (8000d50 <UART_Init+0xec>)
 8000cb2:	f043 0302 	orr.w	r3, r3, #2
 8000cb6:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb8:	4b25      	ldr	r3, [pc, #148]	; (8000d50 <UART_Init+0xec>)
 8000cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbc:	f003 0302 	and.w	r3, r3, #2
 8000cc0:	603b      	str	r3, [r7, #0]
 8000cc2:	683b      	ldr	r3, [r7, #0]

  
    //enable USART3
	  huart3.Instance = USART3;
 8000cc4:	4b23      	ldr	r3, [pc, #140]	; (8000d54 <UART_Init+0xf0>)
 8000cc6:	4a24      	ldr	r2, [pc, #144]	; (8000d58 <UART_Init+0xf4>)
 8000cc8:	601a      	str	r2, [r3, #0]
	  huart3.Init.BaudRate = 9600;
 8000cca:	4b22      	ldr	r3, [pc, #136]	; (8000d54 <UART_Init+0xf0>)
 8000ccc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000cd0:	605a      	str	r2, [r3, #4]
	  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cd2:	4b20      	ldr	r3, [pc, #128]	; (8000d54 <UART_Init+0xf0>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
	  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cd8:	4b1e      	ldr	r3, [pc, #120]	; (8000d54 <UART_Init+0xf0>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	60da      	str	r2, [r3, #12]
	  huart3.Init.Parity = UART_PARITY_NONE;
 8000cde:	4b1d      	ldr	r3, [pc, #116]	; (8000d54 <UART_Init+0xf0>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	611a      	str	r2, [r3, #16]
	  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ce4:	4b1b      	ldr	r3, [pc, #108]	; (8000d54 <UART_Init+0xf0>)
 8000ce6:	220c      	movs	r2, #12
 8000ce8:	615a      	str	r2, [r3, #20]
	  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cea:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <UART_Init+0xf0>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	619a      	str	r2, [r3, #24]
	  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf0:	4b18      	ldr	r3, [pc, #96]	; (8000d54 <UART_Init+0xf0>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	61da      	str	r2, [r3, #28]
	  if (HAL_LIN_Init(&huart3, UART_LINBREAKDETECTLENGTH_10B) != HAL_OK)
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4816      	ldr	r0, [pc, #88]	; (8000d54 <UART_Init+0xf0>)
 8000cfa:	f003 fcc1 	bl	8004680 <HAL_LIN_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <UART_Init+0xa4>
	  {
	    Error_Handler();
 8000d04:	f000 ff76 	bl	8001bf4 <Error_Handler>
	  }
		uint32_t prioritygroup = 0x00U;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60fb      	str	r3, [r7, #12]
		prioritygroup = NVIC_GetPriorityGrouping();
 8000d0c:	f7ff ff20 	bl	8000b50 <__NVIC_GetPriorityGrouping>
 8000d10:	60f8      	str	r0, [r7, #12]
		NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(prioritygroup, 15, 15));
 8000d12:	220f      	movs	r2, #15
 8000d14:	210f      	movs	r1, #15
 8000d16:	68f8      	ldr	r0, [r7, #12]
 8000d18:	f7ff ff70 	bl	8000bfc <NVIC_EncodePriority>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	4619      	mov	r1, r3
 8000d20:	2027      	movs	r0, #39	; 0x27
 8000d22:	f7ff ff41 	bl	8000ba8 <__NVIC_SetPriority>

	  __HAL_UART_ENABLE_IT(&huart3,UART_IT_RXNE);
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <UART_Init+0xf0>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	68da      	ldr	r2, [r3, #12]
 8000d2c:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <UART_Init+0xf0>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f042 0220 	orr.w	r2, r2, #32
 8000d34:	60da      	str	r2, [r3, #12]
  
    //USART3->CR2 |= 0x00004020;	//enable LIN mode and LBDL a desactiver pour dernier test final interruption com
    USART3->CR2 |= 0x00004060;	//enable LIN mode, LBDIE and LBDL for break detection
 8000d36:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <UART_Init+0xf4>)
 8000d38:	691b      	ldr	r3, [r3, #16]
 8000d3a:	4a07      	ldr	r2, [pc, #28]	; (8000d58 <UART_Init+0xf4>)
 8000d3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d40:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000d44:	6113      	str	r3, [r2, #16]
}
 8000d46:	bf00      	nop
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40023800 	.word	0x40023800
 8000d54:	200000b4 	.word	0x200000b4
 8000d58:	40004800 	.word	0x40004800

08000d5c <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
	uint8_t calcul;
	uint8_t checksum1;
	uint8_t trash;
	uint8_t trash2;
	int timeout=100000;
 8000d62:	4b59      	ldr	r3, [pc, #356]	; (8000ec8 <USART3_IRQHandler+0x16c>)
 8000d64:	60fb      	str	r3, [r7, #12]
	volatile int compteur=0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	607b      	str	r3, [r7, #4]

	HAL_UART_IRQHandler(&huart3);
 8000d6a:	4858      	ldr	r0, [pc, #352]	; (8000ecc <USART3_IRQHandler+0x170>)
 8000d6c:	f003 fcee 	bl	800474c <HAL_UART_IRQHandler>
	if (USART3->SR & USART_SR_LBD_Msk) //Si une trame arrive
 8000d70:	4b57      	ldr	r3, [pc, #348]	; (8000ed0 <USART3_IRQHandler+0x174>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	f000 809b 	beq.w	8000eb4 <USART3_IRQHandler+0x158>
	{
		USART3->SR &= ~(USART_SR_LBD_Msk);//RAZ flag
 8000d7e:	4b54      	ldr	r3, [pc, #336]	; (8000ed0 <USART3_IRQHandler+0x174>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a53      	ldr	r2, [pc, #332]	; (8000ed0 <USART3_IRQHandler+0x174>)
 8000d84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d88:	6013      	str	r3, [r2, #0]
		while(!(USART3->SR & 0x00000020) && timeout>compteur) //RXNE donnée prete a être lue
 8000d8a:	e002      	b.n	8000d92 <USART3_IRQHandler+0x36>
		{
			compteur++;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	607b      	str	r3, [r7, #4]
		while(!(USART3->SR & 0x00000020) && timeout>compteur) //RXNE donnée prete a être lue
 8000d92:	4b4f      	ldr	r3, [pc, #316]	; (8000ed0 <USART3_IRQHandler+0x174>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 0320 	and.w	r3, r3, #32
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d103      	bne.n	8000da6 <USART3_IRQHandler+0x4a>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	68fa      	ldr	r2, [r7, #12]
 8000da2:	429a      	cmp	r2, r3
 8000da4:	dcf2      	bgt.n	8000d8c <USART3_IRQHandler+0x30>
		}
		compteur=0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	607b      	str	r3, [r7, #4]
		trash = USART3->DR;
 8000daa:	4b49      	ldr	r3, [pc, #292]	; (8000ed0 <USART3_IRQHandler+0x174>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	72fb      	strb	r3, [r7, #11]
		while(!(USART3->SR & 0x00000020) && timeout>compteur) //RXNE donnée prete a être lue
 8000db0:	e002      	b.n	8000db8 <USART3_IRQHandler+0x5c>
		{
			compteur++;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	3301      	adds	r3, #1
 8000db6:	607b      	str	r3, [r7, #4]
		while(!(USART3->SR & 0x00000020) && timeout>compteur) //RXNE donnée prete a être lue
 8000db8:	4b45      	ldr	r3, [pc, #276]	; (8000ed0 <USART3_IRQHandler+0x174>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f003 0320 	and.w	r3, r3, #32
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d103      	bne.n	8000dcc <USART3_IRQHandler+0x70>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	68fa      	ldr	r2, [r7, #12]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	dcf2      	bgt.n	8000db2 <USART3_IRQHandler+0x56>
		}
		compteur=0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	607b      	str	r3, [r7, #4]
		trash2 = USART3->DR;
 8000dd0:	4b3f      	ldr	r3, [pc, #252]	; (8000ed0 <USART3_IRQHandler+0x174>)
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	72bb      	strb	r3, [r7, #10]
		while(!(USART3->SR & 0x00000020) && timeout>compteur) //RXNE donnée prete a être lue
 8000dd6:	e002      	b.n	8000dde <USART3_IRQHandler+0x82>
		{
			compteur++;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	607b      	str	r3, [r7, #4]
		while(!(USART3->SR & 0x00000020) && timeout>compteur) //RXNE donnée prete a être lue
 8000dde:	4b3c      	ldr	r3, [pc, #240]	; (8000ed0 <USART3_IRQHandler+0x174>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f003 0320 	and.w	r3, r3, #32
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d103      	bne.n	8000df2 <USART3_IRQHandler+0x96>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	68fa      	ldr	r2, [r7, #12]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	dcf2      	bgt.n	8000dd8 <USART3_IRQHandler+0x7c>
		}
		compteur=0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]
		//mode requete intégrer new_request

		Rx_Msg.ID = USART3->DR;
 8000df6:	4b36      	ldr	r3, [pc, #216]	; (8000ed0 <USART3_IRQHandler+0x174>)
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	4b35      	ldr	r3, [pc, #212]	; (8000ed4 <USART3_IRQHandler+0x178>)
 8000dfe:	701a      	strb	r2, [r3, #0]
		if( Rx_Msg.ID | 0xF > 0 ) //On a besoin de récup des données
		{
			//mode reception message
			while(!(USART3->SR & 0x00000020) && timeout>compteur) //RXNE donnée prete a être lue
 8000e00:	e002      	b.n	8000e08 <USART3_IRQHandler+0xac>
			{
				compteur++;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	3301      	adds	r3, #1
 8000e06:	607b      	str	r3, [r7, #4]
			while(!(USART3->SR & 0x00000020) && timeout>compteur) //RXNE donnée prete a être lue
 8000e08:	4b31      	ldr	r3, [pc, #196]	; (8000ed0 <USART3_IRQHandler+0x174>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f003 0320 	and.w	r3, r3, #32
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d103      	bne.n	8000e1c <USART3_IRQHandler+0xc0>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	68fa      	ldr	r2, [r7, #12]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	dcf2      	bgt.n	8000e02 <USART3_IRQHandler+0xa6>
			}
			compteur=0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	607b      	str	r3, [r7, #4]
			Rx_Msg.length = Rx_Msg.ID | 0xF;
 8000e20:	4b2c      	ldr	r3, [pc, #176]	; (8000ed4 <USART3_IRQHandler+0x178>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	f043 030f 	orr.w	r3, r3, #15
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4b2a      	ldr	r3, [pc, #168]	; (8000ed4 <USART3_IRQHandler+0x178>)
 8000e2c:	705a      	strb	r2, [r3, #1]
			for(int i = 0; i<Rx_Msg.length-1;i++)
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
 8000e32:	e01b      	b.n	8000e6c <USART3_IRQHandler+0x110>
			{
				Rx_Msg.data[i] = USART3->DR;
 8000e34:	4b26      	ldr	r3, [pc, #152]	; (8000ed0 <USART3_IRQHandler+0x174>)
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	b2d9      	uxtb	r1, r3
 8000e3a:	4a26      	ldr	r2, [pc, #152]	; (8000ed4 <USART3_IRQHandler+0x178>)
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	4413      	add	r3, r2
 8000e40:	3302      	adds	r3, #2
 8000e42:	460a      	mov	r2, r1
 8000e44:	701a      	strb	r2, [r3, #0]
				while(!(USART3->SR & 0x00000020) && timeout>compteur) //RXNE donnée prete a être lue
 8000e46:	e002      	b.n	8000e4e <USART3_IRQHandler+0xf2>
				{
					compteur++;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	607b      	str	r3, [r7, #4]
				while(!(USART3->SR & 0x00000020) && timeout>compteur) //RXNE donnée prete a être lue
 8000e4e:	4b20      	ldr	r3, [pc, #128]	; (8000ed0 <USART3_IRQHandler+0x174>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f003 0320 	and.w	r3, r3, #32
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d103      	bne.n	8000e62 <USART3_IRQHandler+0x106>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	68fa      	ldr	r2, [r7, #12]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	dcf2      	bgt.n	8000e48 <USART3_IRQHandler+0xec>
				}
				compteur=0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	607b      	str	r3, [r7, #4]
			for(int i = 0; i<Rx_Msg.length-1;i++)
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <USART3_IRQHandler+0x178>)
 8000e6e:	785b      	ldrb	r3, [r3, #1]
 8000e70:	3b01      	subs	r3, #1
 8000e72:	697a      	ldr	r2, [r7, #20]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	dbdd      	blt.n	8000e34 <USART3_IRQHandler+0xd8>
			}
			checksum1 = USART3->DR;
 8000e78:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <USART3_IRQHandler+0x174>)
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	727b      	strb	r3, [r7, #9]
			calcul=checksum(Rx_Msg.length, Rx_Msg.data);
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <USART3_IRQHandler+0x178>)
 8000e80:	785b      	ldrb	r3, [r3, #1]
 8000e82:	4915      	ldr	r1, [pc, #84]	; (8000ed8 <USART3_IRQHandler+0x17c>)
 8000e84:	4618      	mov	r0, r3
 8000e86:	f000 f8b3 	bl	8000ff0 <checksum>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	723b      	strb	r3, [r7, #8]

			//Si le checksum est mauvais, on flushe toutes les données
			if(checksum1 != calcul)
 8000e8e:	7a7a      	ldrb	r2, [r7, #9]
 8000e90:	7a3b      	ldrb	r3, [r7, #8]
 8000e92:	429a      	cmp	r2, r3
 8000e94:	d00e      	beq.n	8000eb4 <USART3_IRQHandler+0x158>
			{
				for(int i=0;i<10;i++)
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	e008      	b.n	8000eae <USART3_IRQHandler+0x152>
				{
					Rx_Msg.data[i] = 0;
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ed4 <USART3_IRQHandler+0x178>)
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	3302      	adds	r3, #2
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	701a      	strb	r2, [r3, #0]
				for(int i=0;i<10;i++)
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	2b09      	cmp	r3, #9
 8000eb2:	ddf3      	ble.n	8000e9c <USART3_IRQHandler+0x140>
				}
			}
		}
	}

	osSignalSet(LIN_SelectorHandle,SIGNAL_LIN_INTERRUPT);
 8000eb4:	4b09      	ldr	r3, [pc, #36]	; (8000edc <USART3_IRQHandler+0x180>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2101      	movs	r1, #1
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f004 fbd2 	bl	8005664 <osSignalSet>

	//fin de l'interruption
}
 8000ec0:	bf00      	nop
 8000ec2:	3718      	adds	r7, #24
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	000186a0 	.word	0x000186a0
 8000ecc:	200000b4 	.word	0x200000b4
 8000ed0:	40004800 	.word	0x40004800
 8000ed4:	200007ac 	.word	0x200007ac
 8000ed8:	200007ae 	.word	0x200007ae
 8000edc:	200007f8 	.word	0x200007f8

08000ee0 <SendLINMessage>:

/*--- Transmit LIN Message ---*/

void SendLINMessage(LINMSG *data)
  {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	 uint8_t calcul;
	 for(int i = (Tx_Msg.length-1); i>-1; i--)
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <SendLINMessage+0x50>)
 8000eea:	785b      	ldrb	r3, [r3, #1]
 8000eec:	3b01      	subs	r3, #1
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	e00a      	b.n	8000f08 <SendLINMessage+0x28>
	 {
		 UART_PutChar(Tx_Msg.data[i]);
 8000ef2:	4a0f      	ldr	r2, [pc, #60]	; (8000f30 <SendLINMessage+0x50>)
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	3302      	adds	r3, #2
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f000 f857 	bl	8000fb0 <UART_PutChar>
	 for(int i = (Tx_Msg.length-1); i>-1; i--)
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	3b01      	subs	r3, #1
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	daf1      	bge.n	8000ef2 <SendLINMessage+0x12>
	 }
	 calcul=checksum(Tx_Msg.length, Tx_Msg.data);
 8000f0e:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <SendLINMessage+0x50>)
 8000f10:	785b      	ldrb	r3, [r3, #1]
 8000f12:	4908      	ldr	r1, [pc, #32]	; (8000f34 <SendLINMessage+0x54>)
 8000f14:	4618      	mov	r0, r3
 8000f16:	f000 f86b 	bl	8000ff0 <checksum>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	72fb      	strb	r3, [r7, #11]
	 UART_PutChar(calcul);
 8000f1e:	7afb      	ldrb	r3, [r7, #11]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f000 f845 	bl	8000fb0 <UART_PutChar>
  }
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	200007a0 	.word	0x200007a0
 8000f34:	200007a2 	.word	0x200007a2

08000f38 <SendLINRequest>:

/*--- Transmit LIN Request ---*/

void SendLINRequest(LINMSG *msg)
  {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	HAL_NVIC_DisableIRQ(USART3_IRQn);
 8000f40:	2027      	movs	r0, #39	; 0x27
 8000f42:	f001 fff3 	bl	8002f2c <HAL_NVIC_DisableIRQ>
	sync_break();
 8000f46:	f000 f823 	bl	8000f90 <sync_break>
	 //ID
	UART_PutChar(Tx_Msg.ID);
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <SendLINRequest+0x4c>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 f82e 	bl	8000fb0 <UART_PutChar>
	HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f54:	2027      	movs	r0, #39	; 0x27
 8000f56:	f001 ffdb 	bl	8002f10 <HAL_NVIC_EnableIRQ>
	if(Tx_Msg.ID >= 0x24 && new_request) //si adresse > 0x24 alors il s'agit d'envoi maitre data
 8000f5a:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <SendLINRequest+0x4c>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b23      	cmp	r3, #35	; 0x23
 8000f60:	d907      	bls.n	8000f72 <SendLINRequest+0x3a>
 8000f62:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <SendLINRequest+0x50>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <SendLINRequest+0x3a>
	{
		SendLINMessage(&Tx_Msg.data);
 8000f6a:	4808      	ldr	r0, [pc, #32]	; (8000f8c <SendLINRequest+0x54>)
 8000f6c:	f7ff ffb8 	bl	8000ee0 <SendLINMessage>
 8000f70:	e003      	b.n	8000f7a <SendLINRequest+0x42>
	}
	else
	{
		new_request = 0;
 8000f72:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <SendLINRequest+0x50>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
	}
  }
 8000f78:	bf00      	nop
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200007a0 	.word	0x200007a0
 8000f88:	200007c4 	.word	0x200007c4
 8000f8c:	200007a2 	.word	0x200007a2

08000f90 <sync_break>:


/*--- Send sync field +Tdel and break ---*/

void sync_break(void)
  {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
	USART3->CR1 |= 0x00000001;   	//send Breaks
 8000f94:	4b05      	ldr	r3, [pc, #20]	; (8000fac <sync_break+0x1c>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	4a04      	ldr	r2, [pc, #16]	; (8000fac <sync_break+0x1c>)
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	60d3      	str	r3, [r2, #12]
	UART_PutChar(0x55);				//send Syncs
 8000fa0:	2055      	movs	r0, #85	; 0x55
 8000fa2:	f000 f805 	bl	8000fb0 <UART_PutChar>
  }
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40004800 	.word	0x40004800

08000fb0 <UART_PutChar>:

/*--- Transmit char ---*/
 
void UART_PutChar(uint8_t data)
  {
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
		//while(!(USART3->SR & 0x00000020)); 	//attends que registre envoi/reception libre
		USART3->DR = data;				//envoi la donnée
 8000fba:	4a0c      	ldr	r2, [pc, #48]	; (8000fec <UART_PutChar+0x3c>)
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	6053      	str	r3, [r2, #4]
		while(!(USART3->SR & 0x00000080));	// donnee transferee au registre de decalage
 8000fc0:	bf00      	nop
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <UART_PutChar+0x3c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d0f9      	beq.n	8000fc2 <UART_PutChar+0x12>
		while(!(USART3->SR & 0x00000040));	//fin de transmission
 8000fce:	bf00      	nop
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <UART_PutChar+0x3c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d0f9      	beq.n	8000fd0 <UART_PutChar+0x20>
  }
 8000fdc:	bf00      	nop
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	40004800 	.word	0x40004800

08000ff0 <checksum>:
}

/*--- Calculate lin checksum ---*/

uint8_t checksum(uint8_t length, uint8_t *data)
  {
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	6039      	str	r1, [r7, #0]
 8000ffa:	71fb      	strb	r3, [r7, #7]
  uint8_t ix;
  uint16_t check_sum = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	81bb      	strh	r3, [r7, #12]

  for(ix = 0; ix < length-1; ix++)
 8001000:	2300      	movs	r3, #0
 8001002:	73fb      	strb	r3, [r7, #15]
 8001004:	e010      	b.n	8001028 <checksum+0x38>
    {
    check_sum += data[ix];
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	683a      	ldr	r2, [r7, #0]
 800100a:	4413      	add	r3, r2
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	b29a      	uxth	r2, r3
 8001010:	89bb      	ldrh	r3, [r7, #12]
 8001012:	4413      	add	r3, r2
 8001014:	81bb      	strh	r3, [r7, #12]
    if(check_sum >= 256){
 8001016:	89bb      	ldrh	r3, [r7, #12]
 8001018:	2bff      	cmp	r3, #255	; 0xff
 800101a:	d902      	bls.n	8001022 <checksum+0x32>
      check_sum -= 255;
 800101c:	89bb      	ldrh	r3, [r7, #12]
 800101e:	3bff      	subs	r3, #255	; 0xff
 8001020:	81bb      	strh	r3, [r7, #12]
  for(ix = 0; ix < length-1; ix++)
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	3301      	adds	r3, #1
 8001026:	73fb      	strb	r3, [r7, #15]
 8001028:	7bfa      	ldrb	r2, [r7, #15]
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	3b01      	subs	r3, #1
 800102e:	429a      	cmp	r2, r3
 8001030:	dbe9      	blt.n	8001006 <checksum+0x16>
      }
    }

  return (uint8_t)(0xff - check_sum);
 8001032:	89bb      	ldrh	r3, [r7, #12]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	b2db      	uxtb	r3, r3
  }
 800103a:	4618      	mov	r0, r3
 800103c:	3714      	adds	r7, #20
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
	...

08001048 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	4a07      	ldr	r2, [pc, #28]	; (8001074 <vApplicationGetIdleTaskMemory+0x2c>)
 8001058:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	4a06      	ldr	r2, [pc, #24]	; (8001078 <vApplicationGetIdleTaskMemory+0x30>)
 800105e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2280      	movs	r2, #128	; 0x80
 8001064:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001066:	bf00      	nop
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	200000f8 	.word	0x200000f8
 8001078:	2000014c 	.word	0x2000014c

0800107c <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4a07      	ldr	r2, [pc, #28]	; (80010a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800108c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	4a06      	ldr	r2, [pc, #24]	; (80010ac <vApplicationGetTimerTaskMemory+0x30>)
 8001092:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f44f 7280 	mov.w	r2, #256	; 0x100
 800109a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800109c:	bf00      	nop
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	2000034c 	.word	0x2000034c
 80010ac:	200003a0 	.word	0x200003a0

080010b0 <Init_PortB>:

#include "stm32f4xx_hal.h"
#include "lcd_displaytech162.h"

void Init_PortB(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
	  /* Activate Port B and D for LCD Display */
	  SET_BIT(RCC->AHB1ENR,RCC_AHB1ENR_GPIOBEN);
 80010b4:	4b14      	ldr	r3, [pc, #80]	; (8001108 <Init_PortB+0x58>)
 80010b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b8:	4a13      	ldr	r2, [pc, #76]	; (8001108 <Init_PortB+0x58>)
 80010ba:	f043 0302 	orr.w	r3, r3, #2
 80010be:	6313      	str	r3, [r2, #48]	; 0x30
	  /* Setup GPIO 15,14 and 13 to Output (RS, R/W, E) */
	  GPIOB->MODER |= 0x54000000;
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <Init_PortB+0x5c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a11      	ldr	r2, [pc, #68]	; (800110c <Init_PortB+0x5c>)
 80010c6:	f043 43a8 	orr.w	r3, r3, #1409286144	; 0x54000000
 80010ca:	6013      	str	r3, [r2, #0]
	  /* Output in push-pull mode */
	  GPIOB->OTYPER &= 0xFFFF1FFF;
 80010cc:	4b0f      	ldr	r3, [pc, #60]	; (800110c <Init_PortB+0x5c>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	4a0e      	ldr	r2, [pc, #56]	; (800110c <Init_PortB+0x5c>)
 80010d2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80010d6:	6053      	str	r3, [r2, #4]
	  /* Output speed set to High */
	  GPIOB->OSPEEDR |= 0xFC000000;
 80010d8:	4b0c      	ldr	r3, [pc, #48]	; (800110c <Init_PortB+0x5c>)
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	4a0b      	ldr	r2, [pc, #44]	; (800110c <Init_PortB+0x5c>)
 80010de:	f043 437c 	orr.w	r3, r3, #4227858432	; 0xfc000000
 80010e2:	6093      	str	r3, [r2, #8]
	  /* No PU/PD resistor */
	  GPIOB->PUPDR &= 0x03FFFFFF;
 80010e4:	4b09      	ldr	r3, [pc, #36]	; (800110c <Init_PortB+0x5c>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	4a08      	ldr	r2, [pc, #32]	; (800110c <Init_PortB+0x5c>)
 80010ea:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 80010ee:	60d3      	str	r3, [r2, #12]
	  /* Set all to 0 */
	  GPIOB->ODR &= 0xFFFF1FFF;
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <Init_PortB+0x5c>)
 80010f2:	695b      	ldr	r3, [r3, #20]
 80010f4:	4a05      	ldr	r2, [pc, #20]	; (800110c <Init_PortB+0x5c>)
 80010f6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80010fa:	6153      	str	r3, [r2, #20]

}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800
 800110c:	40020400 	.word	0x40020400

08001110 <Init_PortDasRead>:

void Init_PortDasRead(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
	  /* Activate Port D for LCD Display */
	  SET_BIT(RCC->AHB1ENR,RCC_AHB1ENR_GPIODEN);
 8001114:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <Init_PortDasRead+0x34>)
 8001116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001118:	4a0a      	ldr	r2, [pc, #40]	; (8001144 <Init_PortDasRead+0x34>)
 800111a:	f043 0308 	orr.w	r3, r3, #8
 800111e:	6313      	str	r3, [r2, #48]	; 0x30
	  /* Setup GPIO 11,10,9 and 8 to input (b7,b6,b5,b4) */
	  GPIOD->MODER &= 0xFF00FFFF;
 8001120:	4b09      	ldr	r3, [pc, #36]	; (8001148 <Init_PortDasRead+0x38>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a08      	ldr	r2, [pc, #32]	; (8001148 <Init_PortDasRead+0x38>)
 8001126:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800112a:	6013      	str	r3, [r2, #0]
	  /* No PU/PD resistor */
	  GPIOD->PUPDR &= 0xFF00FFFF;
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <Init_PortDasRead+0x38>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	4a05      	ldr	r2, [pc, #20]	; (8001148 <Init_PortDasRead+0x38>)
 8001132:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001136:	60d3      	str	r3, [r2, #12]

}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40023800 	.word	0x40023800
 8001148:	40020c00 	.word	0x40020c00

0800114c <Init_PortDasWrite>:

void Init_PortDasWrite(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
	  /* Activate Port D for LCD Display */
	  SET_BIT(RCC->AHB1ENR,RCC_AHB1ENR_GPIODEN);
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <Init_PortDasWrite+0x4c>)
 8001152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001154:	4a10      	ldr	r2, [pc, #64]	; (8001198 <Init_PortDasWrite+0x4c>)
 8001156:	f043 0308 	orr.w	r3, r3, #8
 800115a:	6313      	str	r3, [r2, #48]	; 0x30
	  /* Setup GPIO 11,10,9 and 8 to Output (b7,b6,b5,b4) */
	  GPIOD->MODER |= 0x00550000;
 800115c:	4b0f      	ldr	r3, [pc, #60]	; (800119c <Init_PortDasWrite+0x50>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a0e      	ldr	r2, [pc, #56]	; (800119c <Init_PortDasWrite+0x50>)
 8001162:	f443 03aa 	orr.w	r3, r3, #5570560	; 0x550000
 8001166:	6013      	str	r3, [r2, #0]
	  /* Output in push-pull mode */
	  GPIOD->OTYPER &= 0xFFFFF0FF;
 8001168:	4b0c      	ldr	r3, [pc, #48]	; (800119c <Init_PortDasWrite+0x50>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	4a0b      	ldr	r2, [pc, #44]	; (800119c <Init_PortDasWrite+0x50>)
 800116e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001172:	6053      	str	r3, [r2, #4]
	  /* Output speed set to High */
	  GPIOD->OSPEEDR |= 0x00FF0000;
 8001174:	4b09      	ldr	r3, [pc, #36]	; (800119c <Init_PortDasWrite+0x50>)
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	4a08      	ldr	r2, [pc, #32]	; (800119c <Init_PortDasWrite+0x50>)
 800117a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800117e:	6093      	str	r3, [r2, #8]
	  /* No PU/PD resistor */
	  GPIOD->PUPDR &= 0xFF00FFFF;
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <Init_PortDasWrite+0x50>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	4a05      	ldr	r2, [pc, #20]	; (800119c <Init_PortDasWrite+0x50>)
 8001186:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800118a:	60d3      	str	r3, [r2, #12]
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	40023800 	.word	0x40023800
 800119c:	40020c00 	.word	0x40020c00

080011a0 <lcd_read_nibble>:

char lcd_read_nibble()
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
	uint32_t data_received;
	Init_PortDasRead();
 80011a6:	f7ff ffb3 	bl	8001110 <Init_PortDasRead>
	Clear_RS;
 80011aa:	4b16      	ldr	r3, [pc, #88]	; (8001204 <lcd_read_nibble+0x64>)
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	4a15      	ldr	r2, [pc, #84]	; (8001204 <lcd_read_nibble+0x64>)
 80011b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011b4:	6193      	str	r3, [r2, #24]
	Set_RW;
 80011b6:	4b13      	ldr	r3, [pc, #76]	; (8001204 <lcd_read_nibble+0x64>)
 80011b8:	699b      	ldr	r3, [r3, #24]
 80011ba:	4a12      	ldr	r2, [pc, #72]	; (8001204 <lcd_read_nibble+0x64>)
 80011bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c0:	6193      	str	r3, [r2, #24]
	HAL_Delay(1);
 80011c2:	2001      	movs	r0, #1
 80011c4:	f001 f82e 	bl	8002224 <HAL_Delay>
	Set_E;
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <lcd_read_nibble+0x64>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	4a0d      	ldr	r2, [pc, #52]	; (8001204 <lcd_read_nibble+0x64>)
 80011ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011d2:	6193      	str	r3, [r2, #24]
	HAL_Delay(1);
 80011d4:	2001      	movs	r0, #1
 80011d6:	f001 f825 	bl	8002224 <HAL_Delay>
	data_received=GPIOD->IDR & 0x00000F00 >> 8;
 80011da:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <lcd_read_nibble+0x68>)
 80011dc:	691b      	ldr	r3, [r3, #16]
 80011de:	f003 030f 	and.w	r3, r3, #15
 80011e2:	607b      	str	r3, [r7, #4]
	Clear_E;
 80011e4:	4b07      	ldr	r3, [pc, #28]	; (8001204 <lcd_read_nibble+0x64>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	4a06      	ldr	r2, [pc, #24]	; (8001204 <lcd_read_nibble+0x64>)
 80011ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80011ee:	6193      	str	r3, [r2, #24]
	HAL_Delay(1);
 80011f0:	2001      	movs	r0, #1
 80011f2:	f001 f817 	bl	8002224 <HAL_Delay>
	return(data_received);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	b2db      	uxtb	r3, r3
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40020400 	.word	0x40020400
 8001208:	40020c00 	.word	0x40020c00

0800120c <lcd_read_byte>:

char lcd_read_byte(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
	char data;
	data =  lcd_read_nibble() <<4;
 8001212:	f7ff ffc5 	bl	80011a0 <lcd_read_nibble>
 8001216:	4603      	mov	r3, r0
 8001218:	011b      	lsls	r3, r3, #4
 800121a:	71fb      	strb	r3, [r7, #7]
	data =  lcd_read_nibble();
 800121c:	f7ff ffc0 	bl	80011a0 <lcd_read_nibble>
 8001220:	4603      	mov	r3, r0
 8001222:	71fb      	strb	r3, [r7, #7]
	return(data);
 8001224:	79fb      	ldrb	r3, [r7, #7]
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <lcd_send_nibble>:

void lcd_send_nibble(char n)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
	Init_PortDasWrite();
 800123a:	f7ff ff87 	bl	800114c <Init_PortDasWrite>
	Clear_RW;
 800123e:	4b1a      	ldr	r3, [pc, #104]	; (80012a8 <lcd_send_nibble+0x78>)
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	4a19      	ldr	r2, [pc, #100]	; (80012a8 <lcd_send_nibble+0x78>)
 8001244:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001248:	6193      	str	r3, [r2, #24]
	Clear_E;
 800124a:	4b17      	ldr	r3, [pc, #92]	; (80012a8 <lcd_send_nibble+0x78>)
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	4a16      	ldr	r2, [pc, #88]	; (80012a8 <lcd_send_nibble+0x78>)
 8001250:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001254:	6193      	str	r3, [r2, #24]
	HAL_Delay(1);
 8001256:	2001      	movs	r0, #1
 8001258:	f000 ffe4 	bl	8002224 <HAL_Delay>
	GPIOD->ODR = GPIOD->ODR & 0xFFFFF0FF;
 800125c:	4b13      	ldr	r3, [pc, #76]	; (80012ac <lcd_send_nibble+0x7c>)
 800125e:	695b      	ldr	r3, [r3, #20]
 8001260:	4a12      	ldr	r2, [pc, #72]	; (80012ac <lcd_send_nibble+0x7c>)
 8001262:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001266:	6153      	str	r3, [r2, #20]
	GPIOD->ODR = GPIOD->ODR | (n & 0x0F) <<8;
 8001268:	4b10      	ldr	r3, [pc, #64]	; (80012ac <lcd_send_nibble+0x7c>)
 800126a:	695a      	ldr	r2, [r3, #20]
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	021b      	lsls	r3, r3, #8
 8001270:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001274:	490d      	ldr	r1, [pc, #52]	; (80012ac <lcd_send_nibble+0x7c>)
 8001276:	4313      	orrs	r3, r2
 8001278:	614b      	str	r3, [r1, #20]
	HAL_Delay(1);
 800127a:	2001      	movs	r0, #1
 800127c:	f000 ffd2 	bl	8002224 <HAL_Delay>
	Set_E;
 8001280:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <lcd_send_nibble+0x78>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	4a08      	ldr	r2, [pc, #32]	; (80012a8 <lcd_send_nibble+0x78>)
 8001286:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800128a:	6193      	str	r3, [r2, #24]
	HAL_Delay(2);
 800128c:	2002      	movs	r0, #2
 800128e:	f000 ffc9 	bl	8002224 <HAL_Delay>
	Clear_E;
 8001292:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <lcd_send_nibble+0x78>)
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	4a04      	ldr	r2, [pc, #16]	; (80012a8 <lcd_send_nibble+0x78>)
 8001298:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800129c:	6193      	str	r3, [r2, #24]
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40020400 	.word	0x40020400
 80012ac:	40020c00 	.word	0x40020c00

080012b0 <lcd_send_byte>:
void lcd_send_byte(char c, char addr)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	460a      	mov	r2, r1
 80012ba:	71fb      	strb	r3, [r7, #7]
 80012bc:	4613      	mov	r3, r2
 80012be:	71bb      	strb	r3, [r7, #6]
	while ( lcd_read_byte() & 0x80 ) ;
 80012c0:	bf00      	nop
 80012c2:	f7ff ffa3 	bl	800120c <lcd_read_byte>
 80012c6:	4603      	mov	r3, r0
 80012c8:	b25b      	sxtb	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	dbf9      	blt.n	80012c2 <lcd_send_byte+0x12>
	if (addr == 1)
 80012ce:	79bb      	ldrb	r3, [r7, #6]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d106      	bne.n	80012e2 <lcd_send_byte+0x32>
	{
		Set_RS;
 80012d4:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <lcd_send_byte+0x60>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	4a0d      	ldr	r2, [pc, #52]	; (8001310 <lcd_send_byte+0x60>)
 80012da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012de:	6193      	str	r3, [r2, #24]
 80012e0:	e005      	b.n	80012ee <lcd_send_byte+0x3e>
	}
	else
	{
		Clear_RS;
 80012e2:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <lcd_send_byte+0x60>)
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	4a0a      	ldr	r2, [pc, #40]	; (8001310 <lcd_send_byte+0x60>)
 80012e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80012ec:	6193      	str	r3, [r2, #24]
	}
	lcd_send_nibble(c>>4);
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	091b      	lsrs	r3, r3, #4
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ff9b 	bl	8001230 <lcd_send_nibble>
	lcd_send_nibble(c & 0x0F);
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	f003 030f 	and.w	r3, r3, #15
 8001300:	b2db      	uxtb	r3, r3
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff ff94 	bl	8001230 <lcd_send_nibble>

}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40020400 	.word	0x40020400

08001314 <lcd_init>:
void lcd_init()
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
	Clear_RS;
 800131a:	4b21      	ldr	r3, [pc, #132]	; (80013a0 <lcd_init+0x8c>)
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	4a20      	ldr	r2, [pc, #128]	; (80013a0 <lcd_init+0x8c>)
 8001320:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001324:	6193      	str	r3, [r2, #24]
	//Wait 2ms
	HAL_Delay(2);
 8001326:	2002      	movs	r0, #2
 8001328:	f000 ff7c 	bl	8002224 <HAL_Delay>
	for(int i=0;i<3;i++)
 800132c:	2300      	movs	r3, #0
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	e008      	b.n	8001344 <lcd_init+0x30>
	{
		// send dummy nibble
		lcd_send_nibble(0x03);
 8001332:	2003      	movs	r0, #3
 8001334:	f7ff ff7c 	bl	8001230 <lcd_send_nibble>
		// wait 5ms
		HAL_Delay(5);
 8001338:	2005      	movs	r0, #5
 800133a:	f000 ff73 	bl	8002224 <HAL_Delay>
	for(int i=0;i<3;i++)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3301      	adds	r3, #1
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b02      	cmp	r3, #2
 8001348:	ddf3      	ble.n	8001332 <lcd_init+0x1e>
	}

	// set 4bits mode, 2 lines, 5*8 cells
	lcd_send_byte(0x38,0);
 800134a:	2100      	movs	r1, #0
 800134c:	2038      	movs	r0, #56	; 0x38
 800134e:	f7ff ffaf 	bl	80012b0 <lcd_send_byte>
	HAL_Delay(5);
 8001352:	2005      	movs	r0, #5
 8001354:	f000 ff66 	bl	8002224 <HAL_Delay>
	// Turn off screen, stop blink
	lcd_send_byte(0x08,0);
 8001358:	2100      	movs	r1, #0
 800135a:	2008      	movs	r0, #8
 800135c:	f7ff ffa8 	bl	80012b0 <lcd_send_byte>
	HAL_Delay(5);
 8001360:	2005      	movs	r0, #5
 8001362:	f000 ff5f 	bl	8002224 <HAL_Delay>
	// Turn on screen, cursor is blinking
	lcd_send_byte(0x0C,0);
 8001366:	2100      	movs	r1, #0
 8001368:	200c      	movs	r0, #12
 800136a:	f7ff ffa1 	bl	80012b0 <lcd_send_byte>
	HAL_Delay(5);
 800136e:	2005      	movs	r0, #5
 8001370:	f000 ff58 	bl	8002224 <HAL_Delay>
	// Reset to initial position
	lcd_send_byte(0x02,0);
 8001374:	2100      	movs	r1, #0
 8001376:	2002      	movs	r0, #2
 8001378:	f7ff ff9a 	bl	80012b0 <lcd_send_byte>
	HAL_Delay(1);
 800137c:	2001      	movs	r0, #1
 800137e:	f000 ff51 	bl	8002224 <HAL_Delay>
	// Left shift for write
	lcd_send_byte(0x6,0);
 8001382:	2100      	movs	r1, #0
 8001384:	2006      	movs	r0, #6
 8001386:	f7ff ff93 	bl	80012b0 <lcd_send_byte>
	HAL_Delay(1);
 800138a:	2001      	movs	r0, #1
 800138c:	f000 ff4a 	bl	8002224 <HAL_Delay>
	// Reset screen
	lcd_send_byte(0x01,0);
 8001390:	2100      	movs	r1, #0
 8001392:	2001      	movs	r0, #1
 8001394:	f7ff ff8c 	bl	80012b0 <lcd_send_byte>
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40020400 	.word	0x40020400

080013a4 <lcd_gotoxy>:

void lcd_gotoxy(int x, int y)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
   int address;

   if(y==2) address=0x40;
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d102      	bne.n	80013ba <lcd_gotoxy+0x16>
 80013b4:	2340      	movs	r3, #64	; 0x40
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	e001      	b.n	80013be <lcd_gotoxy+0x1a>
   else address=0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]

   address+=x-1;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	3b01      	subs	r3, #1
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	4413      	add	r3, r2
 80013c6:	60fb      	str	r3, [r7, #12]
   lcd_send_byte(0x80|address,0);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	b25b      	sxtb	r3, r3
 80013cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013d0:	b25b      	sxtb	r3, r3
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	2100      	movs	r1, #0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff ff6a 	bl	80012b0 <lcd_send_byte>
}
 80013dc:	bf00      	nop
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <lcd_putc>:

void lcd_putc(char c)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
	lcd_send_byte(c,1);
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	2101      	movs	r1, #1
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff ff5c 	bl	80012b0 <lcd_send_byte>
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <lcd_puts>:

void lcd_puts(char line, char *str)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	6039      	str	r1, [r7, #0]
 800140a:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	73fb      	strb	r3, [r7, #15]

    if (line == 1) lcd_gotoxy(1, 1);
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d104      	bne.n	8001420 <lcd_puts+0x20>
 8001416:	2101      	movs	r1, #1
 8001418:	2001      	movs	r0, #1
 800141a:	f7ff ffc3 	bl	80013a4 <lcd_gotoxy>
 800141e:	e00e      	b.n	800143e <lcd_puts+0x3e>
    else if (line == 2) lcd_gotoxy(1, 2);
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	2b02      	cmp	r3, #2
 8001424:	d10b      	bne.n	800143e <lcd_puts+0x3e>
 8001426:	2102      	movs	r1, #2
 8001428:	2001      	movs	r0, #1
 800142a:	f7ff ffbb 	bl	80013a4 <lcd_gotoxy>

    while(*str && (i++ < 16))
 800142e:	e006      	b.n	800143e <lcd_puts+0x3e>
    {
	lcd_putc(*str++);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	1c5a      	adds	r2, r3, #1
 8001434:	603a      	str	r2, [r7, #0]
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ffd3 	bl	80013e4 <lcd_putc>
    while(*str && (i++ < 16))
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d004      	beq.n	8001450 <lcd_puts+0x50>
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	1c5a      	adds	r2, r3, #1
 800144a:	73fa      	strb	r2, [r7, #15]
 800144c:	2b0f      	cmp	r3, #15
 800144e:	d9ef      	bls.n	8001430 <lcd_puts+0x30>
    }
}
 8001450:	bf00      	nop
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001458:	b5b0      	push	{r4, r5, r7, lr}
 800145a:	b0cc      	sub	sp, #304	; 0x130
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800145e:	f000 fe9f 	bl	80021a0 <HAL_Init>

  /* USER CODE BEGIN Init */
	UART_Init();
 8001462:	f7ff fbff 	bl	8000c64 <UART_Init>
	SendLINRequest(&Tx_Msg);
 8001466:	487f      	ldr	r0, [pc, #508]	; (8001664 <main+0x20c>)
 8001468:	f7ff fd66 	bl	8000f38 <SendLINRequest>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800146c:	f000 f930 	bl	80016d0 <SystemClock_Config>

  //Supprimer MX_USART3_Init
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001470:	f000 f99a 	bl	80017a8 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001474:	f7ff fa5a 	bl	800092c <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  clock_Init();
 8001478:	f000 fbc4 	bl	8001c04 <clock_Init>

  //MX_CAN1_Init();

  Init_PortB();
 800147c:	f7ff fe18 	bl	80010b0 <Init_PortB>
  lcd_init();
 8001480:	f7ff ff48 	bl	8001314 <lcd_init>
  lcd_puts(1, "Initialisation");
 8001484:	4978      	ldr	r1, [pc, #480]	; (8001668 <main+0x210>)
 8001486:	2001      	movs	r0, #1
 8001488:	f7ff ffba 	bl	8001400 <lcd_puts>

  HAL_CAN_Start(&hcan1);
 800148c:	4877      	ldr	r0, [pc, #476]	; (800166c <main+0x214>)
 800148e:	f001 f8c9 	bl	8002624 <HAL_CAN_Start>

  LED_Blink(3);
 8001492:	2003      	movs	r0, #3
 8001494:	f7ff fb0e 	bl	8000ab4 <LED_Blink>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of TimerClock */
  osTimerDef(TimerClock, CBClock);
 8001498:	4b75      	ldr	r3, [pc, #468]	; (8001670 <main+0x218>)
 800149a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800149e:	2300      	movs	r3, #0
 80014a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  TimerClockHandle = osTimerCreate(osTimer(TimerClock), osTimerPeriodic, NULL);
 80014a4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80014a8:	2200      	movs	r2, #0
 80014aa:	2101      	movs	r1, #1
 80014ac:	4618      	mov	r0, r3
 80014ae:	f004 f8a5 	bl	80055fc <osTimerCreate>
 80014b2:	4603      	mov	r3, r0
 80014b4:	4a6f      	ldr	r2, [pc, #444]	; (8001674 <main+0x21c>)
 80014b6:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones,   .. */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of Queue_CAN_Interrupt */
  osMessageQDef(Queue_CAN_Interrupt, 128, uint8_t);
 80014b8:	4b6f      	ldr	r3, [pc, #444]	; (8001678 <main+0x220>)
 80014ba:	f507 748c 	add.w	r4, r7, #280	; 0x118
 80014be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Queue_CAN_InterruptHandle = osMessageCreate(osMessageQ(Queue_CAN_Interrupt), NULL);
 80014c4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80014c8:	2100      	movs	r1, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f004 f956 	bl	800577c <osMessageCreate>
 80014d0:	4603      	mov	r3, r0
 80014d2:	4a6a      	ldr	r2, [pc, #424]	; (800167c <main+0x224>)
 80014d4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of UpdateExtClock */
  osThreadDef(UpdateExtClock, CallUpdateExtClock, osPriorityBelowNormal , 0, 128);
 80014d6:	4b6a      	ldr	r3, [pc, #424]	; (8001680 <main+0x228>)
 80014d8:	f107 04fc 	add.w	r4, r7, #252	; 0xfc
 80014dc:	461d      	mov	r5, r3
 80014de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UpdateExtClockHandle = osThreadCreate(osThread(UpdateExtClock), NULL);
 80014ea:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80014ee:	2100      	movs	r1, #0
 80014f0:	4618      	mov	r0, r3
 80014f2:	f004 f822 	bl	800553a <osThreadCreate>
 80014f6:	4603      	mov	r3, r0
 80014f8:	4a62      	ldr	r2, [pc, #392]	; (8001684 <main+0x22c>)
 80014fa:	6013      	str	r3, [r2, #0]

  /* definition and creation of UpdateOwnClock */
  osThreadDef(UpdateOwnClock, CallUpdateOwnClock, osPriorityNormal , 0, 128);
 80014fc:	4b62      	ldr	r3, [pc, #392]	; (8001688 <main+0x230>)
 80014fe:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 8001502:	461d      	mov	r5, r3
 8001504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001508:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800150c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UpdateOwnClockHandle = osThreadCreate(osThread(UpdateOwnClock), NULL);
 8001510:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f004 f80f 	bl	800553a <osThreadCreate>
 800151c:	4603      	mov	r3, r0
 800151e:	4a5b      	ldr	r2, [pc, #364]	; (800168c <main+0x234>)
 8001520:	6013      	str	r3, [r2, #0]

  /* definition and creation of LIN_Selector */
  osThreadDef(LIN_Selector, StartTask_LIN_Selector, osPriorityAboveNormal, 0, 128);
 8001522:	4b5b      	ldr	r3, [pc, #364]	; (8001690 <main+0x238>)
 8001524:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 8001528:	461d      	mov	r5, r3
 800152a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800152c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800152e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001532:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LIN_SelectorHandle = osThreadCreate(osThread(LIN_Selector), NULL);
 8001536:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800153a:	2100      	movs	r1, #0
 800153c:	4618      	mov	r0, r3
 800153e:	f003 fffc 	bl	800553a <osThreadCreate>
 8001542:	4603      	mov	r3, r0
 8001544:	4a53      	ldr	r2, [pc, #332]	; (8001694 <main+0x23c>)
 8001546:	6013      	str	r3, [r2, #0]

  /* definition and creation of Op_RTCtoLIN */
  osThreadDef(Op_RTCtoLIN, StartOp_RTCtoLIN, osPriorityNormal, 0, 128);
 8001548:	4b53      	ldr	r3, [pc, #332]	; (8001698 <main+0x240>)
 800154a:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 800154e:	461d      	mov	r5, r3
 8001550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001554:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001558:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Op_RTCtoLINHandle = osThreadCreate(osThread(Op_RTCtoLIN), NULL);
 800155c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001560:	2100      	movs	r1, #0
 8001562:	4618      	mov	r0, r3
 8001564:	f003 ffe9 	bl	800553a <osThreadCreate>
 8001568:	4603      	mov	r3, r0
 800156a:	4a4c      	ldr	r2, [pc, #304]	; (800169c <main+0x244>)
 800156c:	6013      	str	r3, [r2, #0]

  /* definition and creation of Op_LINtoRTC */
  osThreadDef(Op_LINtoRTC, StartOp_LINtoRTC, osPriorityBelowNormal, 0, 128);
 800156e:	4b4c      	ldr	r3, [pc, #304]	; (80016a0 <main+0x248>)
 8001570:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8001574:	461d      	mov	r5, r3
 8001576:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001578:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800157a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800157e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Op_LINtoRTCHandle = osThreadCreate(osThread(Op_LINtoRTC), NULL);
 8001582:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001586:	2100      	movs	r1, #0
 8001588:	4618      	mov	r0, r3
 800158a:	f003 ffd6 	bl	800553a <osThreadCreate>
 800158e:	4603      	mov	r3, r0
 8001590:	4a44      	ldr	r2, [pc, #272]	; (80016a4 <main+0x24c>)
 8001592:	6013      	str	r3, [r2, #0]

  /* definition and creation of Op_LINtoCAN */
  osThreadDef(Op_LINtoCAN, StartTaskOp_LINtoCAN, osPriorityAboveNormal, 0, 128);
 8001594:	4b44      	ldr	r3, [pc, #272]	; (80016a8 <main+0x250>)
 8001596:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800159a:	461d      	mov	r5, r3
 800159c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800159e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Op_LINtoCANHandle = osThreadCreate(osThread(Op_LINtoCAN), NULL);
 80015a8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80015ac:	2100      	movs	r1, #0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f003 ffc3 	bl	800553a <osThreadCreate>
 80015b4:	4603      	mov	r3, r0
 80015b6:	4a3d      	ldr	r2, [pc, #244]	; (80016ac <main+0x254>)
 80015b8:	6013      	str	r3, [r2, #0]

  /* definition and creation of Op_LEDtoLIN */
  osThreadDef(Op_LEDtoLIN, StartTaskOp_LEDtoLIN, osPriorityBelowNormal, 0, 128);
 80015ba:	4b3d      	ldr	r3, [pc, #244]	; (80016b0 <main+0x258>)
 80015bc:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80015c0:	461d      	mov	r5, r3
 80015c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Op_LEDtoLINHandle = osThreadCreate(osThread(Op_LEDtoLIN), NULL);
 80015ce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015d2:	2100      	movs	r1, #0
 80015d4:	4618      	mov	r0, r3
 80015d6:	f003 ffb0 	bl	800553a <osThreadCreate>
 80015da:	4603      	mov	r3, r0
 80015dc:	4a35      	ldr	r2, [pc, #212]	; (80016b4 <main+0x25c>)
 80015de:	6013      	str	r3, [r2, #0]

  /* definition and creation of Op_CANtoLIN */
  osThreadDef(Op_CANtoLIN, StartTask_Op_CANtoLIN, osPriorityNormal, 0, 128);
 80015e0:	4b35      	ldr	r3, [pc, #212]	; (80016b8 <main+0x260>)
 80015e2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80015e6:	461d      	mov	r5, r3
 80015e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Op_CANtoLINHandle = osThreadCreate(osThread(Op_CANtoLIN), NULL);
 80015f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015f8:	2100      	movs	r1, #0
 80015fa:	4618      	mov	r0, r3
 80015fc:	f003 ff9d 	bl	800553a <osThreadCreate>
 8001600:	4603      	mov	r3, r0
 8001602:	4a2e      	ldr	r2, [pc, #184]	; (80016bc <main+0x264>)
 8001604:	6013      	str	r3, [r2, #0]

  /* definition and creation of IDLE */
  osThreadDef(IDLE, StartTaskIDLE, osPriorityIdle, 0, 128);
 8001606:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800160a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800160e:	4a2c      	ldr	r2, [pc, #176]	; (80016c0 <main+0x268>)
 8001610:	461c      	mov	r4, r3
 8001612:	4615      	mov	r5, r2
 8001614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001618:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800161c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IDLEHandle = osThreadCreate(osThread(IDLE), NULL);
 8001620:	f107 031c 	add.w	r3, r7, #28
 8001624:	2100      	movs	r1, #0
 8001626:	4618      	mov	r0, r3
 8001628:	f003 ff87 	bl	800553a <osThreadCreate>
 800162c:	4603      	mov	r3, r0
 800162e:	4a25      	ldr	r2, [pc, #148]	; (80016c4 <main+0x26c>)
 8001630:	6013      	str	r3, [r2, #0]

  /* definition and creation of Op_LINtoLED */
  osThreadDef(Op_LINtoLED, StartTask_Op_LINtoLED, osPriorityLow, 0, 128);
 8001632:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001636:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800163a:	4a23      	ldr	r2, [pc, #140]	; (80016c8 <main+0x270>)
 800163c:	461c      	mov	r4, r3
 800163e:	4615      	mov	r5, r2
 8001640:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001644:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001648:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Op_LINtoLEDHandle = osThreadCreate(osThread(Op_LINtoLED), NULL);
 800164c:	463b      	mov	r3, r7
 800164e:	2100      	movs	r1, #0
 8001650:	4618      	mov	r0, r3
 8001652:	f003 ff72 	bl	800553a <osThreadCreate>
 8001656:	4603      	mov	r3, r0
 8001658:	4a1c      	ldr	r2, [pc, #112]	; (80016cc <main+0x274>)
 800165a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800165c:	f003 ff66 	bl	800552c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while(1){
 8001660:	e7fe      	b.n	8001660 <main+0x208>
 8001662:	bf00      	nop
 8001664:	200007a0 	.word	0x200007a0
 8001668:	080090c4 	.word	0x080090c4
 800166c:	200007c8 	.word	0x200007c8
 8001670:	08001bbd 	.word	0x08001bbd
 8001674:	2000081c 	.word	0x2000081c
 8001678:	080090d4 	.word	0x080090d4
 800167c:	20000818 	.word	0x20000818
 8001680:	080090e4 	.word	0x080090e4
 8001684:	200007f0 	.word	0x200007f0
 8001688:	08009100 	.word	0x08009100
 800168c:	200007f4 	.word	0x200007f4
 8001690:	0800911c 	.word	0x0800911c
 8001694:	200007f8 	.word	0x200007f8
 8001698:	08009138 	.word	0x08009138
 800169c:	200007fc 	.word	0x200007fc
 80016a0:	08009154 	.word	0x08009154
 80016a4:	20000800 	.word	0x20000800
 80016a8:	08009170 	.word	0x08009170
 80016ac:	20000804 	.word	0x20000804
 80016b0:	0800918c 	.word	0x0800918c
 80016b4:	20000808 	.word	0x20000808
 80016b8:	080091a8 	.word	0x080091a8
 80016bc:	2000080c 	.word	0x2000080c
 80016c0:	080091c4 	.word	0x080091c4
 80016c4:	20000810 	.word	0x20000810
 80016c8:	080091e0 	.word	0x080091e0
 80016cc:	20000814 	.word	0x20000814

080016d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b094      	sub	sp, #80	; 0x50
 80016d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016d6:	f107 0320 	add.w	r3, r7, #32
 80016da:	2230      	movs	r2, #48	; 0x30
 80016dc:	2100      	movs	r1, #0
 80016de:	4618      	mov	r0, r3
 80016e0:	f007 f83c 	bl	800875c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e4:	f107 030c 	add.w	r3, r7, #12
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f4:	2300      	movs	r3, #0
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	4b29      	ldr	r3, [pc, #164]	; (80017a0 <SystemClock_Config+0xd0>)
 80016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fc:	4a28      	ldr	r2, [pc, #160]	; (80017a0 <SystemClock_Config+0xd0>)
 80016fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001702:	6413      	str	r3, [r2, #64]	; 0x40
 8001704:	4b26      	ldr	r3, [pc, #152]	; (80017a0 <SystemClock_Config+0xd0>)
 8001706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001710:	2300      	movs	r3, #0
 8001712:	607b      	str	r3, [r7, #4]
 8001714:	4b23      	ldr	r3, [pc, #140]	; (80017a4 <SystemClock_Config+0xd4>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a22      	ldr	r2, [pc, #136]	; (80017a4 <SystemClock_Config+0xd4>)
 800171a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800171e:	6013      	str	r3, [r2, #0]
 8001720:	4b20      	ldr	r3, [pc, #128]	; (80017a4 <SystemClock_Config+0xd4>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001728:	607b      	str	r3, [r7, #4]
 800172a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800172c:	2309      	movs	r3, #9
 800172e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001730:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001736:	2301      	movs	r3, #1
 8001738:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800173a:	2302      	movs	r3, #2
 800173c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800173e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001742:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001744:	2308      	movs	r3, #8
 8001746:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001748:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800174c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800174e:	2302      	movs	r3, #2
 8001750:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001752:	2307      	movs	r3, #7
 8001754:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001756:	f107 0320 	add.w	r3, r7, #32
 800175a:	4618      	mov	r0, r3
 800175c:	f001 fe3c 	bl	80033d8 <HAL_RCC_OscConfig>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001766:	f000 fa45 	bl	8001bf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800176a:	230f      	movs	r3, #15
 800176c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800176e:	2302      	movs	r3, #2
 8001770:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001776:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800177a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800177c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001780:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001782:	f107 030c 	add.w	r3, r7, #12
 8001786:	2105      	movs	r1, #5
 8001788:	4618      	mov	r0, r3
 800178a:	f002 f89d 	bl	80038c8 <HAL_RCC_ClockConfig>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001794:	f000 fa2e 	bl	8001bf4 <Error_Handler>
  }
}
 8001798:	bf00      	nop
 800179a:	3750      	adds	r7, #80	; 0x50
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40007000 	.word	0x40007000

080017a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	; 0x28
 80017ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ae:	f107 0314 	add.w	r3, r7, #20
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	60da      	str	r2, [r3, #12]
 80017bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	4b2d      	ldr	r3, [pc, #180]	; (8001878 <MX_GPIO_Init+0xd0>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a2c      	ldr	r2, [pc, #176]	; (8001878 <MX_GPIO_Init+0xd0>)
 80017c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b2a      	ldr	r3, [pc, #168]	; (8001878 <MX_GPIO_Init+0xd0>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	4b26      	ldr	r3, [pc, #152]	; (8001878 <MX_GPIO_Init+0xd0>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a25      	ldr	r2, [pc, #148]	; (8001878 <MX_GPIO_Init+0xd0>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b23      	ldr	r3, [pc, #140]	; (8001878 <MX_GPIO_Init+0xd0>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	4b1f      	ldr	r3, [pc, #124]	; (8001878 <MX_GPIO_Init+0xd0>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a1e      	ldr	r2, [pc, #120]	; (8001878 <MX_GPIO_Init+0xd0>)
 8001800:	f043 0302 	orr.w	r3, r3, #2
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b1c      	ldr	r3, [pc, #112]	; (8001878 <MX_GPIO_Init+0xd0>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	4b18      	ldr	r3, [pc, #96]	; (8001878 <MX_GPIO_Init+0xd0>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a17      	ldr	r2, [pc, #92]	; (8001878 <MX_GPIO_Init+0xd0>)
 800181c:	f043 0308 	orr.w	r3, r3, #8
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b15      	ldr	r3, [pc, #84]	; (8001878 <MX_GPIO_Init+0xd0>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0308 	and.w	r3, r3, #8
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 800182e:	2200      	movs	r2, #0
 8001830:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001834:	4811      	ldr	r0, [pc, #68]	; (800187c <MX_GPIO_Init+0xd4>)
 8001836:	f001 fdb5 	bl	80033a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
 800183a:	2301      	movs	r3, #1
 800183c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800183e:	2300      	movs	r3, #0
 8001840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	4619      	mov	r1, r3
 800184c:	480c      	ldr	r0, [pc, #48]	; (8001880 <MX_GPIO_Init+0xd8>)
 800184e:	f001 fc0d 	bl	800306c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 8001852:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001858:	2301      	movs	r3, #1
 800185a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001860:	2300      	movs	r3, #0
 8001862:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	4619      	mov	r1, r3
 800186a:	4804      	ldr	r0, [pc, #16]	; (800187c <MX_GPIO_Init+0xd4>)
 800186c:	f001 fbfe 	bl	800306c <HAL_GPIO_Init>

}
 8001870:	bf00      	nop
 8001872:	3728      	adds	r7, #40	; 0x28
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40023800 	.word	0x40023800
 800187c:	40020c00 	.word	0x40020c00
 8001880:	40020000 	.word	0x40020000

08001884 <CallUpdateExtClock>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_CallUpdateExtClock */
void CallUpdateExtClock(void const * argument)	//Envoi requete RTC par LIN
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  Tx_Msg.length = 0;
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <CallUpdateExtClock+0x24>)
 800188e:	2200      	movs	r2, #0
 8001890:	705a      	strb	r2, [r3, #1]
	  Tx_Msg.ID = 0x90;
 8001892:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <CallUpdateExtClock+0x24>)
 8001894:	2290      	movs	r2, #144	; 0x90
 8001896:	701a      	strb	r2, [r3, #0]
	  SendLINMessage(&Tx_Msg);
 8001898:	4803      	ldr	r0, [pc, #12]	; (80018a8 <CallUpdateExtClock+0x24>)
 800189a:	f7ff fb21 	bl	8000ee0 <SendLINMessage>
      osDelay(500);
 800189e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018a2:	f003 fe96 	bl	80055d2 <osDelay>
	  Tx_Msg.length = 0;
 80018a6:	e7f1      	b.n	800188c <CallUpdateExtClock+0x8>
 80018a8:	200007a0 	.word	0x200007a0

080018ac <CallUpdateOwnClock>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CallUpdateOwnClock */
void CallUpdateOwnClock(void const * argument)	//RTC to LCD
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08c      	sub	sp, #48	; 0x30
 80018b0:	af02      	add	r7, sp, #8
 80018b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallUpdateOwnClock */
	Time Data;
  /* Infinite loop */
  for(;;)
  {
    getCurrentTime(&Data);
 80018b4:	f107 031c 	add.w	r3, r7, #28
 80018b8:	4618      	mov	r0, r3
 80018ba:	f000 f9b7 	bl	8001c2c <getCurrentTime>
    char chaine[20] = "";
 80018be:	2300      	movs	r3, #0
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	f107 030c 	add.w	r3, r7, #12
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	60da      	str	r2, [r3, #12]
    sprintf("Ext : %d:%d %d", chaine, Data.hou.BIN,Data.min.BIN,Data.sec.BIN);
 80018d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80018d4:	461a      	mov	r2, r3
 80018d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018da:	4618      	mov	r0, r3
 80018dc:	7f7b      	ldrb	r3, [r7, #29]
 80018de:	f107 0108 	add.w	r1, r7, #8
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	4603      	mov	r3, r0
 80018e6:	4804      	ldr	r0, [pc, #16]	; (80018f8 <CallUpdateOwnClock+0x4c>)
 80018e8:	f006 ff40 	bl	800876c <siprintf>
   // lcd_puts(2, chaine);
    HAL_Delay(1000);
 80018ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018f0:	f000 fc98 	bl	8002224 <HAL_Delay>
  {
 80018f4:	e7de      	b.n	80018b4 <CallUpdateOwnClock+0x8>
 80018f6:	bf00      	nop
 80018f8:	080091fc 	.word	0x080091fc

080018fc <StartTask_LIN_Selector>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_LIN_Selector */
void StartTask_LIN_Selector(void const * argument)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08a      	sub	sp, #40	; 0x28
 8001900:	af00      	add	r7, sp, #0
 8001902:	6178      	str	r0, [r7, #20]
	/* USER CODE BEGIN StartTask_LIN_Selector */
	/* Infinite loop */
	for(;;)
	{
		osSignalWait(SIGNAL_LIN_INTERRUPT,osWaitForever);
 8001904:	463b      	mov	r3, r7
 8001906:	f04f 32ff 	mov.w	r2, #4294967295
 800190a:	2101      	movs	r1, #1
 800190c:	4618      	mov	r0, r3
 800190e:	f003 fee9 	bl	80056e4 <osSignalWait>
		Rx_Msg.ID >>= 4;
 8001912:	4b27      	ldr	r3, [pc, #156]	; (80019b0 <StartTask_LIN_Selector+0xb4>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	091b      	lsrs	r3, r3, #4
 8001918:	b2da      	uxtb	r2, r3
 800191a:	4b25      	ldr	r3, [pc, #148]	; (80019b0 <StartTask_LIN_Selector+0xb4>)
 800191c:	701a      	strb	r2, [r3, #0]
		char mode = Rx_Msg.ID>>3;
 800191e:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <StartTask_LIN_Selector+0xb4>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	08db      	lsrs	r3, r3, #3
 8001924:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		//Sinon ID = ID >> 4;

		switch (Rx_Msg.ID & 0b111){
 8001928:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <StartTask_LIN_Selector+0xb4>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	2b04      	cmp	r3, #4
 8001932:	d035      	beq.n	80019a0 <StartTask_LIN_Selector+0xa4>
 8001934:	2b04      	cmp	r3, #4
 8001936:	dce5      	bgt.n	8001904 <StartTask_LIN_Selector+0x8>
 8001938:	2b01      	cmp	r3, #1
 800193a:	d002      	beq.n	8001942 <StartTask_LIN_Selector+0x46>
 800193c:	2b02      	cmp	r3, #2
 800193e:	d01d      	beq.n	800197c <StartTask_LIN_Selector+0x80>
 8001940:	e035      	b.n	80019ae <StartTask_LIN_Selector+0xb2>
		case LIN_ID_RTC :
			//RTC
			if (mode){
 8001942:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001946:	2b00      	cmp	r3, #0
 8001948:	d006      	beq.n	8001958 <StartTask_LIN_Selector+0x5c>
				osSignalSet(Op_RTCtoLINHandle,SIGNAL_RTC_TO_LIN);	 //RTC to LIN Task
 800194a:	4b1a      	ldr	r3, [pc, #104]	; (80019b4 <StartTask_LIN_Selector+0xb8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2101      	movs	r1, #1
 8001950:	4618      	mov	r0, r3
 8001952:	f003 fe87 	bl	8005664 <osSignalSet>
				LINTime.hou.BIN = Tx_Msg.data[0];
				LINTime.min.BIN = Tx_Msg.data[1];
				LINTime.sec.BIN = Tx_Msg.data[2];
				osSignalSet(Op_LINtoRTCHandle,SIGNAL_LIN_TO_RTC);	 //LIN to RTC Task
			}
			break;
 8001956:	e02a      	b.n	80019ae <StartTask_LIN_Selector+0xb2>
				LINTime.hou.BIN = Tx_Msg.data[0];
 8001958:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <StartTask_LIN_Selector+0xbc>)
 800195a:	789b      	ldrb	r3, [r3, #2]
 800195c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				LINTime.min.BIN = Tx_Msg.data[1];
 8001960:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <StartTask_LIN_Selector+0xbc>)
 8001962:	78db      	ldrb	r3, [r3, #3]
 8001964:	f887 3020 	strb.w	r3, [r7, #32]
				LINTime.sec.BIN = Tx_Msg.data[2];
 8001968:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <StartTask_LIN_Selector+0xbc>)
 800196a:	791b      	ldrb	r3, [r3, #4]
 800196c:	777b      	strb	r3, [r7, #29]
				osSignalSet(Op_LINtoRTCHandle,SIGNAL_LIN_TO_RTC);	 //LIN to RTC Task
 800196e:	4b13      	ldr	r3, [pc, #76]	; (80019bc <StartTask_LIN_Selector+0xc0>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2101      	movs	r1, #1
 8001974:	4618      	mov	r0, r3
 8001976:	f003 fe75 	bl	8005664 <osSignalSet>
			break;
 800197a:	e018      	b.n	80019ae <StartTask_LIN_Selector+0xb2>
		case LIN_ID_LED :
			//LED
			if (mode){
 800197c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001980:	2b00      	cmp	r3, #0
 8001982:	d006      	beq.n	8001992 <StartTask_LIN_Selector+0x96>
				osSignalSet(Op_LEDtoLINHandle,SIGNAL_LED_TO_LIN);	 //LED to LIN Task
 8001984:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <StartTask_LIN_Selector+0xc4>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2101      	movs	r1, #1
 800198a:	4618      	mov	r0, r3
 800198c:	f003 fe6a 	bl	8005664 <osSignalSet>
			}
			else{
				osSignalSet(Op_LINtoLEDHandle,SIGNAL_LIN_TO_LED);	 //RTC to LIN Task
			}
			break;
 8001990:	e00d      	b.n	80019ae <StartTask_LIN_Selector+0xb2>
				osSignalSet(Op_LINtoLEDHandle,SIGNAL_LIN_TO_LED);	 //RTC to LIN Task
 8001992:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <StartTask_LIN_Selector+0xc8>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2101      	movs	r1, #1
 8001998:	4618      	mov	r0, r3
 800199a:	f003 fe63 	bl	8005664 <osSignalSet>
			break;
 800199e:	e006      	b.n	80019ae <StartTask_LIN_Selector+0xb2>
		case LIN_ID_CAN :
			//CAN
			osSignalSet(Op_LINtoCANHandle,SIGNAL_LIN_TO_CAN);	 //RTC to LIN Task
 80019a0:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <StartTask_LIN_Selector+0xcc>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2101      	movs	r1, #1
 80019a6:	4618      	mov	r0, r3
 80019a8:	f003 fe5c 	bl	8005664 <osSignalSet>
			break;
 80019ac:	bf00      	nop
	{
 80019ae:	e7a9      	b.n	8001904 <StartTask_LIN_Selector+0x8>
 80019b0:	200007ac 	.word	0x200007ac
 80019b4:	200007fc 	.word	0x200007fc
 80019b8:	200007a0 	.word	0x200007a0
 80019bc:	20000800 	.word	0x20000800
 80019c0:	20000808 	.word	0x20000808
 80019c4:	20000814 	.word	0x20000814
 80019c8:	20000804 	.word	0x20000804

080019cc <StartOp_RTCtoLIN>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOp_RTCtoLIN */
void StartOp_RTCtoLIN(void const * argument)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartOp_RTCtoLIN */
  /* Infinite loop */
  for(;;)
  {
	  osSignalWait(SIGNAL_RTC_TO_LIN,osWaitForever);
 80019d4:	463b      	mov	r3, r7
 80019d6:	f04f 32ff 	mov.w	r2, #4294967295
 80019da:	2101      	movs	r1, #1
 80019dc:	4618      	mov	r0, r3
 80019de:	f003 fe81 	bl	80056e4 <osSignalWait>

	  	getCurrentTime(&RTCget);
 80019e2:	480e      	ldr	r0, [pc, #56]	; (8001a1c <StartOp_RTCtoLIN+0x50>)
 80019e4:	f000 f922 	bl	8001c2c <getCurrentTime>

	  	Tx_Msg.data[0] = RTCget.hou.BIN;
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <StartOp_RTCtoLIN+0x50>)
 80019ea:	79da      	ldrb	r2, [r3, #7]
 80019ec:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <StartOp_RTCtoLIN+0x54>)
 80019ee:	709a      	strb	r2, [r3, #2]
	  	Tx_Msg.data[1] = RTCget.min.BIN;
 80019f0:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <StartOp_RTCtoLIN+0x50>)
 80019f2:	791a      	ldrb	r2, [r3, #4]
 80019f4:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <StartOp_RTCtoLIN+0x54>)
 80019f6:	70da      	strb	r2, [r3, #3]
	  	Tx_Msg.data[2] = RTCget.sec.BIN;
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <StartOp_RTCtoLIN+0x50>)
 80019fa:	785a      	ldrb	r2, [r3, #1]
 80019fc:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <StartOp_RTCtoLIN+0x54>)
 80019fe:	711a      	strb	r2, [r3, #4]
	  	Tx_Msg.length = 3;
 8001a00:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <StartOp_RTCtoLIN+0x54>)
 8001a02:	2203      	movs	r2, #3
 8001a04:	705a      	strb	r2, [r3, #1]
	  	Tx_Msg.ID = LIN_ID(LIN_MODE_DATA, LIN_ID_RTC, Tx_Msg.length);
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <StartOp_RTCtoLIN+0x54>)
 8001a08:	785b      	ldrb	r3, [r3, #1]
 8001a0a:	f043 0310 	orr.w	r3, r3, #16
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	4b03      	ldr	r3, [pc, #12]	; (8001a20 <StartOp_RTCtoLIN+0x54>)
 8001a12:	701a      	strb	r2, [r3, #0]
	  	SendLINMessage(&Tx_Msg);
 8001a14:	4802      	ldr	r0, [pc, #8]	; (8001a20 <StartOp_RTCtoLIN+0x54>)
 8001a16:	f7ff fa63 	bl	8000ee0 <SendLINMessage>
	  osSignalWait(SIGNAL_RTC_TO_LIN,osWaitForever);
 8001a1a:	e7db      	b.n	80019d4 <StartOp_RTCtoLIN+0x8>
 8001a1c:	200007b8 	.word	0x200007b8
 8001a20:	200007a0 	.word	0x200007a0

08001a24 <StartOp_LINtoRTC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOp_LINtoRTC */
void StartOp_LINtoRTC(void const * argument)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b090      	sub	sp, #64	; 0x40
 8001a28:	af02      	add	r7, sp, #8
 8001a2a:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartOp_LINtoRTC */
	Time Data;
  /* Infinite loop */
  for(;;)
  {
	  osSignalWait(SIGNAL_LIN_TO_RTC,osWaitForever);
 8001a2c:	463b      	mov	r3, r7
 8001a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a32:	2101      	movs	r1, #1
 8001a34:	4618      	mov	r0, r3
 8001a36:	f003 fe55 	bl	80056e4 <osSignalWait>
	  //Recevra une donnée de type RTC Time
	  	char chaine[20] = "";
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61bb      	str	r3, [r7, #24]
 8001a3e:	f107 031c 	add.w	r3, r7, #28
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	605a      	str	r2, [r3, #4]
 8001a48:	609a      	str	r2, [r3, #8]
 8001a4a:	60da      	str	r2, [r3, #12]
	  	sprintf("Ext : %d:%d %d", chaine, Data.hou.BIN,Data.min.BIN,Data.sec.BIN);
 8001a4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a50:	461a      	mov	r2, r3
 8001a52:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a56:	4618      	mov	r0, r3
 8001a58:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a5c:	f107 0118 	add.w	r1, r7, #24
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	4603      	mov	r3, r0
 8001a64:	4804      	ldr	r0, [pc, #16]	; (8001a78 <StartOp_LINtoRTC+0x54>)
 8001a66:	f006 fe81 	bl	800876c <siprintf>
	  	lcd_puts(2, chaine);
 8001a6a:	f107 0318 	add.w	r3, r7, #24
 8001a6e:	4619      	mov	r1, r3
 8001a70:	2002      	movs	r0, #2
 8001a72:	f7ff fcc5 	bl	8001400 <lcd_puts>
  {
 8001a76:	e7d9      	b.n	8001a2c <StartOp_LINtoRTC+0x8>
 8001a78:	080091fc 	.word	0x080091fc

08001a7c <StartTaskOp_LINtoCAN>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskOp_LINtoCAN */
void StartTaskOp_LINtoCAN(void const * argument)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartTaskOp_LINtoCAN */
  /* Infinite loop */
  for(;;)
  {
	  osSignalWait(SIGNAL_LIN_TO_CAN,osWaitForever);
 8001a84:	463b      	mov	r3, r7
 8001a86:	f04f 32ff 	mov.w	r2, #4294967295
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f003 fe29 	bl	80056e4 <osSignalWait>
	  if(Rx_Msg.data[0] == 0b1){
 8001a92:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <StartTaskOp_LINtoCAN+0x48>)
 8001a94:	789b      	ldrb	r3, [r3, #2]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d105      	bne.n	8001aa6 <StartTaskOp_LINtoCAN+0x2a>
	  		CAN_Act(0x52, PORT_A, PIN_0_ON);
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	2110      	movs	r1, #16
 8001a9e:	2052      	movs	r0, #82	; 0x52
 8001aa0:	f7fe ffa4 	bl	80009ec <CAN_Act>
 8001aa4:	e004      	b.n	8001ab0 <StartTaskOp_LINtoCAN+0x34>
	  	}
	  	else{ //Afin d'éviter toute erreur d'envoi
	  		CAN_Act(0x52, PORT_A, PIN_ALL_OFF);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2110      	movs	r1, #16
 8001aaa:	2052      	movs	r0, #82	; 0x52
 8001aac:	f7fe ff9e 	bl	80009ec <CAN_Act>
	  	}
	  	lcd_puts(1, "CAN Operation");
 8001ab0:	4905      	ldr	r1, [pc, #20]	; (8001ac8 <StartTaskOp_LINtoCAN+0x4c>)
 8001ab2:	2001      	movs	r0, #1
 8001ab4:	f7ff fca4 	bl	8001400 <lcd_puts>
	  	lcd_puts(2, "Received     ");
 8001ab8:	4904      	ldr	r1, [pc, #16]	; (8001acc <StartTaskOp_LINtoCAN+0x50>)
 8001aba:	2002      	movs	r0, #2
 8001abc:	f7ff fca0 	bl	8001400 <lcd_puts>
	  osSignalWait(SIGNAL_LIN_TO_CAN,osWaitForever);
 8001ac0:	e7e0      	b.n	8001a84 <StartTaskOp_LINtoCAN+0x8>
 8001ac2:	bf00      	nop
 8001ac4:	200007ac 	.word	0x200007ac
 8001ac8:	0800920c 	.word	0x0800920c
 8001acc:	0800921c 	.word	0x0800921c

08001ad0 <StartTaskOp_LEDtoLIN>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskOp_LEDtoLIN */
void StartTaskOp_LEDtoLIN(void const * argument)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartTaskOp_LEDtoLIN */
  /* Infinite loop */
  for(;;)
  {
	  osSignalWait(SIGNAL_LED_TO_LIN,osWaitForever);
 8001ad8:	463b      	mov	r3, r7
 8001ada:	f04f 32ff 	mov.w	r2, #4294967295
 8001ade:	2101      	movs	r1, #1
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f003 fdff 	bl	80056e4 <osSignalWait>
		Tx_Msg.data[0] = 	(GPIOD->ODR >> 12 > 0);
 8001ae6:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <StartTaskOp_LEDtoLIN+0x48>)
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	0b1b      	lsrs	r3, r3, #12
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	bf14      	ite	ne
 8001af0:	2301      	movne	r3, #1
 8001af2:	2300      	moveq	r3, #0
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	461a      	mov	r2, r3
 8001af8:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <StartTaskOp_LEDtoLIN+0x4c>)
 8001afa:	709a      	strb	r2, [r3, #2]
		Tx_Msg.length = 1;
 8001afc:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <StartTaskOp_LEDtoLIN+0x4c>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	705a      	strb	r2, [r3, #1]
		Tx_Msg.ID = LIN_ID(LIN_MODE_DATA, LIN_ID_LED, Tx_Msg.length);
 8001b02:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <StartTaskOp_LEDtoLIN+0x4c>)
 8001b04:	785b      	ldrb	r3, [r3, #1]
 8001b06:	f043 0320 	orr.w	r3, r3, #32
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	4b03      	ldr	r3, [pc, #12]	; (8001b1c <StartTaskOp_LEDtoLIN+0x4c>)
 8001b0e:	701a      	strb	r2, [r3, #0]
		SendLINMessage(&Tx_Msg);
 8001b10:	4802      	ldr	r0, [pc, #8]	; (8001b1c <StartTaskOp_LEDtoLIN+0x4c>)
 8001b12:	f7ff f9e5 	bl	8000ee0 <SendLINMessage>
	  osSignalWait(SIGNAL_LED_TO_LIN,osWaitForever);
 8001b16:	e7df      	b.n	8001ad8 <StartTaskOp_LEDtoLIN+0x8>
 8001b18:	40020c00 	.word	0x40020c00
 8001b1c:	200007a0 	.word	0x200007a0

08001b20 <StartTask_Op_CANtoLIN>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_Op_CANtoLIN */
void StartTask_Op_CANtoLIN(void const * argument)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_Op_CANtoLIN */
	osEvent revalue;
  /* Infinite loop */
  for(;;)
  {
	  osDelay(100);
 8001b28:	2064      	movs	r0, #100	; 0x64
 8001b2a:	f003 fd52 	bl	80055d2 <osDelay>
	  revalue=osMessageGet(Op_CANtoLINHandle,10000);
 8001b2e:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <StartTask_Op_CANtoLIN+0x54>)
 8001b30:	6819      	ldr	r1, [r3, #0]
 8001b32:	f107 030c 	add.w	r3, r7, #12
 8001b36:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f003 fe86 	bl	800584c <osMessageGet>
	  Tx_Msg.data[0] = revalue.value.v;
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <StartTask_Op_CANtoLIN+0x58>)
 8001b46:	709a      	strb	r2, [r3, #2]
	  Tx_Msg.length = 1;
 8001b48:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <StartTask_Op_CANtoLIN+0x58>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	705a      	strb	r2, [r3, #1]
	  Tx_Msg.ID = LIN_ID(LIN_MODE_DATA, LIN_ID_CAN, Tx_Msg.length);
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <StartTask_Op_CANtoLIN+0x58>)
 8001b50:	785b      	ldrb	r3, [r3, #1]
 8001b52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <StartTask_Op_CANtoLIN+0x58>)
 8001b5a:	701a      	strb	r2, [r3, #0]
	  	SendLINMessage(&Tx_Msg);
 8001b5c:	4806      	ldr	r0, [pc, #24]	; (8001b78 <StartTask_Op_CANtoLIN+0x58>)
 8001b5e:	f7ff f9bf 	bl	8000ee0 <SendLINMessage>

	  	lcd_puts(1, "CAN Operation");
 8001b62:	4906      	ldr	r1, [pc, #24]	; (8001b7c <StartTask_Op_CANtoLIN+0x5c>)
 8001b64:	2001      	movs	r0, #1
 8001b66:	f7ff fc4b 	bl	8001400 <lcd_puts>
	  	lcd_puts(2, "Transmitted  ");
 8001b6a:	4905      	ldr	r1, [pc, #20]	; (8001b80 <StartTask_Op_CANtoLIN+0x60>)
 8001b6c:	2002      	movs	r0, #2
 8001b6e:	f7ff fc47 	bl	8001400 <lcd_puts>
	  osDelay(100);
 8001b72:	e7d9      	b.n	8001b28 <StartTask_Op_CANtoLIN+0x8>
 8001b74:	2000080c 	.word	0x2000080c
 8001b78:	200007a0 	.word	0x200007a0
 8001b7c:	0800920c 	.word	0x0800920c
 8001b80:	0800922c 	.word	0x0800922c

08001b84 <StartTaskIDLE>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskIDLE */
void StartTaskIDLE(void const * argument)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskIDLE */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	f003 fd20 	bl	80055d2 <osDelay>
 8001b92:	e7fb      	b.n	8001b8c <StartTaskIDLE+0x8>

08001b94 <StartTask_Op_LINtoLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_Op_LINtoLED */
void StartTask_Op_LINtoLED(void const * argument)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartTask_Op_LINtoLED */
  /* Infinite loop */
  for(;;)
  {
	  osSignalWait(SIGNAL_LIN_TO_LED,osWaitForever);
 8001b9c:	463b      	mov	r3, r7
 8001b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f003 fd9d 	bl	80056e4 <osSignalWait>
		LED_Operate(Rx_Msg.data[0]);
 8001baa:	4b03      	ldr	r3, [pc, #12]	; (8001bb8 <StartTask_Op_LINtoLED+0x24>)
 8001bac:	789b      	ldrb	r3, [r3, #2]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe ffb8 	bl	8000b24 <LED_Operate>
	  osSignalWait(SIGNAL_LIN_TO_LED,osWaitForever);
 8001bb4:	e7f2      	b.n	8001b9c <StartTask_Op_LINtoLED+0x8>
 8001bb6:	bf00      	nop
 8001bb8:	200007ac 	.word	0x200007ac

08001bbc <CBClock>:
  /* USER CODE END StartTask_Op_LINtoLED */
}

/* CBClock function */
void CBClock(void const * argument)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CBClock */

  /* USER CODE END CBClock */
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a04      	ldr	r2, [pc, #16]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d101      	bne.n	8001be6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001be2:	f000 faff 	bl	80021e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40001000 	.word	0x40001000

08001bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bf8:	b672      	cpsid	i
}
 8001bfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  LED_Blink(0);
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	f7fe ff59 	bl	8000ab4 <LED_Blink>
 8001c02:	e7fb      	b.n	8001bfc <Error_Handler+0x8>

08001c04 <clock_Init>:

RTC_TypeDef *_RTC;
PWR_TypeDef *_PWR;
RTC_HandleTypeDef hrtc;

void clock_Init(void) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
	_RTC = RTC;
 8001c08:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <clock_Init+0x18>)
 8001c0a:	4a05      	ldr	r2, [pc, #20]	; (8001c20 <clock_Init+0x1c>)
 8001c0c:	601a      	str	r2, [r3, #0]
	_PWR = PWR;
 8001c0e:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <clock_Init+0x20>)
 8001c10:	4a05      	ldr	r2, [pc, #20]	; (8001c28 <clock_Init+0x24>)
 8001c12:	601a      	str	r2, [r3, #0]

	MX_RTC_Init();
 8001c14:	f000 f89c 	bl	8001d50 <MX_RTC_Init>

}
 8001c18:	bf00      	nop
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20000820 	.word	0x20000820
 8001c20:	40002800 	.word	0x40002800
 8001c24:	20000824 	.word	0x20000824
 8001c28:	40007000 	.word	0x40007000

08001c2c <getCurrentTime>:
	been initialized since the year field is set at its backup domain reset default value (0x00).
	To read the calendar after initialization, the software must first check that the RSF flag is set
	in the RTC_ISR register**/
}

void getCurrentTime(Time *time) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
	compare the results to confirm that the data is coherent and correct. Alternatively, the
	software can just compare the two results of the least-significant calendar register.
	Note: While BYPSHAD=1, instructions which read the calendar registers require one extra APB
	cycle to complete.**/

	uint32_t RTC_TR = _RTC->TR;
 8001c34:	4b37      	ldr	r3, [pc, #220]	; (8001d14 <getCurrentTime+0xe8>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	60fb      	str	r3, [r7, #12]

	uint8_t secBCD = (RTC_TR & (RTC_TR_ST_Msk | RTC_TR_SU_Msk)) >> RTC_TR_SU_Pos;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c44:	72fb      	strb	r3, [r7, #11]
	time->sec.MSD = (RTC_TR & RTC_TR_ST_Msk) >> RTC_TR_ST_Pos;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	091b      	lsrs	r3, r3, #4
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	709a      	strb	r2, [r3, #2]
	time->sec.LSD = (RTC_TR & RTC_TR_SU_Msk) >> RTC_TR_SU_Pos;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	70da      	strb	r2, [r3, #3]
	time->sec.BIN = BCDtoBinary(secBCD);
 8001c64:	7afb      	ldrb	r3, [r7, #11]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 f856 	bl	8001d18 <BCDtoBinary>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	461a      	mov	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	705a      	strb	r2, [r3, #1]

	uint8_t minBCD = (RTC_TR & (RTC_TR_MNT_Msk | RTC_TR_MNU_Msk)) >> RTC_TR_MNU_Pos;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	0a1b      	lsrs	r3, r3, #8
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c7e:	72bb      	strb	r3, [r7, #10]
	time->min.MSD = (RTC_TR & RTC_TR_MNT_Msk) >> RTC_TR_MNT_Pos;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	0b1b      	lsrs	r3, r3, #12
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	715a      	strb	r2, [r3, #5]
	time->min.LSD = (RTC_TR & RTC_TR_MNU_Msk) >> RTC_TR_MNU_Pos;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	0a1b      	lsrs	r3, r3, #8
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	719a      	strb	r2, [r3, #6]
	time->min.BIN = BCDtoBinary(minBCD);
 8001ca0:	7abb      	ldrb	r3, [r7, #10]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f000 f838 	bl	8001d18 <BCDtoBinary>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	461a      	mov	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	711a      	strb	r2, [r3, #4]

	uint8_t houBCD = (RTC_TR & (RTC_TR_HT_Msk | RTC_TR_HU_Msk)) >> RTC_TR_HU_Pos;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	0c1b      	lsrs	r3, r3, #16
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cba:	727b      	strb	r3, [r7, #9]
	time->hou.MSD = (RTC_TR & RTC_TR_HT_Msk) >> RTC_TR_HT_Pos;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	0d1b      	lsrs	r3, r3, #20
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	721a      	strb	r2, [r3, #8]
	time->hou.LSD = (RTC_TR & RTC_TR_HU_Msk) >> RTC_TR_HU_Pos;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	0c1b      	lsrs	r3, r3, #16
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	725a      	strb	r2, [r3, #9]
	time->hou.BIN = BCDtoBinary(houBCD);
 8001cdc:	7a7b      	ldrb	r3, [r7, #9]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f000 f81a 	bl	8001d18 <BCDtoBinary>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	71da      	strb	r2, [r3, #7]

	uint8_t format = (RTC_TR & (RTC_TR_PM_Msk)) >> RTC_TR_PM_Pos;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	0d9b      	lsrs	r3, r3, #22
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	723b      	strb	r3, [r7, #8]
	if (format) {
 8001cf8:	7a3b      	ldrb	r3, [r7, #8]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <getCurrentTime+0xda>
		time->format = AM;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]
	} else {
		time->format = PM24;
	}
}
 8001d04:	e002      	b.n	8001d0c <getCurrentTime+0xe0>
		time->format = PM24;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	701a      	strb	r2, [r3, #0]
}
 8001d0c:	bf00      	nop
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20000820 	.word	0x20000820

08001d18 <BCDtoBinary>:
	dm.Year = date->yea.BIN;

	HAL_RTC_SetDate(&hrtc, &dm, RTC_FORMAT_BIN);
}

uint8_t BCDtoBinary(uint8_t value) {
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	71fb      	strb	r3, [r7, #7]
	uint8_t MS4B = (value & 0xF0) >> 4U;
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	091b      	lsrs	r3, r3, #4
 8001d26:	73fb      	strb	r3, [r7, #15]
	uint8_t LS4B = (value & 0x0F) >> 0U;
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	73bb      	strb	r3, [r7, #14]
	uint8_t ret = MS4B * 10 + LS4B;
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
 8001d32:	461a      	mov	r2, r3
 8001d34:	0092      	lsls	r2, r2, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	7bbb      	ldrb	r3, [r7, #14]
 8001d3e:	4413      	add	r3, r2
 8001d40:	737b      	strb	r3, [r7, #13]
	return ret;
 8001d42:	7b7b      	ldrb	r3, [r7, #13]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <MX_RTC_Init>:
	ret.dayName = Mon;
	return ret;
}

void MX_RTC_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  hrtc.Instance = RTC;
 8001d54:	4b0f      	ldr	r3, [pc, #60]	; (8001d94 <MX_RTC_Init+0x44>)
 8001d56:	4a10      	ldr	r2, [pc, #64]	; (8001d98 <MX_RTC_Init+0x48>)
 8001d58:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001d5a:	4b0e      	ldr	r3, [pc, #56]	; (8001d94 <MX_RTC_Init+0x44>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001d60:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <MX_RTC_Init+0x44>)
 8001d62:	227f      	movs	r2, #127	; 0x7f
 8001d64:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001d66:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <MX_RTC_Init+0x44>)
 8001d68:	22ff      	movs	r2, #255	; 0xff
 8001d6a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001d6c:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <MX_RTC_Init+0x44>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001d72:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <MX_RTC_Init+0x44>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001d78:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <MX_RTC_Init+0x44>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d7e:	4805      	ldr	r0, [pc, #20]	; (8001d94 <MX_RTC_Init+0x44>)
 8001d80:	f002 f8d6 	bl	8003f30 <HAL_RTC_Init>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001d8a:	f7ff ff33 	bl	8001bf4 <Error_Handler>
  }
}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	20000828 	.word	0x20000828
 8001d98:	40002800 	.word	0x40002800

08001d9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	607b      	str	r3, [r7, #4]
 8001da6:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <HAL_MspInit+0x54>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001daa:	4a11      	ldr	r2, [pc, #68]	; (8001df0 <HAL_MspInit+0x54>)
 8001dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001db0:	6453      	str	r3, [r2, #68]	; 0x44
 8001db2:	4b0f      	ldr	r3, [pc, #60]	; (8001df0 <HAL_MspInit+0x54>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dba:	607b      	str	r3, [r7, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	603b      	str	r3, [r7, #0]
 8001dc2:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <HAL_MspInit+0x54>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	4a0a      	ldr	r2, [pc, #40]	; (8001df0 <HAL_MspInit+0x54>)
 8001dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dce:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <HAL_MspInit+0x54>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd6:	603b      	str	r3, [r7, #0]
 8001dd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001dda:	2200      	movs	r2, #0
 8001ddc:	210f      	movs	r1, #15
 8001dde:	f06f 0001 	mvn.w	r0, #1
 8001de2:	f001 f879 	bl	8002ed8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40023800 	.word	0x40023800

08001df4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08a      	sub	sp, #40	; 0x28
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfc:	f107 0314 	add.w	r3, r7, #20
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a1d      	ldr	r2, [pc, #116]	; (8001e88 <HAL_CAN_MspInit+0x94>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d134      	bne.n	8001e80 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	613b      	str	r3, [r7, #16]
 8001e1a:	4b1c      	ldr	r3, [pc, #112]	; (8001e8c <HAL_CAN_MspInit+0x98>)
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	4a1b      	ldr	r2, [pc, #108]	; (8001e8c <HAL_CAN_MspInit+0x98>)
 8001e20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e24:	6413      	str	r3, [r2, #64]	; 0x40
 8001e26:	4b19      	ldr	r3, [pc, #100]	; (8001e8c <HAL_CAN_MspInit+0x98>)
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	4b15      	ldr	r3, [pc, #84]	; (8001e8c <HAL_CAN_MspInit+0x98>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	4a14      	ldr	r2, [pc, #80]	; (8001e8c <HAL_CAN_MspInit+0x98>)
 8001e3c:	f043 0302 	orr.w	r3, r3, #2
 8001e40:	6313      	str	r3, [r2, #48]	; 0x30
 8001e42:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <HAL_CAN_MspInit+0x98>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e54:	2302      	movs	r3, #2
 8001e56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001e60:	2309      	movs	r3, #9
 8001e62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4809      	ldr	r0, [pc, #36]	; (8001e90 <HAL_CAN_MspInit+0x9c>)
 8001e6c:	f001 f8fe 	bl	800306c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001e70:	2200      	movs	r2, #0
 8001e72:	2105      	movs	r1, #5
 8001e74:	2014      	movs	r0, #20
 8001e76:	f001 f82f 	bl	8002ed8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001e7a:	2014      	movs	r0, #20
 8001e7c:	f001 f848 	bl	8002f10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001e80:	bf00      	nop
 8001e82:	3728      	adds	r7, #40	; 0x28
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40006400 	.word	0x40006400
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	40020400 	.word	0x40020400

08001e94 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e9c:	f107 0308 	add.w	r3, r7, #8
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a0c      	ldr	r2, [pc, #48]	; (8001ee0 <HAL_RTC_MspInit+0x4c>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d111      	bne.n	8001ed8 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001eb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ebc:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ebe:	f107 0308 	add.w	r3, r7, #8
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f001 ff52 	bl	8003d6c <HAL_RCCEx_PeriphCLKConfig>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001ece:	f7ff fe91 	bl	8001bf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ed2:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <HAL_RTC_MspInit+0x50>)
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001ed8:	bf00      	nop
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40002800 	.word	0x40002800
 8001ee4:	42470e3c 	.word	0x42470e3c

08001ee8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08a      	sub	sp, #40	; 0x28
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef0:	f107 0314 	add.w	r3, r7, #20
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
 8001efe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a1d      	ldr	r2, [pc, #116]	; (8001f7c <HAL_UART_MspInit+0x94>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d134      	bne.n	8001f74 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	4b1c      	ldr	r3, [pc, #112]	; (8001f80 <HAL_UART_MspInit+0x98>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	4a1b      	ldr	r2, [pc, #108]	; (8001f80 <HAL_UART_MspInit+0x98>)
 8001f14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f18:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1a:	4b19      	ldr	r3, [pc, #100]	; (8001f80 <HAL_UART_MspInit+0x98>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <HAL_UART_MspInit+0x98>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	4a14      	ldr	r2, [pc, #80]	; (8001f80 <HAL_UART_MspInit+0x98>)
 8001f30:	f043 0302 	orr.w	r3, r3, #2
 8001f34:	6313      	str	r3, [r2, #48]	; 0x30
 8001f36:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <HAL_UART_MspInit+0x98>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f42:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f50:	2303      	movs	r3, #3
 8001f52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f54:	2307      	movs	r3, #7
 8001f56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f58:	f107 0314 	add.w	r3, r7, #20
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4809      	ldr	r0, [pc, #36]	; (8001f84 <HAL_UART_MspInit+0x9c>)
 8001f60:	f001 f884 	bl	800306c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001f64:	2200      	movs	r2, #0
 8001f66:	2105      	movs	r1, #5
 8001f68:	2027      	movs	r0, #39	; 0x27
 8001f6a:	f000 ffb5 	bl	8002ed8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f6e:	2027      	movs	r0, #39	; 0x27
 8001f70:	f000 ffce 	bl	8002f10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f74:	bf00      	nop
 8001f76:	3728      	adds	r7, #40	; 0x28
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40004800 	.word	0x40004800
 8001f80:	40023800 	.word	0x40023800
 8001f84:	40020400 	.word	0x40020400

08001f88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08c      	sub	sp, #48	; 0x30
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001f98:	2200      	movs	r2, #0
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	2036      	movs	r0, #54	; 0x36
 8001f9e:	f000 ff9b 	bl	8002ed8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001fa2:	2036      	movs	r0, #54	; 0x36
 8001fa4:	f000 ffb4 	bl	8002f10 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	4b1f      	ldr	r3, [pc, #124]	; (800202c <HAL_InitTick+0xa4>)
 8001fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb0:	4a1e      	ldr	r2, [pc, #120]	; (800202c <HAL_InitTick+0xa4>)
 8001fb2:	f043 0310 	orr.w	r3, r3, #16
 8001fb6:	6413      	str	r3, [r2, #64]	; 0x40
 8001fb8:	4b1c      	ldr	r3, [pc, #112]	; (800202c <HAL_InitTick+0xa4>)
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	f003 0310 	and.w	r3, r3, #16
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fc4:	f107 0210 	add.w	r2, r7, #16
 8001fc8:	f107 0314 	add.w	r3, r7, #20
 8001fcc:	4611      	mov	r1, r2
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f001 fe9a 	bl	8003d08 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001fd4:	f001 fe70 	bl	8003cb8 <HAL_RCC_GetPCLK1Freq>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe0:	4a13      	ldr	r2, [pc, #76]	; (8002030 <HAL_InitTick+0xa8>)
 8001fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe6:	0c9b      	lsrs	r3, r3, #18
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001fec:	4b11      	ldr	r3, [pc, #68]	; (8002034 <HAL_InitTick+0xac>)
 8001fee:	4a12      	ldr	r2, [pc, #72]	; (8002038 <HAL_InitTick+0xb0>)
 8001ff0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001ff2:	4b10      	ldr	r3, [pc, #64]	; (8002034 <HAL_InitTick+0xac>)
 8001ff4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ff8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001ffa:	4a0e      	ldr	r2, [pc, #56]	; (8002034 <HAL_InitTick+0xac>)
 8001ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ffe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <HAL_InitTick+0xac>)
 8002002:	2200      	movs	r2, #0
 8002004:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002006:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <HAL_InitTick+0xac>)
 8002008:	2200      	movs	r2, #0
 800200a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800200c:	4809      	ldr	r0, [pc, #36]	; (8002034 <HAL_InitTick+0xac>)
 800200e:	f002 f889 	bl	8004124 <HAL_TIM_Base_Init>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d104      	bne.n	8002022 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002018:	4806      	ldr	r0, [pc, #24]	; (8002034 <HAL_InitTick+0xac>)
 800201a:	f002 f8dd 	bl	80041d8 <HAL_TIM_Base_Start_IT>
 800201e:	4603      	mov	r3, r0
 8002020:	e000      	b.n	8002024 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
}
 8002024:	4618      	mov	r0, r3
 8002026:	3730      	adds	r7, #48	; 0x30
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40023800 	.word	0x40023800
 8002030:	431bde83 	.word	0x431bde83
 8002034:	20000848 	.word	0x20000848
 8002038:	40001000 	.word	0x40001000

0800203c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002040:	e7fe      	b.n	8002040 <NMI_Handler+0x4>

08002042 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002046:	e7fe      	b.n	8002046 <HardFault_Handler+0x4>

08002048 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800204c:	e7fe      	b.n	800204c <MemManage_Handler+0x4>

0800204e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002052:	e7fe      	b.n	8002052 <BusFault_Handler+0x4>

08002054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002058:	e7fe      	b.n	8002058 <UsageFault_Handler+0x4>

0800205a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
	if (RxHeader.ExtId == 0x10005211){
 800206c:	4b09      	ldr	r3, [pc, #36]	; (8002094 <CAN1_RX0_IRQHandler+0x2c>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	4a09      	ldr	r2, [pc, #36]	; (8002098 <CAN1_RX0_IRQHandler+0x30>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d108      	bne.n	8002088 <CAN1_RX0_IRQHandler+0x20>
		osMessagePut(Op_CANtoLINHandle,RxData[0],100);
 8002076:	4b09      	ldr	r3, [pc, #36]	; (800209c <CAN1_RX0_IRQHandler+0x34>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a09      	ldr	r2, [pc, #36]	; (80020a0 <CAN1_RX0_IRQHandler+0x38>)
 800207c:	7812      	ldrb	r2, [r2, #0]
 800207e:	4611      	mov	r1, r2
 8002080:	2264      	movs	r2, #100	; 0x64
 8002082:	4618      	mov	r0, r3
 8002084:	f003 fba2 	bl	80057cc <osMessagePut>
	}
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002088:	4806      	ldr	r0, [pc, #24]	; (80020a4 <CAN1_RX0_IRQHandler+0x3c>)
 800208a:	f000 fc10 	bl	80028ae <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000090 	.word	0x20000090
 8002098:	10005211 	.word	0x10005211
 800209c:	2000080c 	.word	0x2000080c
 80020a0:	200000ac 	.word	0x200000ac
 80020a4:	200007c8 	.word	0x200007c8

080020a8 <TIM6_DAC_IRQHandler>:
/**
  * @brief This function handles USART3 global interrupt.
  */

void TIM6_DAC_IRQHandler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80020ac:	4802      	ldr	r0, [pc, #8]	; (80020b8 <TIM6_DAC_IRQHandler+0x10>)
 80020ae:	f002 f903 	bl	80042b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20000848 	.word	0x20000848

080020bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020c4:	4a14      	ldr	r2, [pc, #80]	; (8002118 <_sbrk+0x5c>)
 80020c6:	4b15      	ldr	r3, [pc, #84]	; (800211c <_sbrk+0x60>)
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020d0:	4b13      	ldr	r3, [pc, #76]	; (8002120 <_sbrk+0x64>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d102      	bne.n	80020de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020d8:	4b11      	ldr	r3, [pc, #68]	; (8002120 <_sbrk+0x64>)
 80020da:	4a12      	ldr	r2, [pc, #72]	; (8002124 <_sbrk+0x68>)
 80020dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020de:	4b10      	ldr	r3, [pc, #64]	; (8002120 <_sbrk+0x64>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4413      	add	r3, r2
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d207      	bcs.n	80020fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020ec:	f006 fafe 	bl	80086ec <__errno>
 80020f0:	4603      	mov	r3, r0
 80020f2:	220c      	movs	r2, #12
 80020f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020f6:	f04f 33ff 	mov.w	r3, #4294967295
 80020fa:	e009      	b.n	8002110 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020fc:	4b08      	ldr	r3, [pc, #32]	; (8002120 <_sbrk+0x64>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002102:	4b07      	ldr	r3, [pc, #28]	; (8002120 <_sbrk+0x64>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4413      	add	r3, r2
 800210a:	4a05      	ldr	r2, [pc, #20]	; (8002120 <_sbrk+0x64>)
 800210c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800210e:	68fb      	ldr	r3, [r7, #12]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20020000 	.word	0x20020000
 800211c:	00000400 	.word	0x00000400
 8002120:	20000890 	.word	0x20000890
 8002124:	20004710 	.word	0x20004710

08002128 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800212c:	4b06      	ldr	r3, [pc, #24]	; (8002148 <SystemInit+0x20>)
 800212e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002132:	4a05      	ldr	r2, [pc, #20]	; (8002148 <SystemInit+0x20>)
 8002134:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002138:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	e000ed00 	.word	0xe000ed00

0800214c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800214c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002184 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002150:	480d      	ldr	r0, [pc, #52]	; (8002188 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002152:	490e      	ldr	r1, [pc, #56]	; (800218c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002154:	4a0e      	ldr	r2, [pc, #56]	; (8002190 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002156:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002158:	e002      	b.n	8002160 <LoopCopyDataInit>

0800215a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800215a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800215c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800215e:	3304      	adds	r3, #4

08002160 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002160:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002162:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002164:	d3f9      	bcc.n	800215a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002166:	4a0b      	ldr	r2, [pc, #44]	; (8002194 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002168:	4c0b      	ldr	r4, [pc, #44]	; (8002198 <LoopFillZerobss+0x26>)
  movs r3, #0
 800216a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800216c:	e001      	b.n	8002172 <LoopFillZerobss>

0800216e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800216e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002170:	3204      	adds	r2, #4

08002172 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002172:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002174:	d3fb      	bcc.n	800216e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002176:	f7ff ffd7 	bl	8002128 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800217a:	f006 fabd 	bl	80086f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800217e:	f7ff f96b 	bl	8001458 <main>
  bx  lr    
 8002182:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002184:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002188:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800218c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002190:	080092b4 	.word	0x080092b4
  ldr r2, =_sbss
 8002194:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002198:	2000470c 	.word	0x2000470c

0800219c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800219c:	e7fe      	b.n	800219c <ADC_IRQHandler>
	...

080021a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021a4:	4b0e      	ldr	r3, [pc, #56]	; (80021e0 <HAL_Init+0x40>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a0d      	ldr	r2, [pc, #52]	; (80021e0 <HAL_Init+0x40>)
 80021aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021b0:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <HAL_Init+0x40>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a0a      	ldr	r2, [pc, #40]	; (80021e0 <HAL_Init+0x40>)
 80021b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021bc:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <HAL_Init+0x40>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a07      	ldr	r2, [pc, #28]	; (80021e0 <HAL_Init+0x40>)
 80021c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021c8:	2003      	movs	r0, #3
 80021ca:	f000 fe7a 	bl	8002ec2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021ce:	2000      	movs	r0, #0
 80021d0:	f7ff feda 	bl	8001f88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021d4:	f7ff fde2 	bl	8001d9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40023c00 	.word	0x40023c00

080021e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021e8:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_IncTick+0x20>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	461a      	mov	r2, r3
 80021ee:	4b06      	ldr	r3, [pc, #24]	; (8002208 <HAL_IncTick+0x24>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4413      	add	r3, r2
 80021f4:	4a04      	ldr	r2, [pc, #16]	; (8002208 <HAL_IncTick+0x24>)
 80021f6:	6013      	str	r3, [r2, #0]
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	20000008 	.word	0x20000008
 8002208:	20000894 	.word	0x20000894

0800220c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return uwTick;
 8002210:	4b03      	ldr	r3, [pc, #12]	; (8002220 <HAL_GetTick+0x14>)
 8002212:	681b      	ldr	r3, [r3, #0]
}
 8002214:	4618      	mov	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	20000894 	.word	0x20000894

08002224 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800222c:	f7ff ffee 	bl	800220c <HAL_GetTick>
 8002230:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800223c:	d005      	beq.n	800224a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800223e:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <HAL_Delay+0x44>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	461a      	mov	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4413      	add	r3, r2
 8002248:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800224a:	bf00      	nop
 800224c:	f7ff ffde 	bl	800220c <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	429a      	cmp	r2, r3
 800225a:	d8f7      	bhi.n	800224c <HAL_Delay+0x28>
  {
  }
}
 800225c:	bf00      	nop
 800225e:	bf00      	nop
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	20000008 	.word	0x20000008

0800226c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e0ed      	b.n	800245a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d102      	bne.n	8002290 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff fdb2 	bl	8001df4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f042 0201 	orr.w	r2, r2, #1
 800229e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022a0:	f7ff ffb4 	bl	800220c <HAL_GetTick>
 80022a4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022a6:	e012      	b.n	80022ce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022a8:	f7ff ffb0 	bl	800220c <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b0a      	cmp	r3, #10
 80022b4:	d90b      	bls.n	80022ce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2205      	movs	r2, #5
 80022c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e0c5      	b.n	800245a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0e5      	beq.n	80022a8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 0202 	bic.w	r2, r2, #2
 80022ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022ec:	f7ff ff8e 	bl	800220c <HAL_GetTick>
 80022f0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80022f2:	e012      	b.n	800231a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022f4:	f7ff ff8a 	bl	800220c <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b0a      	cmp	r3, #10
 8002300:	d90b      	bls.n	800231a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002306:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2205      	movs	r2, #5
 8002312:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e09f      	b.n	800245a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1e5      	bne.n	80022f4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	7e1b      	ldrb	r3, [r3, #24]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d108      	bne.n	8002342 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	e007      	b.n	8002352 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002350:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	7e5b      	ldrb	r3, [r3, #25]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d108      	bne.n	800236c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	e007      	b.n	800237c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800237a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	7e9b      	ldrb	r3, [r3, #26]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d108      	bne.n	8002396 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 0220 	orr.w	r2, r2, #32
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	e007      	b.n	80023a6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 0220 	bic.w	r2, r2, #32
 80023a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	7edb      	ldrb	r3, [r3, #27]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d108      	bne.n	80023c0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 0210 	bic.w	r2, r2, #16
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	e007      	b.n	80023d0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0210 	orr.w	r2, r2, #16
 80023ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	7f1b      	ldrb	r3, [r3, #28]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d108      	bne.n	80023ea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f042 0208 	orr.w	r2, r2, #8
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	e007      	b.n	80023fa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 0208 	bic.w	r2, r2, #8
 80023f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	7f5b      	ldrb	r3, [r3, #29]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d108      	bne.n	8002414 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f042 0204 	orr.w	r2, r2, #4
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	e007      	b.n	8002424 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 0204 	bic.w	r2, r2, #4
 8002422:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	431a      	orrs	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	ea42 0103 	orr.w	r1, r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	1e5a      	subs	r2, r3, #1
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	430a      	orrs	r2, r1
 8002448:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
	...

08002464 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002464:	b480      	push	{r7}
 8002466:	b087      	sub	sp, #28
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f893 3020 	ldrb.w	r3, [r3, #32]
 800247a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800247c:	7cfb      	ldrb	r3, [r7, #19]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d003      	beq.n	800248a <HAL_CAN_ConfigFilter+0x26>
 8002482:	7cfb      	ldrb	r3, [r7, #19]
 8002484:	2b02      	cmp	r3, #2
 8002486:	f040 80be 	bne.w	8002606 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800248a:	4b65      	ldr	r3, [pc, #404]	; (8002620 <HAL_CAN_ConfigFilter+0x1bc>)
 800248c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002494:	f043 0201 	orr.w	r2, r3, #1
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024a4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b8:	021b      	lsls	r3, r3, #8
 80024ba:	431a      	orrs	r2, r3
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	f003 031f 	and.w	r3, r3, #31
 80024ca:	2201      	movs	r2, #1
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	43db      	mvns	r3, r3
 80024dc:	401a      	ands	r2, r3
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	69db      	ldr	r3, [r3, #28]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d123      	bne.n	8002534 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	43db      	mvns	r3, r3
 80024f6:	401a      	ands	r2, r3
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800250e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	3248      	adds	r2, #72	; 0x48
 8002514:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002528:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800252a:	6979      	ldr	r1, [r7, #20]
 800252c:	3348      	adds	r3, #72	; 0x48
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	440b      	add	r3, r1
 8002532:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	69db      	ldr	r3, [r3, #28]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d122      	bne.n	8002582 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	431a      	orrs	r2, r3
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800255c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	3248      	adds	r2, #72	; 0x48
 8002562:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002576:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002578:	6979      	ldr	r1, [r7, #20]
 800257a:	3348      	adds	r3, #72	; 0x48
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	440b      	add	r3, r1
 8002580:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d109      	bne.n	800259e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	43db      	mvns	r3, r3
 8002594:	401a      	ands	r2, r3
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800259c:	e007      	b.n	80025ae <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	431a      	orrs	r2, r3
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d109      	bne.n	80025ca <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	43db      	mvns	r3, r3
 80025c0:	401a      	ands	r2, r3
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80025c8:	e007      	b.n	80025da <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	431a      	orrs	r2, r3
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d107      	bne.n	80025f2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	431a      	orrs	r2, r3
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80025f8:	f023 0201 	bic.w	r2, r3, #1
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	e006      	b.n	8002614 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
  }
}
 8002614:	4618      	mov	r0, r3
 8002616:	371c      	adds	r7, #28
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	40006400 	.word	0x40006400

08002624 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b01      	cmp	r3, #1
 8002636:	d12e      	bne.n	8002696 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2202      	movs	r2, #2
 800263c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0201 	bic.w	r2, r2, #1
 800264e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002650:	f7ff fddc 	bl	800220c <HAL_GetTick>
 8002654:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002656:	e012      	b.n	800267e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002658:	f7ff fdd8 	bl	800220c <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b0a      	cmp	r3, #10
 8002664:	d90b      	bls.n	800267e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2205      	movs	r2, #5
 8002676:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e012      	b.n	80026a4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1e5      	bne.n	8002658 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002692:	2300      	movs	r3, #0
 8002694:	e006      	b.n	80026a4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
  }
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b089      	sub	sp, #36	; 0x24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
 80026b8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026c0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80026ca:	7ffb      	ldrb	r3, [r7, #31]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d003      	beq.n	80026d8 <HAL_CAN_AddTxMessage+0x2c>
 80026d0:	7ffb      	ldrb	r3, [r7, #31]
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	f040 80b8 	bne.w	8002848 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10a      	bne.n	80026f8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d105      	bne.n	80026f8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 80a0 	beq.w	8002838 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	0e1b      	lsrs	r3, r3, #24
 80026fc:	f003 0303 	and.w	r3, r3, #3
 8002700:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	2b02      	cmp	r3, #2
 8002706:	d907      	bls.n	8002718 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e09e      	b.n	8002856 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002718:	2201      	movs	r2, #1
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	409a      	lsls	r2, r3
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10d      	bne.n	8002746 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002734:	68f9      	ldr	r1, [r7, #12]
 8002736:	6809      	ldr	r1, [r1, #0]
 8002738:	431a      	orrs	r2, r3
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	3318      	adds	r3, #24
 800273e:	011b      	lsls	r3, r3, #4
 8002740:	440b      	add	r3, r1
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	e00f      	b.n	8002766 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002750:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002756:	68f9      	ldr	r1, [r7, #12]
 8002758:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800275a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	3318      	adds	r3, #24
 8002760:	011b      	lsls	r3, r3, #4
 8002762:	440b      	add	r3, r1
 8002764:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6819      	ldr	r1, [r3, #0]
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	691a      	ldr	r2, [r3, #16]
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	3318      	adds	r3, #24
 8002772:	011b      	lsls	r3, r3, #4
 8002774:	440b      	add	r3, r1
 8002776:	3304      	adds	r3, #4
 8002778:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	7d1b      	ldrb	r3, [r3, #20]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d111      	bne.n	80027a6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	3318      	adds	r3, #24
 800278a:	011b      	lsls	r3, r3, #4
 800278c:	4413      	add	r3, r2
 800278e:	3304      	adds	r3, #4
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	6811      	ldr	r1, [r2, #0]
 8002796:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	3318      	adds	r3, #24
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	440b      	add	r3, r1
 80027a2:	3304      	adds	r3, #4
 80027a4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	3307      	adds	r3, #7
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	061a      	lsls	r2, r3, #24
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3306      	adds	r3, #6
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	041b      	lsls	r3, r3, #16
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	3305      	adds	r3, #5
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	021b      	lsls	r3, r3, #8
 80027c0:	4313      	orrs	r3, r2
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	3204      	adds	r2, #4
 80027c6:	7812      	ldrb	r2, [r2, #0]
 80027c8:	4610      	mov	r0, r2
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	6811      	ldr	r1, [r2, #0]
 80027ce:	ea43 0200 	orr.w	r2, r3, r0
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	011b      	lsls	r3, r3, #4
 80027d6:	440b      	add	r3, r1
 80027d8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80027dc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	3303      	adds	r3, #3
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	061a      	lsls	r2, r3, #24
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3302      	adds	r3, #2
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	041b      	lsls	r3, r3, #16
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3301      	adds	r3, #1
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	021b      	lsls	r3, r3, #8
 80027f8:	4313      	orrs	r3, r2
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	7812      	ldrb	r2, [r2, #0]
 80027fe:	4610      	mov	r0, r2
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	6811      	ldr	r1, [r2, #0]
 8002804:	ea43 0200 	orr.w	r2, r3, r0
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	011b      	lsls	r3, r3, #4
 800280c:	440b      	add	r3, r1
 800280e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002812:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	3318      	adds	r3, #24
 800281c:	011b      	lsls	r3, r3, #4
 800281e:	4413      	add	r3, r2
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	6811      	ldr	r1, [r2, #0]
 8002826:	f043 0201 	orr.w	r2, r3, #1
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	3318      	adds	r3, #24
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	440b      	add	r3, r1
 8002832:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002834:	2300      	movs	r3, #0
 8002836:	e00e      	b.n	8002856 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e006      	b.n	8002856 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
  }
}
 8002856:	4618      	mov	r0, r3
 8002858:	3724      	adds	r7, #36	; 0x24
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002862:	b480      	push	{r7}
 8002864:	b085      	sub	sp, #20
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
 800286a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002872:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002874:	7bfb      	ldrb	r3, [r7, #15]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d002      	beq.n	8002880 <HAL_CAN_ActivateNotification+0x1e>
 800287a:	7bfb      	ldrb	r3, [r7, #15]
 800287c:	2b02      	cmp	r3, #2
 800287e:	d109      	bne.n	8002894 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6959      	ldr	r1, [r3, #20]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	430a      	orrs	r2, r1
 800288e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002890:	2300      	movs	r3, #0
 8002892:	e006      	b.n	80028a2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
  }
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b08a      	sub	sp, #40	; 0x28
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80028b6:	2300      	movs	r3, #0
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80028ea:	6a3b      	ldr	r3, [r7, #32]
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d07c      	beq.n	80029ee <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d023      	beq.n	8002946 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2201      	movs	r2, #1
 8002904:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 f983 	bl	8002c1c <HAL_CAN_TxMailbox0CompleteCallback>
 8002916:	e016      	b.n	8002946 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	f003 0304 	and.w	r3, r3, #4
 800291e:	2b00      	cmp	r3, #0
 8002920:	d004      	beq.n	800292c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
 800292a:	e00c      	b.n	8002946 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	2b00      	cmp	r3, #0
 8002934:	d004      	beq.n	8002940 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
 800293e:	e002      	b.n	8002946 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 f989 	bl	8002c58 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294c:	2b00      	cmp	r3, #0
 800294e:	d024      	beq.n	800299a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002958:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 f963 	bl	8002c30 <HAL_CAN_TxMailbox1CompleteCallback>
 800296a:	e016      	b.n	800299a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002972:	2b00      	cmp	r3, #0
 8002974:	d004      	beq.n	8002980 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800297c:	627b      	str	r3, [r7, #36]	; 0x24
 800297e:	e00c      	b.n	800299a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002986:	2b00      	cmp	r3, #0
 8002988:	d004      	beq.n	8002994 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002990:	627b      	str	r3, [r7, #36]	; 0x24
 8002992:	e002      	b.n	800299a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 f969 	bl	8002c6c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d024      	beq.n	80029ee <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029ac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d003      	beq.n	80029c0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 f943 	bl	8002c44 <HAL_CAN_TxMailbox2CompleteCallback>
 80029be:	e016      	b.n	80029ee <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d004      	beq.n	80029d4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029d0:	627b      	str	r3, [r7, #36]	; 0x24
 80029d2:	e00c      	b.n	80029ee <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d004      	beq.n	80029e8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24
 80029e6:	e002      	b.n	80029ee <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 f949 	bl	8002c80 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80029ee:	6a3b      	ldr	r3, [r7, #32]
 80029f0:	f003 0308 	and.w	r3, r3, #8
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00c      	beq.n	8002a12 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	f003 0310 	and.w	r3, r3, #16
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d007      	beq.n	8002a12 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a08:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2210      	movs	r2, #16
 8002a10:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002a12:	6a3b      	ldr	r3, [r7, #32]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00b      	beq.n	8002a34 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d006      	beq.n	8002a34 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2208      	movs	r2, #8
 8002a2c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f93a 	bl	8002ca8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002a34:	6a3b      	ldr	r3, [r7, #32]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d009      	beq.n	8002a52 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	f003 0303 	and.w	r3, r3, #3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d002      	beq.n	8002a52 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 f921 	bl	8002c94 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00c      	beq.n	8002a76 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	f003 0310 	and.w	r3, r3, #16
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d007      	beq.n	8002a76 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a6c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2210      	movs	r2, #16
 8002a74:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	f003 0320 	and.w	r3, r3, #32
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00b      	beq.n	8002a98 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	f003 0308 	and.w	r3, r3, #8
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d006      	beq.n	8002a98 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2208      	movs	r2, #8
 8002a90:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f91c 	bl	8002cd0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002a98:	6a3b      	ldr	r3, [r7, #32]
 8002a9a:	f003 0310 	and.w	r3, r3, #16
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d009      	beq.n	8002ab6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	f003 0303 	and.w	r3, r3, #3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d002      	beq.n	8002ab6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f903 	bl	8002cbc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002ab6:	6a3b      	ldr	r3, [r7, #32]
 8002ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00b      	beq.n	8002ad8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	f003 0310 	and.w	r3, r3, #16
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d006      	beq.n	8002ad8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2210      	movs	r2, #16
 8002ad0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f906 	bl	8002ce4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002ad8:	6a3b      	ldr	r3, [r7, #32]
 8002ada:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00b      	beq.n	8002afa <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	f003 0308 	and.w	r3, r3, #8
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d006      	beq.n	8002afa <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2208      	movs	r2, #8
 8002af2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 f8ff 	bl	8002cf8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d07b      	beq.n	8002bfc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	f003 0304 	and.w	r3, r3, #4
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d072      	beq.n	8002bf4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b0e:	6a3b      	ldr	r3, [r7, #32]
 8002b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d008      	beq.n	8002b2a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
 8002b2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d008      	beq.n	8002b46 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	f043 0302 	orr.w	r3, r3, #2
 8002b44:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d008      	beq.n	8002b62 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	f043 0304 	orr.w	r3, r3, #4
 8002b60:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b62:	6a3b      	ldr	r3, [r7, #32]
 8002b64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d043      	beq.n	8002bf4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d03e      	beq.n	8002bf4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b7c:	2b60      	cmp	r3, #96	; 0x60
 8002b7e:	d02b      	beq.n	8002bd8 <HAL_CAN_IRQHandler+0x32a>
 8002b80:	2b60      	cmp	r3, #96	; 0x60
 8002b82:	d82e      	bhi.n	8002be2 <HAL_CAN_IRQHandler+0x334>
 8002b84:	2b50      	cmp	r3, #80	; 0x50
 8002b86:	d022      	beq.n	8002bce <HAL_CAN_IRQHandler+0x320>
 8002b88:	2b50      	cmp	r3, #80	; 0x50
 8002b8a:	d82a      	bhi.n	8002be2 <HAL_CAN_IRQHandler+0x334>
 8002b8c:	2b40      	cmp	r3, #64	; 0x40
 8002b8e:	d019      	beq.n	8002bc4 <HAL_CAN_IRQHandler+0x316>
 8002b90:	2b40      	cmp	r3, #64	; 0x40
 8002b92:	d826      	bhi.n	8002be2 <HAL_CAN_IRQHandler+0x334>
 8002b94:	2b30      	cmp	r3, #48	; 0x30
 8002b96:	d010      	beq.n	8002bba <HAL_CAN_IRQHandler+0x30c>
 8002b98:	2b30      	cmp	r3, #48	; 0x30
 8002b9a:	d822      	bhi.n	8002be2 <HAL_CAN_IRQHandler+0x334>
 8002b9c:	2b10      	cmp	r3, #16
 8002b9e:	d002      	beq.n	8002ba6 <HAL_CAN_IRQHandler+0x2f8>
 8002ba0:	2b20      	cmp	r3, #32
 8002ba2:	d005      	beq.n	8002bb0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002ba4:	e01d      	b.n	8002be2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba8:	f043 0308 	orr.w	r3, r3, #8
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bae:	e019      	b.n	8002be4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	f043 0310 	orr.w	r3, r3, #16
 8002bb6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bb8:	e014      	b.n	8002be4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	f043 0320 	orr.w	r3, r3, #32
 8002bc0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bc2:	e00f      	b.n	8002be4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bcc:	e00a      	b.n	8002be4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bd4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bd6:	e005      	b.n	8002be4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bde:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002be0:	e000      	b.n	8002be4 <HAL_CAN_IRQHandler+0x336>
            break;
 8002be2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	699a      	ldr	r2, [r3, #24]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002bf2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2204      	movs	r2, #4
 8002bfa:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d008      	beq.n	8002c14 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 f87c 	bl	8002d0c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002c14:	bf00      	nop
 8002c16:	3728      	adds	r7, #40	; 0x28
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <__NVIC_SetPriorityGrouping>:
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d30:	4b0c      	ldr	r3, [pc, #48]	; (8002d64 <__NVIC_SetPriorityGrouping+0x44>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d52:	4a04      	ldr	r2, [pc, #16]	; (8002d64 <__NVIC_SetPriorityGrouping+0x44>)
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	60d3      	str	r3, [r2, #12]
}
 8002d58:	bf00      	nop
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	e000ed00 	.word	0xe000ed00

08002d68 <__NVIC_GetPriorityGrouping>:
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d6c:	4b04      	ldr	r3, [pc, #16]	; (8002d80 <__NVIC_GetPriorityGrouping+0x18>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	0a1b      	lsrs	r3, r3, #8
 8002d72:	f003 0307 	and.w	r3, r3, #7
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	e000ed00 	.word	0xe000ed00

08002d84 <__NVIC_EnableIRQ>:
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	db0b      	blt.n	8002dae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d96:	79fb      	ldrb	r3, [r7, #7]
 8002d98:	f003 021f 	and.w	r2, r3, #31
 8002d9c:	4907      	ldr	r1, [pc, #28]	; (8002dbc <__NVIC_EnableIRQ+0x38>)
 8002d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da2:	095b      	lsrs	r3, r3, #5
 8002da4:	2001      	movs	r0, #1
 8002da6:	fa00 f202 	lsl.w	r2, r0, r2
 8002daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	e000e100 	.word	0xe000e100

08002dc0 <__NVIC_DisableIRQ>:
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	db12      	blt.n	8002df8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
 8002dd4:	f003 021f 	and.w	r2, r3, #31
 8002dd8:	490a      	ldr	r1, [pc, #40]	; (8002e04 <__NVIC_DisableIRQ+0x44>)
 8002dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dde:	095b      	lsrs	r3, r3, #5
 8002de0:	2001      	movs	r0, #1
 8002de2:	fa00 f202 	lsl.w	r2, r0, r2
 8002de6:	3320      	adds	r3, #32
 8002de8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002dec:	f3bf 8f4f 	dsb	sy
}
 8002df0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002df2:	f3bf 8f6f 	isb	sy
}
 8002df6:	bf00      	nop
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	e000e100 	.word	0xe000e100

08002e08 <__NVIC_SetPriority>:
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	6039      	str	r1, [r7, #0]
 8002e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	db0a      	blt.n	8002e32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	490c      	ldr	r1, [pc, #48]	; (8002e54 <__NVIC_SetPriority+0x4c>)
 8002e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e26:	0112      	lsls	r2, r2, #4
 8002e28:	b2d2      	uxtb	r2, r2
 8002e2a:	440b      	add	r3, r1
 8002e2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002e30:	e00a      	b.n	8002e48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	4908      	ldr	r1, [pc, #32]	; (8002e58 <__NVIC_SetPriority+0x50>)
 8002e38:	79fb      	ldrb	r3, [r7, #7]
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	3b04      	subs	r3, #4
 8002e40:	0112      	lsls	r2, r2, #4
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	440b      	add	r3, r1
 8002e46:	761a      	strb	r2, [r3, #24]
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	e000e100 	.word	0xe000e100
 8002e58:	e000ed00 	.word	0xe000ed00

08002e5c <NVIC_EncodePriority>:
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b089      	sub	sp, #36	; 0x24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	f1c3 0307 	rsb	r3, r3, #7
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	bf28      	it	cs
 8002e7a:	2304      	movcs	r3, #4
 8002e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	3304      	adds	r3, #4
 8002e82:	2b06      	cmp	r3, #6
 8002e84:	d902      	bls.n	8002e8c <NVIC_EncodePriority+0x30>
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	3b03      	subs	r3, #3
 8002e8a:	e000      	b.n	8002e8e <NVIC_EncodePriority+0x32>
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e90:	f04f 32ff 	mov.w	r2, #4294967295
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	43da      	mvns	r2, r3
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	401a      	ands	r2, r3
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8002eae:	43d9      	mvns	r1, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb4:	4313      	orrs	r3, r2
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3724      	adds	r7, #36	; 0x24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b082      	sub	sp, #8
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7ff ff28 	bl	8002d20 <__NVIC_SetPriorityGrouping>
}
 8002ed0:	bf00      	nop
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
 8002ee4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002eea:	f7ff ff3d 	bl	8002d68 <__NVIC_GetPriorityGrouping>
 8002eee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	68b9      	ldr	r1, [r7, #8]
 8002ef4:	6978      	ldr	r0, [r7, #20]
 8002ef6:	f7ff ffb1 	bl	8002e5c <NVIC_EncodePriority>
 8002efa:	4602      	mov	r2, r0
 8002efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f00:	4611      	mov	r1, r2
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff ff80 	bl	8002e08 <__NVIC_SetPriority>
}
 8002f08:	bf00      	nop
 8002f0a:	3718      	adds	r7, #24
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	4603      	mov	r3, r0
 8002f18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff ff30 	bl	8002d84 <__NVIC_EnableIRQ>
}
 8002f24:	bf00      	nop
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	4603      	mov	r3, r0
 8002f34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff ff40 	bl	8002dc0 <__NVIC_DisableIRQ>
}
 8002f40:	bf00      	nop
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f54:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f56:	f7ff f959 	bl	800220c <HAL_GetTick>
 8002f5a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d008      	beq.n	8002f7a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2280      	movs	r2, #128	; 0x80
 8002f6c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e052      	b.n	8003020 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 0216 	bic.w	r2, r2, #22
 8002f88:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	695a      	ldr	r2, [r3, #20]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f98:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d103      	bne.n	8002faa <HAL_DMA_Abort+0x62>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d007      	beq.n	8002fba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0208 	bic.w	r2, r2, #8
 8002fb8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 0201 	bic.w	r2, r2, #1
 8002fc8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fca:	e013      	b.n	8002ff4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fcc:	f7ff f91e 	bl	800220c <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b05      	cmp	r3, #5
 8002fd8:	d90c      	bls.n	8002ff4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2220      	movs	r2, #32
 8002fde:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2203      	movs	r2, #3
 8002fe4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e015      	b.n	8003020 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1e4      	bne.n	8002fcc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003006:	223f      	movs	r2, #63	; 0x3f
 8003008:	409a      	lsls	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d004      	beq.n	8003046 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2280      	movs	r2, #128	; 0x80
 8003040:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e00c      	b.n	8003060 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2205      	movs	r2, #5
 800304a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 0201 	bic.w	r2, r2, #1
 800305c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800306c:	b480      	push	{r7}
 800306e:	b089      	sub	sp, #36	; 0x24
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003076:	2300      	movs	r3, #0
 8003078:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800307a:	2300      	movs	r3, #0
 800307c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800307e:	2300      	movs	r3, #0
 8003080:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003082:	2300      	movs	r3, #0
 8003084:	61fb      	str	r3, [r7, #28]
 8003086:	e16b      	b.n	8003360 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003088:	2201      	movs	r2, #1
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	4013      	ands	r3, r2
 800309a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	f040 815a 	bne.w	800335a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f003 0303 	and.w	r3, r3, #3
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d005      	beq.n	80030be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d130      	bne.n	8003120 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	2203      	movs	r2, #3
 80030ca:	fa02 f303 	lsl.w	r3, r2, r3
 80030ce:	43db      	mvns	r3, r3
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	4013      	ands	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030f4:	2201      	movs	r2, #1
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	43db      	mvns	r3, r3
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	4013      	ands	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	091b      	lsrs	r3, r3, #4
 800310a:	f003 0201 	and.w	r2, r3, #1
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4313      	orrs	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f003 0303 	and.w	r3, r3, #3
 8003128:	2b03      	cmp	r3, #3
 800312a:	d017      	beq.n	800315c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	2203      	movs	r2, #3
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	43db      	mvns	r3, r3
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	4013      	ands	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	4313      	orrs	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f003 0303 	and.w	r3, r3, #3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d123      	bne.n	80031b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	08da      	lsrs	r2, r3, #3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	3208      	adds	r2, #8
 8003170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003174:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	220f      	movs	r2, #15
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	43db      	mvns	r3, r3
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	4013      	ands	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	691a      	ldr	r2, [r3, #16]
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	f003 0307 	and.w	r3, r3, #7
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4313      	orrs	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	08da      	lsrs	r2, r3, #3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	3208      	adds	r2, #8
 80031aa:	69b9      	ldr	r1, [r7, #24]
 80031ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	2203      	movs	r2, #3
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	43db      	mvns	r3, r3
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	4013      	ands	r3, r2
 80031c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f003 0203 	and.w	r2, r3, #3
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	4313      	orrs	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 80b4 	beq.w	800335a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031f2:	2300      	movs	r3, #0
 80031f4:	60fb      	str	r3, [r7, #12]
 80031f6:	4b60      	ldr	r3, [pc, #384]	; (8003378 <HAL_GPIO_Init+0x30c>)
 80031f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fa:	4a5f      	ldr	r2, [pc, #380]	; (8003378 <HAL_GPIO_Init+0x30c>)
 80031fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003200:	6453      	str	r3, [r2, #68]	; 0x44
 8003202:	4b5d      	ldr	r3, [pc, #372]	; (8003378 <HAL_GPIO_Init+0x30c>)
 8003204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800320e:	4a5b      	ldr	r2, [pc, #364]	; (800337c <HAL_GPIO_Init+0x310>)
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	089b      	lsrs	r3, r3, #2
 8003214:	3302      	adds	r3, #2
 8003216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800321a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	f003 0303 	and.w	r3, r3, #3
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	220f      	movs	r2, #15
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	43db      	mvns	r3, r3
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	4013      	ands	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a52      	ldr	r2, [pc, #328]	; (8003380 <HAL_GPIO_Init+0x314>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d02b      	beq.n	8003292 <HAL_GPIO_Init+0x226>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a51      	ldr	r2, [pc, #324]	; (8003384 <HAL_GPIO_Init+0x318>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d025      	beq.n	800328e <HAL_GPIO_Init+0x222>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a50      	ldr	r2, [pc, #320]	; (8003388 <HAL_GPIO_Init+0x31c>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d01f      	beq.n	800328a <HAL_GPIO_Init+0x21e>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a4f      	ldr	r2, [pc, #316]	; (800338c <HAL_GPIO_Init+0x320>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d019      	beq.n	8003286 <HAL_GPIO_Init+0x21a>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a4e      	ldr	r2, [pc, #312]	; (8003390 <HAL_GPIO_Init+0x324>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d013      	beq.n	8003282 <HAL_GPIO_Init+0x216>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a4d      	ldr	r2, [pc, #308]	; (8003394 <HAL_GPIO_Init+0x328>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d00d      	beq.n	800327e <HAL_GPIO_Init+0x212>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a4c      	ldr	r2, [pc, #304]	; (8003398 <HAL_GPIO_Init+0x32c>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d007      	beq.n	800327a <HAL_GPIO_Init+0x20e>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a4b      	ldr	r2, [pc, #300]	; (800339c <HAL_GPIO_Init+0x330>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d101      	bne.n	8003276 <HAL_GPIO_Init+0x20a>
 8003272:	2307      	movs	r3, #7
 8003274:	e00e      	b.n	8003294 <HAL_GPIO_Init+0x228>
 8003276:	2308      	movs	r3, #8
 8003278:	e00c      	b.n	8003294 <HAL_GPIO_Init+0x228>
 800327a:	2306      	movs	r3, #6
 800327c:	e00a      	b.n	8003294 <HAL_GPIO_Init+0x228>
 800327e:	2305      	movs	r3, #5
 8003280:	e008      	b.n	8003294 <HAL_GPIO_Init+0x228>
 8003282:	2304      	movs	r3, #4
 8003284:	e006      	b.n	8003294 <HAL_GPIO_Init+0x228>
 8003286:	2303      	movs	r3, #3
 8003288:	e004      	b.n	8003294 <HAL_GPIO_Init+0x228>
 800328a:	2302      	movs	r3, #2
 800328c:	e002      	b.n	8003294 <HAL_GPIO_Init+0x228>
 800328e:	2301      	movs	r3, #1
 8003290:	e000      	b.n	8003294 <HAL_GPIO_Init+0x228>
 8003292:	2300      	movs	r3, #0
 8003294:	69fa      	ldr	r2, [r7, #28]
 8003296:	f002 0203 	and.w	r2, r2, #3
 800329a:	0092      	lsls	r2, r2, #2
 800329c:	4093      	lsls	r3, r2
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032a4:	4935      	ldr	r1, [pc, #212]	; (800337c <HAL_GPIO_Init+0x310>)
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	089b      	lsrs	r3, r3, #2
 80032aa:	3302      	adds	r3, #2
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032b2:	4b3b      	ldr	r3, [pc, #236]	; (80033a0 <HAL_GPIO_Init+0x334>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	43db      	mvns	r3, r3
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	4013      	ands	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032d6:	4a32      	ldr	r2, [pc, #200]	; (80033a0 <HAL_GPIO_Init+0x334>)
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032dc:	4b30      	ldr	r3, [pc, #192]	; (80033a0 <HAL_GPIO_Init+0x334>)
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	43db      	mvns	r3, r3
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	4013      	ands	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d003      	beq.n	8003300 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003300:	4a27      	ldr	r2, [pc, #156]	; (80033a0 <HAL_GPIO_Init+0x334>)
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003306:	4b26      	ldr	r3, [pc, #152]	; (80033a0 <HAL_GPIO_Init+0x334>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	43db      	mvns	r3, r3
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	4013      	ands	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	4313      	orrs	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800332a:	4a1d      	ldr	r2, [pc, #116]	; (80033a0 <HAL_GPIO_Init+0x334>)
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003330:	4b1b      	ldr	r3, [pc, #108]	; (80033a0 <HAL_GPIO_Init+0x334>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	43db      	mvns	r3, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4013      	ands	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	4313      	orrs	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003354:	4a12      	ldr	r2, [pc, #72]	; (80033a0 <HAL_GPIO_Init+0x334>)
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	3301      	adds	r3, #1
 800335e:	61fb      	str	r3, [r7, #28]
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	2b0f      	cmp	r3, #15
 8003364:	f67f ae90 	bls.w	8003088 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003368:	bf00      	nop
 800336a:	bf00      	nop
 800336c:	3724      	adds	r7, #36	; 0x24
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	40023800 	.word	0x40023800
 800337c:	40013800 	.word	0x40013800
 8003380:	40020000 	.word	0x40020000
 8003384:	40020400 	.word	0x40020400
 8003388:	40020800 	.word	0x40020800
 800338c:	40020c00 	.word	0x40020c00
 8003390:	40021000 	.word	0x40021000
 8003394:	40021400 	.word	0x40021400
 8003398:	40021800 	.word	0x40021800
 800339c:	40021c00 	.word	0x40021c00
 80033a0:	40013c00 	.word	0x40013c00

080033a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	460b      	mov	r3, r1
 80033ae:	807b      	strh	r3, [r7, #2]
 80033b0:	4613      	mov	r3, r2
 80033b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033b4:	787b      	ldrb	r3, [r7, #1]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033ba:	887a      	ldrh	r2, [r7, #2]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033c0:	e003      	b.n	80033ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033c2:	887b      	ldrh	r3, [r7, #2]
 80033c4:	041a      	lsls	r2, r3, #16
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	619a      	str	r2, [r3, #24]
}
 80033ca:	bf00      	nop
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
	...

080033d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e267      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d075      	beq.n	80034e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033f6:	4b88      	ldr	r3, [pc, #544]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 030c 	and.w	r3, r3, #12
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d00c      	beq.n	800341c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003402:	4b85      	ldr	r3, [pc, #532]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800340a:	2b08      	cmp	r3, #8
 800340c:	d112      	bne.n	8003434 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800340e:	4b82      	ldr	r3, [pc, #520]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003416:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800341a:	d10b      	bne.n	8003434 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800341c:	4b7e      	ldr	r3, [pc, #504]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d05b      	beq.n	80034e0 <HAL_RCC_OscConfig+0x108>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d157      	bne.n	80034e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e242      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800343c:	d106      	bne.n	800344c <HAL_RCC_OscConfig+0x74>
 800343e:	4b76      	ldr	r3, [pc, #472]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a75      	ldr	r2, [pc, #468]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 8003444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	e01d      	b.n	8003488 <HAL_RCC_OscConfig+0xb0>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003454:	d10c      	bne.n	8003470 <HAL_RCC_OscConfig+0x98>
 8003456:	4b70      	ldr	r3, [pc, #448]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a6f      	ldr	r2, [pc, #444]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 800345c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003460:	6013      	str	r3, [r2, #0]
 8003462:	4b6d      	ldr	r3, [pc, #436]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a6c      	ldr	r2, [pc, #432]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 8003468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800346c:	6013      	str	r3, [r2, #0]
 800346e:	e00b      	b.n	8003488 <HAL_RCC_OscConfig+0xb0>
 8003470:	4b69      	ldr	r3, [pc, #420]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a68      	ldr	r2, [pc, #416]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 8003476:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800347a:	6013      	str	r3, [r2, #0]
 800347c:	4b66      	ldr	r3, [pc, #408]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a65      	ldr	r2, [pc, #404]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 8003482:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003486:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d013      	beq.n	80034b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003490:	f7fe febc 	bl	800220c <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003498:	f7fe feb8 	bl	800220c <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b64      	cmp	r3, #100	; 0x64
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e207      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034aa:	4b5b      	ldr	r3, [pc, #364]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0f0      	beq.n	8003498 <HAL_RCC_OscConfig+0xc0>
 80034b6:	e014      	b.n	80034e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b8:	f7fe fea8 	bl	800220c <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034c0:	f7fe fea4 	bl	800220c <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b64      	cmp	r3, #100	; 0x64
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e1f3      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034d2:	4b51      	ldr	r3, [pc, #324]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1f0      	bne.n	80034c0 <HAL_RCC_OscConfig+0xe8>
 80034de:	e000      	b.n	80034e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d063      	beq.n	80035b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034ee:	4b4a      	ldr	r3, [pc, #296]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 030c 	and.w	r3, r3, #12
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00b      	beq.n	8003512 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034fa:	4b47      	ldr	r3, [pc, #284]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003502:	2b08      	cmp	r3, #8
 8003504:	d11c      	bne.n	8003540 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003506:	4b44      	ldr	r3, [pc, #272]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d116      	bne.n	8003540 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003512:	4b41      	ldr	r3, [pc, #260]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d005      	beq.n	800352a <HAL_RCC_OscConfig+0x152>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d001      	beq.n	800352a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e1c7      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800352a:	4b3b      	ldr	r3, [pc, #236]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	4937      	ldr	r1, [pc, #220]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 800353a:	4313      	orrs	r3, r2
 800353c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800353e:	e03a      	b.n	80035b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d020      	beq.n	800358a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003548:	4b34      	ldr	r3, [pc, #208]	; (800361c <HAL_RCC_OscConfig+0x244>)
 800354a:	2201      	movs	r2, #1
 800354c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354e:	f7fe fe5d 	bl	800220c <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003554:	e008      	b.n	8003568 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003556:	f7fe fe59 	bl	800220c <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e1a8      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003568:	4b2b      	ldr	r3, [pc, #172]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0f0      	beq.n	8003556 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003574:	4b28      	ldr	r3, [pc, #160]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	4925      	ldr	r1, [pc, #148]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 8003584:	4313      	orrs	r3, r2
 8003586:	600b      	str	r3, [r1, #0]
 8003588:	e015      	b.n	80035b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800358a:	4b24      	ldr	r3, [pc, #144]	; (800361c <HAL_RCC_OscConfig+0x244>)
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003590:	f7fe fe3c 	bl	800220c <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003598:	f7fe fe38 	bl	800220c <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e187      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035aa:	4b1b      	ldr	r3, [pc, #108]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1f0      	bne.n	8003598 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0308 	and.w	r3, r3, #8
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d036      	beq.n	8003630 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d016      	beq.n	80035f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ca:	4b15      	ldr	r3, [pc, #84]	; (8003620 <HAL_RCC_OscConfig+0x248>)
 80035cc:	2201      	movs	r2, #1
 80035ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d0:	f7fe fe1c 	bl	800220c <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035d8:	f7fe fe18 	bl	800220c <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e167      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ea:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 80035ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0f0      	beq.n	80035d8 <HAL_RCC_OscConfig+0x200>
 80035f6:	e01b      	b.n	8003630 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035f8:	4b09      	ldr	r3, [pc, #36]	; (8003620 <HAL_RCC_OscConfig+0x248>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035fe:	f7fe fe05 	bl	800220c <HAL_GetTick>
 8003602:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003604:	e00e      	b.n	8003624 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003606:	f7fe fe01 	bl	800220c <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d907      	bls.n	8003624 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e150      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
 8003618:	40023800 	.word	0x40023800
 800361c:	42470000 	.word	0x42470000
 8003620:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003624:	4b88      	ldr	r3, [pc, #544]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 8003626:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1ea      	bne.n	8003606 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 8097 	beq.w	800376c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800363e:	2300      	movs	r3, #0
 8003640:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003642:	4b81      	ldr	r3, [pc, #516]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10f      	bne.n	800366e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800364e:	2300      	movs	r3, #0
 8003650:	60bb      	str	r3, [r7, #8]
 8003652:	4b7d      	ldr	r3, [pc, #500]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	4a7c      	ldr	r2, [pc, #496]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 8003658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800365c:	6413      	str	r3, [r2, #64]	; 0x40
 800365e:	4b7a      	ldr	r3, [pc, #488]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003666:	60bb      	str	r3, [r7, #8]
 8003668:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800366a:	2301      	movs	r3, #1
 800366c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800366e:	4b77      	ldr	r3, [pc, #476]	; (800384c <HAL_RCC_OscConfig+0x474>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003676:	2b00      	cmp	r3, #0
 8003678:	d118      	bne.n	80036ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800367a:	4b74      	ldr	r3, [pc, #464]	; (800384c <HAL_RCC_OscConfig+0x474>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a73      	ldr	r2, [pc, #460]	; (800384c <HAL_RCC_OscConfig+0x474>)
 8003680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003684:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003686:	f7fe fdc1 	bl	800220c <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800368e:	f7fe fdbd 	bl	800220c <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e10c      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a0:	4b6a      	ldr	r3, [pc, #424]	; (800384c <HAL_RCC_OscConfig+0x474>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0f0      	beq.n	800368e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d106      	bne.n	80036c2 <HAL_RCC_OscConfig+0x2ea>
 80036b4:	4b64      	ldr	r3, [pc, #400]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 80036b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b8:	4a63      	ldr	r2, [pc, #396]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 80036ba:	f043 0301 	orr.w	r3, r3, #1
 80036be:	6713      	str	r3, [r2, #112]	; 0x70
 80036c0:	e01c      	b.n	80036fc <HAL_RCC_OscConfig+0x324>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	2b05      	cmp	r3, #5
 80036c8:	d10c      	bne.n	80036e4 <HAL_RCC_OscConfig+0x30c>
 80036ca:	4b5f      	ldr	r3, [pc, #380]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 80036cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ce:	4a5e      	ldr	r2, [pc, #376]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 80036d0:	f043 0304 	orr.w	r3, r3, #4
 80036d4:	6713      	str	r3, [r2, #112]	; 0x70
 80036d6:	4b5c      	ldr	r3, [pc, #368]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 80036d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036da:	4a5b      	ldr	r2, [pc, #364]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 80036dc:	f043 0301 	orr.w	r3, r3, #1
 80036e0:	6713      	str	r3, [r2, #112]	; 0x70
 80036e2:	e00b      	b.n	80036fc <HAL_RCC_OscConfig+0x324>
 80036e4:	4b58      	ldr	r3, [pc, #352]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 80036e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e8:	4a57      	ldr	r2, [pc, #348]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 80036ea:	f023 0301 	bic.w	r3, r3, #1
 80036ee:	6713      	str	r3, [r2, #112]	; 0x70
 80036f0:	4b55      	ldr	r3, [pc, #340]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 80036f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f4:	4a54      	ldr	r2, [pc, #336]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 80036f6:	f023 0304 	bic.w	r3, r3, #4
 80036fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d015      	beq.n	8003730 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003704:	f7fe fd82 	bl	800220c <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800370a:	e00a      	b.n	8003722 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800370c:	f7fe fd7e 	bl	800220c <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	f241 3288 	movw	r2, #5000	; 0x1388
 800371a:	4293      	cmp	r3, r2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e0cb      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003722:	4b49      	ldr	r3, [pc, #292]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 8003724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0ee      	beq.n	800370c <HAL_RCC_OscConfig+0x334>
 800372e:	e014      	b.n	800375a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003730:	f7fe fd6c 	bl	800220c <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003736:	e00a      	b.n	800374e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003738:	f7fe fd68 	bl	800220c <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	f241 3288 	movw	r2, #5000	; 0x1388
 8003746:	4293      	cmp	r3, r2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e0b5      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800374e:	4b3e      	ldr	r3, [pc, #248]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 8003750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1ee      	bne.n	8003738 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800375a:	7dfb      	ldrb	r3, [r7, #23]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d105      	bne.n	800376c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003760:	4b39      	ldr	r3, [pc, #228]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 8003762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003764:	4a38      	ldr	r2, [pc, #224]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 8003766:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800376a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 80a1 	beq.w	80038b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003776:	4b34      	ldr	r3, [pc, #208]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 030c 	and.w	r3, r3, #12
 800377e:	2b08      	cmp	r3, #8
 8003780:	d05c      	beq.n	800383c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	2b02      	cmp	r3, #2
 8003788:	d141      	bne.n	800380e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800378a:	4b31      	ldr	r3, [pc, #196]	; (8003850 <HAL_RCC_OscConfig+0x478>)
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003790:	f7fe fd3c 	bl	800220c <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003798:	f7fe fd38 	bl	800220c <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e087      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037aa:	4b27      	ldr	r3, [pc, #156]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1f0      	bne.n	8003798 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	69da      	ldr	r2, [r3, #28]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	019b      	lsls	r3, r3, #6
 80037c6:	431a      	orrs	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037cc:	085b      	lsrs	r3, r3, #1
 80037ce:	3b01      	subs	r3, #1
 80037d0:	041b      	lsls	r3, r3, #16
 80037d2:	431a      	orrs	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d8:	061b      	lsls	r3, r3, #24
 80037da:	491b      	ldr	r1, [pc, #108]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037e0:	4b1b      	ldr	r3, [pc, #108]	; (8003850 <HAL_RCC_OscConfig+0x478>)
 80037e2:	2201      	movs	r2, #1
 80037e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e6:	f7fe fd11 	bl	800220c <HAL_GetTick>
 80037ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ec:	e008      	b.n	8003800 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ee:	f7fe fd0d 	bl	800220c <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e05c      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003800:	4b11      	ldr	r3, [pc, #68]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0f0      	beq.n	80037ee <HAL_RCC_OscConfig+0x416>
 800380c:	e054      	b.n	80038b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800380e:	4b10      	ldr	r3, [pc, #64]	; (8003850 <HAL_RCC_OscConfig+0x478>)
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003814:	f7fe fcfa 	bl	800220c <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800381c:	f7fe fcf6 	bl	800220c <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e045      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800382e:	4b06      	ldr	r3, [pc, #24]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1f0      	bne.n	800381c <HAL_RCC_OscConfig+0x444>
 800383a:	e03d      	b.n	80038b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d107      	bne.n	8003854 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e038      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
 8003848:	40023800 	.word	0x40023800
 800384c:	40007000 	.word	0x40007000
 8003850:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003854:	4b1b      	ldr	r3, [pc, #108]	; (80038c4 <HAL_RCC_OscConfig+0x4ec>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d028      	beq.n	80038b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800386c:	429a      	cmp	r2, r3
 800386e:	d121      	bne.n	80038b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800387a:	429a      	cmp	r2, r3
 800387c:	d11a      	bne.n	80038b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003884:	4013      	ands	r3, r2
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800388a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800388c:	4293      	cmp	r3, r2
 800388e:	d111      	bne.n	80038b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389a:	085b      	lsrs	r3, r3, #1
 800389c:	3b01      	subs	r3, #1
 800389e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d107      	bne.n	80038b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d001      	beq.n	80038b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e000      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3718      	adds	r7, #24
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	40023800 	.word	0x40023800

080038c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d101      	bne.n	80038dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e0cc      	b.n	8003a76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038dc:	4b68      	ldr	r3, [pc, #416]	; (8003a80 <HAL_RCC_ClockConfig+0x1b8>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d90c      	bls.n	8003904 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ea:	4b65      	ldr	r3, [pc, #404]	; (8003a80 <HAL_RCC_ClockConfig+0x1b8>)
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	b2d2      	uxtb	r2, r2
 80038f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f2:	4b63      	ldr	r3, [pc, #396]	; (8003a80 <HAL_RCC_ClockConfig+0x1b8>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d001      	beq.n	8003904 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e0b8      	b.n	8003a76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d020      	beq.n	8003952 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	d005      	beq.n	8003928 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800391c:	4b59      	ldr	r3, [pc, #356]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	4a58      	ldr	r2, [pc, #352]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 8003922:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003926:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0308 	and.w	r3, r3, #8
 8003930:	2b00      	cmp	r3, #0
 8003932:	d005      	beq.n	8003940 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003934:	4b53      	ldr	r3, [pc, #332]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	4a52      	ldr	r2, [pc, #328]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 800393a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800393e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003940:	4b50      	ldr	r3, [pc, #320]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	494d      	ldr	r1, [pc, #308]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	4313      	orrs	r3, r2
 8003950:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	d044      	beq.n	80039e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d107      	bne.n	8003976 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003966:	4b47      	ldr	r3, [pc, #284]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d119      	bne.n	80039a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e07f      	b.n	8003a76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	2b02      	cmp	r3, #2
 800397c:	d003      	beq.n	8003986 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003982:	2b03      	cmp	r3, #3
 8003984:	d107      	bne.n	8003996 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003986:	4b3f      	ldr	r3, [pc, #252]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d109      	bne.n	80039a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e06f      	b.n	8003a76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003996:	4b3b      	ldr	r3, [pc, #236]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e067      	b.n	8003a76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039a6:	4b37      	ldr	r3, [pc, #220]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f023 0203 	bic.w	r2, r3, #3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	4934      	ldr	r1, [pc, #208]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039b8:	f7fe fc28 	bl	800220c <HAL_GetTick>
 80039bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039be:	e00a      	b.n	80039d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039c0:	f7fe fc24 	bl	800220c <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e04f      	b.n	8003a76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039d6:	4b2b      	ldr	r3, [pc, #172]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 020c 	and.w	r2, r3, #12
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d1eb      	bne.n	80039c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039e8:	4b25      	ldr	r3, [pc, #148]	; (8003a80 <HAL_RCC_ClockConfig+0x1b8>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d20c      	bcs.n	8003a10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039f6:	4b22      	ldr	r3, [pc, #136]	; (8003a80 <HAL_RCC_ClockConfig+0x1b8>)
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	b2d2      	uxtb	r2, r2
 80039fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039fe:	4b20      	ldr	r3, [pc, #128]	; (8003a80 <HAL_RCC_ClockConfig+0x1b8>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0307 	and.w	r3, r3, #7
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d001      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e032      	b.n	8003a76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0304 	and.w	r3, r3, #4
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d008      	beq.n	8003a2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a1c:	4b19      	ldr	r3, [pc, #100]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	4916      	ldr	r1, [pc, #88]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0308 	and.w	r3, r3, #8
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d009      	beq.n	8003a4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a3a:	4b12      	ldr	r3, [pc, #72]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	490e      	ldr	r1, [pc, #56]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a4e:	f000 f821 	bl	8003a94 <HAL_RCC_GetSysClockFreq>
 8003a52:	4602      	mov	r2, r0
 8003a54:	4b0b      	ldr	r3, [pc, #44]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	091b      	lsrs	r3, r3, #4
 8003a5a:	f003 030f 	and.w	r3, r3, #15
 8003a5e:	490a      	ldr	r1, [pc, #40]	; (8003a88 <HAL_RCC_ClockConfig+0x1c0>)
 8003a60:	5ccb      	ldrb	r3, [r1, r3]
 8003a62:	fa22 f303 	lsr.w	r3, r2, r3
 8003a66:	4a09      	ldr	r2, [pc, #36]	; (8003a8c <HAL_RCC_ClockConfig+0x1c4>)
 8003a68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a6a:	4b09      	ldr	r3, [pc, #36]	; (8003a90 <HAL_RCC_ClockConfig+0x1c8>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fe fa8a 	bl	8001f88 <HAL_InitTick>

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	40023c00 	.word	0x40023c00
 8003a84:	40023800 	.word	0x40023800
 8003a88:	08009258 	.word	0x08009258
 8003a8c:	20000000 	.word	0x20000000
 8003a90:	20000004 	.word	0x20000004

08003a94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a98:	b094      	sub	sp, #80	; 0x50
 8003a9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	647b      	str	r3, [r7, #68]	; 0x44
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003aac:	4b79      	ldr	r3, [pc, #484]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f003 030c 	and.w	r3, r3, #12
 8003ab4:	2b08      	cmp	r3, #8
 8003ab6:	d00d      	beq.n	8003ad4 <HAL_RCC_GetSysClockFreq+0x40>
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	f200 80e1 	bhi.w	8003c80 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d002      	beq.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	d003      	beq.n	8003ace <HAL_RCC_GetSysClockFreq+0x3a>
 8003ac6:	e0db      	b.n	8003c80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ac8:	4b73      	ldr	r3, [pc, #460]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x204>)
 8003aca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003acc:	e0db      	b.n	8003c86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ace:	4b73      	ldr	r3, [pc, #460]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x208>)
 8003ad0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ad2:	e0d8      	b.n	8003c86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ad4:	4b6f      	ldr	r3, [pc, #444]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003adc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ade:	4b6d      	ldr	r3, [pc, #436]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d063      	beq.n	8003bb2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aea:	4b6a      	ldr	r3, [pc, #424]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	099b      	lsrs	r3, r3, #6
 8003af0:	2200      	movs	r2, #0
 8003af2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003af4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003afc:	633b      	str	r3, [r7, #48]	; 0x30
 8003afe:	2300      	movs	r3, #0
 8003b00:	637b      	str	r3, [r7, #52]	; 0x34
 8003b02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b06:	4622      	mov	r2, r4
 8003b08:	462b      	mov	r3, r5
 8003b0a:	f04f 0000 	mov.w	r0, #0
 8003b0e:	f04f 0100 	mov.w	r1, #0
 8003b12:	0159      	lsls	r1, r3, #5
 8003b14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b18:	0150      	lsls	r0, r2, #5
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	4621      	mov	r1, r4
 8003b20:	1a51      	subs	r1, r2, r1
 8003b22:	6139      	str	r1, [r7, #16]
 8003b24:	4629      	mov	r1, r5
 8003b26:	eb63 0301 	sbc.w	r3, r3, r1
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	f04f 0200 	mov.w	r2, #0
 8003b30:	f04f 0300 	mov.w	r3, #0
 8003b34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b38:	4659      	mov	r1, fp
 8003b3a:	018b      	lsls	r3, r1, #6
 8003b3c:	4651      	mov	r1, sl
 8003b3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b42:	4651      	mov	r1, sl
 8003b44:	018a      	lsls	r2, r1, #6
 8003b46:	4651      	mov	r1, sl
 8003b48:	ebb2 0801 	subs.w	r8, r2, r1
 8003b4c:	4659      	mov	r1, fp
 8003b4e:	eb63 0901 	sbc.w	r9, r3, r1
 8003b52:	f04f 0200 	mov.w	r2, #0
 8003b56:	f04f 0300 	mov.w	r3, #0
 8003b5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b66:	4690      	mov	r8, r2
 8003b68:	4699      	mov	r9, r3
 8003b6a:	4623      	mov	r3, r4
 8003b6c:	eb18 0303 	adds.w	r3, r8, r3
 8003b70:	60bb      	str	r3, [r7, #8]
 8003b72:	462b      	mov	r3, r5
 8003b74:	eb49 0303 	adc.w	r3, r9, r3
 8003b78:	60fb      	str	r3, [r7, #12]
 8003b7a:	f04f 0200 	mov.w	r2, #0
 8003b7e:	f04f 0300 	mov.w	r3, #0
 8003b82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b86:	4629      	mov	r1, r5
 8003b88:	024b      	lsls	r3, r1, #9
 8003b8a:	4621      	mov	r1, r4
 8003b8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b90:	4621      	mov	r1, r4
 8003b92:	024a      	lsls	r2, r1, #9
 8003b94:	4610      	mov	r0, r2
 8003b96:	4619      	mov	r1, r3
 8003b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ba0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ba4:	f7fc fd40 	bl	8000628 <__aeabi_uldivmod>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	460b      	mov	r3, r1
 8003bac:	4613      	mov	r3, r2
 8003bae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bb0:	e058      	b.n	8003c64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bb2:	4b38      	ldr	r3, [pc, #224]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	099b      	lsrs	r3, r3, #6
 8003bb8:	2200      	movs	r2, #0
 8003bba:	4618      	mov	r0, r3
 8003bbc:	4611      	mov	r1, r2
 8003bbe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003bc2:	623b      	str	r3, [r7, #32]
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003bcc:	4642      	mov	r2, r8
 8003bce:	464b      	mov	r3, r9
 8003bd0:	f04f 0000 	mov.w	r0, #0
 8003bd4:	f04f 0100 	mov.w	r1, #0
 8003bd8:	0159      	lsls	r1, r3, #5
 8003bda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bde:	0150      	lsls	r0, r2, #5
 8003be0:	4602      	mov	r2, r0
 8003be2:	460b      	mov	r3, r1
 8003be4:	4641      	mov	r1, r8
 8003be6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003bea:	4649      	mov	r1, r9
 8003bec:	eb63 0b01 	sbc.w	fp, r3, r1
 8003bf0:	f04f 0200 	mov.w	r2, #0
 8003bf4:	f04f 0300 	mov.w	r3, #0
 8003bf8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003bfc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c04:	ebb2 040a 	subs.w	r4, r2, sl
 8003c08:	eb63 050b 	sbc.w	r5, r3, fp
 8003c0c:	f04f 0200 	mov.w	r2, #0
 8003c10:	f04f 0300 	mov.w	r3, #0
 8003c14:	00eb      	lsls	r3, r5, #3
 8003c16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c1a:	00e2      	lsls	r2, r4, #3
 8003c1c:	4614      	mov	r4, r2
 8003c1e:	461d      	mov	r5, r3
 8003c20:	4643      	mov	r3, r8
 8003c22:	18e3      	adds	r3, r4, r3
 8003c24:	603b      	str	r3, [r7, #0]
 8003c26:	464b      	mov	r3, r9
 8003c28:	eb45 0303 	adc.w	r3, r5, r3
 8003c2c:	607b      	str	r3, [r7, #4]
 8003c2e:	f04f 0200 	mov.w	r2, #0
 8003c32:	f04f 0300 	mov.w	r3, #0
 8003c36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c3a:	4629      	mov	r1, r5
 8003c3c:	028b      	lsls	r3, r1, #10
 8003c3e:	4621      	mov	r1, r4
 8003c40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c44:	4621      	mov	r1, r4
 8003c46:	028a      	lsls	r2, r1, #10
 8003c48:	4610      	mov	r0, r2
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c4e:	2200      	movs	r2, #0
 8003c50:	61bb      	str	r3, [r7, #24]
 8003c52:	61fa      	str	r2, [r7, #28]
 8003c54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c58:	f7fc fce6 	bl	8000628 <__aeabi_uldivmod>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	460b      	mov	r3, r1
 8003c60:	4613      	mov	r3, r2
 8003c62:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c64:	4b0b      	ldr	r3, [pc, #44]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	0c1b      	lsrs	r3, r3, #16
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	3301      	adds	r3, #1
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003c74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c7e:	e002      	b.n	8003c86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c80:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c82:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3750      	adds	r7, #80	; 0x50
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c92:	bf00      	nop
 8003c94:	40023800 	.word	0x40023800
 8003c98:	00f42400 	.word	0x00f42400
 8003c9c:	007a1200 	.word	0x007a1200

08003ca0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ca4:	4b03      	ldr	r3, [pc, #12]	; (8003cb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	20000000 	.word	0x20000000

08003cb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cbc:	f7ff fff0 	bl	8003ca0 <HAL_RCC_GetHCLKFreq>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	4b05      	ldr	r3, [pc, #20]	; (8003cd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	0a9b      	lsrs	r3, r3, #10
 8003cc8:	f003 0307 	and.w	r3, r3, #7
 8003ccc:	4903      	ldr	r1, [pc, #12]	; (8003cdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cce:	5ccb      	ldrb	r3, [r1, r3]
 8003cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	08009268 	.word	0x08009268

08003ce0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ce4:	f7ff ffdc 	bl	8003ca0 <HAL_RCC_GetHCLKFreq>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	4b05      	ldr	r3, [pc, #20]	; (8003d00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	0b5b      	lsrs	r3, r3, #13
 8003cf0:	f003 0307 	and.w	r3, r3, #7
 8003cf4:	4903      	ldr	r1, [pc, #12]	; (8003d04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cf6:	5ccb      	ldrb	r3, [r1, r3]
 8003cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	40023800 	.word	0x40023800
 8003d04:	08009268 	.word	0x08009268

08003d08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	220f      	movs	r2, #15
 8003d16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003d18:	4b12      	ldr	r3, [pc, #72]	; (8003d64 <HAL_RCC_GetClockConfig+0x5c>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f003 0203 	and.w	r2, r3, #3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003d24:	4b0f      	ldr	r3, [pc, #60]	; (8003d64 <HAL_RCC_GetClockConfig+0x5c>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003d30:	4b0c      	ldr	r3, [pc, #48]	; (8003d64 <HAL_RCC_GetClockConfig+0x5c>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003d3c:	4b09      	ldr	r3, [pc, #36]	; (8003d64 <HAL_RCC_GetClockConfig+0x5c>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	08db      	lsrs	r3, r3, #3
 8003d42:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003d4a:	4b07      	ldr	r3, [pc, #28]	; (8003d68 <HAL_RCC_GetClockConfig+0x60>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0207 	and.w	r2, r3, #7
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	601a      	str	r2, [r3, #0]
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	40023800 	.word	0x40023800
 8003d68:	40023c00 	.word	0x40023c00

08003d6c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d74:	2300      	movs	r3, #0
 8003d76:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d105      	bne.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d035      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d94:	4b62      	ldr	r3, [pc, #392]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d9a:	f7fe fa37 	bl	800220c <HAL_GetTick>
 8003d9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003da0:	e008      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003da2:	f7fe fa33 	bl	800220c <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d901      	bls.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e0b0      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003db4:	4b5b      	ldr	r3, [pc, #364]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1f0      	bne.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	019a      	lsls	r2, r3, #6
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	071b      	lsls	r3, r3, #28
 8003dcc:	4955      	ldr	r1, [pc, #340]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003dd4:	4b52      	ldr	r3, [pc, #328]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003dda:	f7fe fa17 	bl	800220c <HAL_GetTick>
 8003dde:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003de0:	e008      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003de2:	f7fe fa13 	bl	800220c <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e090      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003df4:	4b4b      	ldr	r3, [pc, #300]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0f0      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f000 8083 	beq.w	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60fb      	str	r3, [r7, #12]
 8003e12:	4b44      	ldr	r3, [pc, #272]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	4a43      	ldr	r2, [pc, #268]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e1e:	4b41      	ldr	r3, [pc, #260]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003e2a:	4b3f      	ldr	r3, [pc, #252]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a3e      	ldr	r2, [pc, #248]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e34:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e36:	f7fe f9e9 	bl	800220c <HAL_GetTick>
 8003e3a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e3c:	e008      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003e3e:	f7fe f9e5 	bl	800220c <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e062      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e50:	4b35      	ldr	r3, [pc, #212]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d0f0      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e5c:	4b31      	ldr	r3, [pc, #196]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e64:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d02f      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d028      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e7a:	4b2a      	ldr	r3, [pc, #168]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e82:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e84:	4b29      	ldr	r3, [pc, #164]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003e86:	2201      	movs	r2, #1
 8003e88:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e8a:	4b28      	ldr	r3, [pc, #160]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003e90:	4a24      	ldr	r2, [pc, #144]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e96:	4b23      	ldr	r3, [pc, #140]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d114      	bne.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003ea2:	f7fe f9b3 	bl	800220c <HAL_GetTick>
 8003ea6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ea8:	e00a      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eaa:	f7fe f9af 	bl	800220c <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e02a      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ec0:	4b18      	ldr	r3, [pc, #96]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d0ee      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ed4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ed8:	d10d      	bne.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003eda:	4b12      	ldr	r3, [pc, #72]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eee:	490d      	ldr	r1, [pc, #52]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	608b      	str	r3, [r1, #8]
 8003ef4:	e005      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003ef6:	4b0b      	ldr	r3, [pc, #44]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	4a0a      	ldr	r2, [pc, #40]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003efc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f00:	6093      	str	r3, [r2, #8]
 8003f02:	4b08      	ldr	r3, [pc, #32]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f0e:	4905      	ldr	r1, [pc, #20]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	42470068 	.word	0x42470068
 8003f24:	40023800 	.word	0x40023800
 8003f28:	40007000 	.word	0x40007000
 8003f2c:	42470e40 	.word	0x42470e40

08003f30 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e066      	b.n	8004014 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	7f5b      	ldrb	r3, [r3, #29]
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d105      	bne.n	8003f5c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7fd ff9c 	bl	8001e94 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2202      	movs	r2, #2
 8003f60:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	22ca      	movs	r2, #202	; 0xca
 8003f68:	625a      	str	r2, [r3, #36]	; 0x24
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2253      	movs	r2, #83	; 0x53
 8003f70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f87a 	bl	800406c <RTC_EnterInitMode>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d12c      	bne.n	8003fdc <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	6812      	ldr	r2, [r2, #0]
 8003f8c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003f90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f94:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	6899      	ldr	r1, [r3, #8]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	431a      	orrs	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	68d2      	ldr	r2, [r2, #12]
 8003fbc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6919      	ldr	r1, [r3, #16]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	041a      	lsls	r2, r3, #16
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f881 	bl	80040da <RTC_ExitInitMode>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003fdc:	7bfb      	ldrb	r3, [r7, #15]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d113      	bne.n	800400a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ff0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	699a      	ldr	r2, [r3, #24]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	22ff      	movs	r2, #255	; 0xff
 8004010:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8004012:	7bfb      	ldrb	r3, [r7, #15]
}
 8004014:	4618      	mov	r0, r3
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004024:	2300      	movs	r3, #0
 8004026:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68da      	ldr	r2, [r3, #12]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004036:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004038:	f7fe f8e8 	bl	800220c <HAL_GetTick>
 800403c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800403e:	e009      	b.n	8004054 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004040:	f7fe f8e4 	bl	800220c <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800404e:	d901      	bls.n	8004054 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e007      	b.n	8004064 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	f003 0320 	and.w	r3, r3, #32
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0ee      	beq.n	8004040 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004078:	2300      	movs	r3, #0
 800407a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004086:	2b00      	cmp	r3, #0
 8004088:	d122      	bne.n	80040d0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68da      	ldr	r2, [r3, #12]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004098:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800409a:	f7fe f8b7 	bl	800220c <HAL_GetTick>
 800409e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80040a0:	e00c      	b.n	80040bc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80040a2:	f7fe f8b3 	bl	800220c <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040b0:	d904      	bls.n	80040bc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2204      	movs	r2, #4
 80040b6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d102      	bne.n	80040d0 <RTC_EnterInitMode+0x64>
 80040ca:	7bfb      	ldrb	r3, [r7, #15]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d1e8      	bne.n	80040a2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80040d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b084      	sub	sp, #16
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040e2:	2300      	movs	r3, #0
 80040e4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68da      	ldr	r2, [r3, #12]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040f4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f003 0320 	and.w	r3, r3, #32
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10a      	bne.n	800411a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f7ff ff89 	bl	800401c <HAL_RTC_WaitForSynchro>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d004      	beq.n	800411a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2204      	movs	r2, #4
 8004114:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800411a:	7bfb      	ldrb	r3, [r7, #15]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d101      	bne.n	8004136 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e041      	b.n	80041ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d106      	bne.n	8004150 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 f839 	bl	80041c2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2202      	movs	r2, #2
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	3304      	adds	r3, #4
 8004160:	4619      	mov	r1, r3
 8004162:	4610      	mov	r0, r2
 8004164:	f000 f9d8 	bl	8004518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b083      	sub	sp, #12
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
	...

080041d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d001      	beq.n	80041f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e04e      	b.n	800428e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2202      	movs	r2, #2
 80041f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68da      	ldr	r2, [r3, #12]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f042 0201 	orr.w	r2, r2, #1
 8004206:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a23      	ldr	r2, [pc, #140]	; (800429c <HAL_TIM_Base_Start_IT+0xc4>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d022      	beq.n	8004258 <HAL_TIM_Base_Start_IT+0x80>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800421a:	d01d      	beq.n	8004258 <HAL_TIM_Base_Start_IT+0x80>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a1f      	ldr	r2, [pc, #124]	; (80042a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d018      	beq.n	8004258 <HAL_TIM_Base_Start_IT+0x80>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a1e      	ldr	r2, [pc, #120]	; (80042a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d013      	beq.n	8004258 <HAL_TIM_Base_Start_IT+0x80>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a1c      	ldr	r2, [pc, #112]	; (80042a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d00e      	beq.n	8004258 <HAL_TIM_Base_Start_IT+0x80>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a1b      	ldr	r2, [pc, #108]	; (80042ac <HAL_TIM_Base_Start_IT+0xd4>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d009      	beq.n	8004258 <HAL_TIM_Base_Start_IT+0x80>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a19      	ldr	r2, [pc, #100]	; (80042b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d004      	beq.n	8004258 <HAL_TIM_Base_Start_IT+0x80>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a18      	ldr	r2, [pc, #96]	; (80042b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d111      	bne.n	800427c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f003 0307 	and.w	r3, r3, #7
 8004262:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2b06      	cmp	r3, #6
 8004268:	d010      	beq.n	800428c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f042 0201 	orr.w	r2, r2, #1
 8004278:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800427a:	e007      	b.n	800428c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f042 0201 	orr.w	r2, r2, #1
 800428a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	40010000 	.word	0x40010000
 80042a0:	40000400 	.word	0x40000400
 80042a4:	40000800 	.word	0x40000800
 80042a8:	40000c00 	.word	0x40000c00
 80042ac:	40010400 	.word	0x40010400
 80042b0:	40014000 	.word	0x40014000
 80042b4:	40001800 	.word	0x40001800

080042b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d122      	bne.n	8004314 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d11b      	bne.n	8004314 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f06f 0202 	mvn.w	r2, #2
 80042e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	f003 0303 	and.w	r3, r3, #3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f8ee 	bl	80044dc <HAL_TIM_IC_CaptureCallback>
 8004300:	e005      	b.n	800430e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f8e0 	bl	80044c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 f8f1 	bl	80044f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	f003 0304 	and.w	r3, r3, #4
 800431e:	2b04      	cmp	r3, #4
 8004320:	d122      	bne.n	8004368 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f003 0304 	and.w	r3, r3, #4
 800432c:	2b04      	cmp	r3, #4
 800432e:	d11b      	bne.n	8004368 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f06f 0204 	mvn.w	r2, #4
 8004338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2202      	movs	r2, #2
 800433e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800434a:	2b00      	cmp	r3, #0
 800434c:	d003      	beq.n	8004356 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f8c4 	bl	80044dc <HAL_TIM_IC_CaptureCallback>
 8004354:	e005      	b.n	8004362 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f8b6 	bl	80044c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f8c7 	bl	80044f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	f003 0308 	and.w	r3, r3, #8
 8004372:	2b08      	cmp	r3, #8
 8004374:	d122      	bne.n	80043bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	f003 0308 	and.w	r3, r3, #8
 8004380:	2b08      	cmp	r3, #8
 8004382:	d11b      	bne.n	80043bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f06f 0208 	mvn.w	r2, #8
 800438c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2204      	movs	r2, #4
 8004392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	f003 0303 	and.w	r3, r3, #3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f89a 	bl	80044dc <HAL_TIM_IC_CaptureCallback>
 80043a8:	e005      	b.n	80043b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f88c 	bl	80044c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 f89d 	bl	80044f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	f003 0310 	and.w	r3, r3, #16
 80043c6:	2b10      	cmp	r3, #16
 80043c8:	d122      	bne.n	8004410 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f003 0310 	and.w	r3, r3, #16
 80043d4:	2b10      	cmp	r3, #16
 80043d6:	d11b      	bne.n	8004410 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f06f 0210 	mvn.w	r2, #16
 80043e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2208      	movs	r2, #8
 80043e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f870 	bl	80044dc <HAL_TIM_IC_CaptureCallback>
 80043fc:	e005      	b.n	800440a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f862 	bl	80044c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 f873 	bl	80044f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b01      	cmp	r3, #1
 800441c:	d10e      	bne.n	800443c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	2b01      	cmp	r3, #1
 800442a:	d107      	bne.n	800443c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f06f 0201 	mvn.w	r2, #1
 8004434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7fd fbca 	bl	8001bd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004446:	2b80      	cmp	r3, #128	; 0x80
 8004448:	d10e      	bne.n	8004468 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004454:	2b80      	cmp	r3, #128	; 0x80
 8004456:	d107      	bne.n	8004468 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f902 	bl	800466c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004472:	2b40      	cmp	r3, #64	; 0x40
 8004474:	d10e      	bne.n	8004494 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004480:	2b40      	cmp	r3, #64	; 0x40
 8004482:	d107      	bne.n	8004494 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800448c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f838 	bl	8004504 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	f003 0320 	and.w	r3, r3, #32
 800449e:	2b20      	cmp	r3, #32
 80044a0:	d10e      	bne.n	80044c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	f003 0320 	and.w	r3, r3, #32
 80044ac:	2b20      	cmp	r3, #32
 80044ae:	d107      	bne.n	80044c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f06f 0220 	mvn.w	r2, #32
 80044b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f8cc 	bl	8004658 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044c0:	bf00      	nop
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a40      	ldr	r2, [pc, #256]	; (800462c <TIM_Base_SetConfig+0x114>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d013      	beq.n	8004558 <TIM_Base_SetConfig+0x40>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004536:	d00f      	beq.n	8004558 <TIM_Base_SetConfig+0x40>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a3d      	ldr	r2, [pc, #244]	; (8004630 <TIM_Base_SetConfig+0x118>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d00b      	beq.n	8004558 <TIM_Base_SetConfig+0x40>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a3c      	ldr	r2, [pc, #240]	; (8004634 <TIM_Base_SetConfig+0x11c>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d007      	beq.n	8004558 <TIM_Base_SetConfig+0x40>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a3b      	ldr	r2, [pc, #236]	; (8004638 <TIM_Base_SetConfig+0x120>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d003      	beq.n	8004558 <TIM_Base_SetConfig+0x40>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a3a      	ldr	r2, [pc, #232]	; (800463c <TIM_Base_SetConfig+0x124>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d108      	bne.n	800456a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800455e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	4313      	orrs	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a2f      	ldr	r2, [pc, #188]	; (800462c <TIM_Base_SetConfig+0x114>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d02b      	beq.n	80045ca <TIM_Base_SetConfig+0xb2>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004578:	d027      	beq.n	80045ca <TIM_Base_SetConfig+0xb2>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a2c      	ldr	r2, [pc, #176]	; (8004630 <TIM_Base_SetConfig+0x118>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d023      	beq.n	80045ca <TIM_Base_SetConfig+0xb2>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a2b      	ldr	r2, [pc, #172]	; (8004634 <TIM_Base_SetConfig+0x11c>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d01f      	beq.n	80045ca <TIM_Base_SetConfig+0xb2>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a2a      	ldr	r2, [pc, #168]	; (8004638 <TIM_Base_SetConfig+0x120>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d01b      	beq.n	80045ca <TIM_Base_SetConfig+0xb2>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a29      	ldr	r2, [pc, #164]	; (800463c <TIM_Base_SetConfig+0x124>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d017      	beq.n	80045ca <TIM_Base_SetConfig+0xb2>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a28      	ldr	r2, [pc, #160]	; (8004640 <TIM_Base_SetConfig+0x128>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d013      	beq.n	80045ca <TIM_Base_SetConfig+0xb2>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a27      	ldr	r2, [pc, #156]	; (8004644 <TIM_Base_SetConfig+0x12c>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d00f      	beq.n	80045ca <TIM_Base_SetConfig+0xb2>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a26      	ldr	r2, [pc, #152]	; (8004648 <TIM_Base_SetConfig+0x130>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d00b      	beq.n	80045ca <TIM_Base_SetConfig+0xb2>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a25      	ldr	r2, [pc, #148]	; (800464c <TIM_Base_SetConfig+0x134>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d007      	beq.n	80045ca <TIM_Base_SetConfig+0xb2>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a24      	ldr	r2, [pc, #144]	; (8004650 <TIM_Base_SetConfig+0x138>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d003      	beq.n	80045ca <TIM_Base_SetConfig+0xb2>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a23      	ldr	r2, [pc, #140]	; (8004654 <TIM_Base_SetConfig+0x13c>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d108      	bne.n	80045dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	4313      	orrs	r3, r2
 80045da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a0a      	ldr	r2, [pc, #40]	; (800462c <TIM_Base_SetConfig+0x114>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d003      	beq.n	8004610 <TIM_Base_SetConfig+0xf8>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a0c      	ldr	r2, [pc, #48]	; (800463c <TIM_Base_SetConfig+0x124>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d103      	bne.n	8004618 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	691a      	ldr	r2, [r3, #16]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	615a      	str	r2, [r3, #20]
}
 800461e:	bf00      	nop
 8004620:	3714      	adds	r7, #20
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	40010000 	.word	0x40010000
 8004630:	40000400 	.word	0x40000400
 8004634:	40000800 	.word	0x40000800
 8004638:	40000c00 	.word	0x40000c00
 800463c:	40010400 	.word	0x40010400
 8004640:	40014000 	.word	0x40014000
 8004644:	40014400 	.word	0x40014400
 8004648:	40014800 	.word	0x40014800
 800464c:	40001800 	.word	0x40001800
 8004650:	40001c00 	.word	0x40001c00
 8004654:	40002000 	.word	0x40002000

08004658 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <HAL_LIN_Init>:
  *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
  *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d101      	bne.n	8004694 <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e057      	b.n	8004744 <HAL_LIN_Init+0xc4>
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
  assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b00      	cmp	r3, #0
 800469e:	d106      	bne.n	80046ae <HAL_LIN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f7fd fc1d 	bl	8001ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2224      	movs	r2, #36	; 0x24
 80046b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68da      	ldr	r2, [r3, #12]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046c4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 fc92 	bl	8004ff0 <UART_SetConfig>

  /* In LIN mode, the following bits must be kept cleared:
     - CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	691a      	ldr	r2, [r3, #16]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046da:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	695a      	ldr	r2, [r3, #20]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046ea:	615a      	str	r2, [r3, #20]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	691a      	ldr	r2, [r3, #16]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046fa:	611a      	str	r2, [r3, #16]

  /* Set the USART LIN Break detection length. */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	691a      	ldr	r2, [r3, #16]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0220 	bic.w	r2, r2, #32
 800470a:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, BreakDetectLength);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6919      	ldr	r1, [r3, #16]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	683a      	ldr	r2, [r7, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	611a      	str	r2, [r3, #16]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800472a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2220      	movs	r2, #32
 8004736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2220      	movs	r2, #32
 800473e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3708      	adds	r7, #8
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b0ba      	sub	sp, #232	; 0xe8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004772:	2300      	movs	r3, #0
 8004774:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004778:	2300      	movs	r3, #0
 800477a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800477e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004782:	f003 030f 	and.w	r3, r3, #15
 8004786:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800478a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10f      	bne.n	80047b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004796:	f003 0320 	and.w	r3, r3, #32
 800479a:	2b00      	cmp	r3, #0
 800479c:	d009      	beq.n	80047b2 <HAL_UART_IRQHandler+0x66>
 800479e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047a2:	f003 0320 	and.w	r3, r3, #32
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 fb65 	bl	8004e7a <UART_Receive_IT>
      return;
 80047b0:	e256      	b.n	8004c60 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80047b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 80de 	beq.w	8004978 <HAL_UART_IRQHandler+0x22c>
 80047bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d106      	bne.n	80047d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80047c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f000 80d1 	beq.w	8004978 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80047d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00b      	beq.n	80047fa <HAL_UART_IRQHandler+0xae>
 80047e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d005      	beq.n	80047fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f2:	f043 0201 	orr.w	r2, r3, #1
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047fe:	f003 0304 	and.w	r3, r3, #4
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00b      	beq.n	800481e <HAL_UART_IRQHandler+0xd2>
 8004806:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d005      	beq.n	800481e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004816:	f043 0202 	orr.w	r2, r3, #2
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800481e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00b      	beq.n	8004842 <HAL_UART_IRQHandler+0xf6>
 800482a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	d005      	beq.n	8004842 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483a:	f043 0204 	orr.w	r2, r3, #4
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004846:	f003 0308 	and.w	r3, r3, #8
 800484a:	2b00      	cmp	r3, #0
 800484c:	d011      	beq.n	8004872 <HAL_UART_IRQHandler+0x126>
 800484e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004852:	f003 0320 	and.w	r3, r3, #32
 8004856:	2b00      	cmp	r3, #0
 8004858:	d105      	bne.n	8004866 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800485a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d005      	beq.n	8004872 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	f043 0208 	orr.w	r2, r3, #8
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	2b00      	cmp	r3, #0
 8004878:	f000 81ed 	beq.w	8004c56 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800487c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004880:	f003 0320 	and.w	r3, r3, #32
 8004884:	2b00      	cmp	r3, #0
 8004886:	d008      	beq.n	800489a <HAL_UART_IRQHandler+0x14e>
 8004888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800488c:	f003 0320 	and.w	r3, r3, #32
 8004890:	2b00      	cmp	r3, #0
 8004892:	d002      	beq.n	800489a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 faf0 	bl	8004e7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a4:	2b40      	cmp	r3, #64	; 0x40
 80048a6:	bf0c      	ite	eq
 80048a8:	2301      	moveq	r3, #1
 80048aa:	2300      	movne	r3, #0
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	f003 0308 	and.w	r3, r3, #8
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d103      	bne.n	80048c6 <HAL_UART_IRQHandler+0x17a>
 80048be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d04f      	beq.n	8004966 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f9f8 	bl	8004cbc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d6:	2b40      	cmp	r3, #64	; 0x40
 80048d8:	d141      	bne.n	800495e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	3314      	adds	r3, #20
 80048e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80048e8:	e853 3f00 	ldrex	r3, [r3]
 80048ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80048f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80048f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	3314      	adds	r3, #20
 8004902:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004906:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800490a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004912:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004916:	e841 2300 	strex	r3, r2, [r1]
 800491a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800491e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1d9      	bne.n	80048da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492a:	2b00      	cmp	r3, #0
 800492c:	d013      	beq.n	8004956 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004932:	4a7d      	ldr	r2, [pc, #500]	; (8004b28 <HAL_UART_IRQHandler+0x3dc>)
 8004934:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493a:	4618      	mov	r0, r3
 800493c:	f7fe fb74 	bl	8003028 <HAL_DMA_Abort_IT>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d016      	beq.n	8004974 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004950:	4610      	mov	r0, r2
 8004952:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004954:	e00e      	b.n	8004974 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f99a 	bl	8004c90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800495c:	e00a      	b.n	8004974 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f996 	bl	8004c90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004964:	e006      	b.n	8004974 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 f992 	bl	8004c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004972:	e170      	b.n	8004c56 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004974:	bf00      	nop
    return;
 8004976:	e16e      	b.n	8004c56 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497c:	2b01      	cmp	r3, #1
 800497e:	f040 814a 	bne.w	8004c16 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004986:	f003 0310 	and.w	r3, r3, #16
 800498a:	2b00      	cmp	r3, #0
 800498c:	f000 8143 	beq.w	8004c16 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004994:	f003 0310 	and.w	r3, r3, #16
 8004998:	2b00      	cmp	r3, #0
 800499a:	f000 813c 	beq.w	8004c16 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800499e:	2300      	movs	r3, #0
 80049a0:	60bb      	str	r3, [r7, #8]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	60bb      	str	r3, [r7, #8]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	60bb      	str	r3, [r7, #8]
 80049b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049be:	2b40      	cmp	r3, #64	; 0x40
 80049c0:	f040 80b4 	bne.w	8004b2c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80049d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 8140 	beq.w	8004c5a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049e2:	429a      	cmp	r2, r3
 80049e4:	f080 8139 	bcs.w	8004c5a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049ee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f4:	69db      	ldr	r3, [r3, #28]
 80049f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049fa:	f000 8088 	beq.w	8004b0e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	330c      	adds	r3, #12
 8004a04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a0c:	e853 3f00 	ldrex	r3, [r3]
 8004a10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004a14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	330c      	adds	r3, #12
 8004a26:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004a2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a32:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004a36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a3a:	e841 2300 	strex	r3, r2, [r1]
 8004a3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004a42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1d9      	bne.n	80049fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	3314      	adds	r3, #20
 8004a50:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a54:	e853 3f00 	ldrex	r3, [r3]
 8004a58:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a5c:	f023 0301 	bic.w	r3, r3, #1
 8004a60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	3314      	adds	r3, #20
 8004a6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a6e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004a72:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a74:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a7a:	e841 2300 	strex	r3, r2, [r1]
 8004a7e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004a80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1e1      	bne.n	8004a4a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	3314      	adds	r3, #20
 8004a8c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a90:	e853 3f00 	ldrex	r3, [r3]
 8004a94:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004a96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	3314      	adds	r3, #20
 8004aa6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004aaa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004aac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ab0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ab2:	e841 2300 	strex	r3, r2, [r1]
 8004ab6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ab8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1e3      	bne.n	8004a86 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2220      	movs	r2, #32
 8004ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	330c      	adds	r3, #12
 8004ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ad6:	e853 3f00 	ldrex	r3, [r3]
 8004ada:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004adc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ade:	f023 0310 	bic.w	r3, r3, #16
 8004ae2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	330c      	adds	r3, #12
 8004aec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004af0:	65ba      	str	r2, [r7, #88]	; 0x58
 8004af2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004af6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004af8:	e841 2300 	strex	r3, r2, [r1]
 8004afc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1e3      	bne.n	8004acc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7fe fa1d 	bl	8002f48 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f8c0 	bl	8004ca4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b24:	e099      	b.n	8004c5a <HAL_UART_IRQHandler+0x50e>
 8004b26:	bf00      	nop
 8004b28:	08004d83 	.word	0x08004d83
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	f000 808b 	beq.w	8004c5e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004b48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f000 8086 	beq.w	8004c5e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	330c      	adds	r3, #12
 8004b58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b5c:	e853 3f00 	ldrex	r3, [r3]
 8004b60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	330c      	adds	r3, #12
 8004b72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004b76:	647a      	str	r2, [r7, #68]	; 0x44
 8004b78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b7e:	e841 2300 	strex	r3, r2, [r1]
 8004b82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1e3      	bne.n	8004b52 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	3314      	adds	r3, #20
 8004b90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b94:	e853 3f00 	ldrex	r3, [r3]
 8004b98:	623b      	str	r3, [r7, #32]
   return(result);
 8004b9a:	6a3b      	ldr	r3, [r7, #32]
 8004b9c:	f023 0301 	bic.w	r3, r3, #1
 8004ba0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	3314      	adds	r3, #20
 8004baa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004bae:	633a      	str	r2, [r7, #48]	; 0x30
 8004bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bb6:	e841 2300 	strex	r3, r2, [r1]
 8004bba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1e3      	bne.n	8004b8a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2220      	movs	r2, #32
 8004bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	330c      	adds	r3, #12
 8004bd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	e853 3f00 	ldrex	r3, [r3]
 8004bde:	60fb      	str	r3, [r7, #12]
   return(result);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f023 0310 	bic.w	r3, r3, #16
 8004be6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	330c      	adds	r3, #12
 8004bf0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004bf4:	61fa      	str	r2, [r7, #28]
 8004bf6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf8:	69b9      	ldr	r1, [r7, #24]
 8004bfa:	69fa      	ldr	r2, [r7, #28]
 8004bfc:	e841 2300 	strex	r3, r2, [r1]
 8004c00:	617b      	str	r3, [r7, #20]
   return(result);
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1e3      	bne.n	8004bd0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f848 	bl	8004ca4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c14:	e023      	b.n	8004c5e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d009      	beq.n	8004c36 <HAL_UART_IRQHandler+0x4ea>
 8004c22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d003      	beq.n	8004c36 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f8bb 	bl	8004daa <UART_Transmit_IT>
    return;
 8004c34:	e014      	b.n	8004c60 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00e      	beq.n	8004c60 <HAL_UART_IRQHandler+0x514>
 8004c42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d008      	beq.n	8004c60 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f8fb 	bl	8004e4a <UART_EndTransmit_IT>
    return;
 8004c54:	e004      	b.n	8004c60 <HAL_UART_IRQHandler+0x514>
    return;
 8004c56:	bf00      	nop
 8004c58:	e002      	b.n	8004c60 <HAL_UART_IRQHandler+0x514>
      return;
 8004c5a:	bf00      	nop
 8004c5c:	e000      	b.n	8004c60 <HAL_UART_IRQHandler+0x514>
      return;
 8004c5e:	bf00      	nop
  }
}
 8004c60:	37e8      	adds	r7, #232	; 0xe8
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop

08004c68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	460b      	mov	r3, r1
 8004cae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b095      	sub	sp, #84	; 0x54
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	330c      	adds	r3, #12
 8004cca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cce:	e853 3f00 	ldrex	r3, [r3]
 8004cd2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	330c      	adds	r3, #12
 8004ce2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ce4:	643a      	str	r2, [r7, #64]	; 0x40
 8004ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004cea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004cec:	e841 2300 	strex	r3, r2, [r1]
 8004cf0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1e5      	bne.n	8004cc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	3314      	adds	r3, #20
 8004cfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d00:	6a3b      	ldr	r3, [r7, #32]
 8004d02:	e853 3f00 	ldrex	r3, [r3]
 8004d06:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	f023 0301 	bic.w	r3, r3, #1
 8004d0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	3314      	adds	r3, #20
 8004d16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d20:	e841 2300 	strex	r3, r2, [r1]
 8004d24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1e5      	bne.n	8004cf8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d119      	bne.n	8004d68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	330c      	adds	r3, #12
 8004d3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	e853 3f00 	ldrex	r3, [r3]
 8004d42:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	f023 0310 	bic.w	r3, r3, #16
 8004d4a:	647b      	str	r3, [r7, #68]	; 0x44
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	330c      	adds	r3, #12
 8004d52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d54:	61ba      	str	r2, [r7, #24]
 8004d56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d58:	6979      	ldr	r1, [r7, #20]
 8004d5a:	69ba      	ldr	r2, [r7, #24]
 8004d5c:	e841 2300 	strex	r3, r2, [r1]
 8004d60:	613b      	str	r3, [r7, #16]
   return(result);
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1e5      	bne.n	8004d34 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2220      	movs	r2, #32
 8004d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004d76:	bf00      	nop
 8004d78:	3754      	adds	r7, #84	; 0x54
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b084      	sub	sp, #16
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f7ff ff77 	bl	8004c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004da2:	bf00      	nop
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b085      	sub	sp, #20
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b21      	cmp	r3, #33	; 0x21
 8004dbc:	d13e      	bne.n	8004e3c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dc6:	d114      	bne.n	8004df2 <UART_Transmit_IT+0x48>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d110      	bne.n	8004df2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a1b      	ldr	r3, [r3, #32]
 8004dd4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	881b      	ldrh	r3, [r3, #0]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004de4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	1c9a      	adds	r2, r3, #2
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	621a      	str	r2, [r3, #32]
 8004df0:	e008      	b.n	8004e04 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	1c59      	adds	r1, r3, #1
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	6211      	str	r1, [r2, #32]
 8004dfc:	781a      	ldrb	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	4619      	mov	r1, r3
 8004e12:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10f      	bne.n	8004e38 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68da      	ldr	r2, [r3, #12]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e26:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68da      	ldr	r2, [r3, #12]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e36:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	e000      	b.n	8004e3e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e3c:	2302      	movs	r3, #2
  }
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b082      	sub	sp, #8
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68da      	ldr	r2, [r3, #12]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e60:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2220      	movs	r2, #32
 8004e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7ff fefc 	bl	8004c68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b08c      	sub	sp, #48	; 0x30
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b22      	cmp	r3, #34	; 0x22
 8004e8c:	f040 80ab 	bne.w	8004fe6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e98:	d117      	bne.n	8004eca <UART_Receive_IT+0x50>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d113      	bne.n	8004eca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eaa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ebc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec2:	1c9a      	adds	r2, r3, #2
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	629a      	str	r2, [r3, #40]	; 0x28
 8004ec8:	e026      	b.n	8004f18 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ece:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004edc:	d007      	beq.n	8004eee <UART_Receive_IT+0x74>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d10a      	bne.n	8004efc <UART_Receive_IT+0x82>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d106      	bne.n	8004efc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	b2da      	uxtb	r2, r3
 8004ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef8:	701a      	strb	r2, [r3, #0]
 8004efa:	e008      	b.n	8004f0e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f08:	b2da      	uxtb	r2, r3
 8004f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f12:	1c5a      	adds	r2, r3, #1
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	4619      	mov	r1, r3
 8004f26:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d15a      	bne.n	8004fe2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68da      	ldr	r2, [r3, #12]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 0220 	bic.w	r2, r2, #32
 8004f3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68da      	ldr	r2, [r3, #12]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	695a      	ldr	r2, [r3, #20]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 0201 	bic.w	r2, r2, #1
 8004f5a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2220      	movs	r2, #32
 8004f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d135      	bne.n	8004fd8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	330c      	adds	r3, #12
 8004f78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	e853 3f00 	ldrex	r3, [r3]
 8004f80:	613b      	str	r3, [r7, #16]
   return(result);
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	f023 0310 	bic.w	r3, r3, #16
 8004f88:	627b      	str	r3, [r7, #36]	; 0x24
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	330c      	adds	r3, #12
 8004f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f92:	623a      	str	r2, [r7, #32]
 8004f94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f96:	69f9      	ldr	r1, [r7, #28]
 8004f98:	6a3a      	ldr	r2, [r7, #32]
 8004f9a:	e841 2300 	strex	r3, r2, [r1]
 8004f9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1e5      	bne.n	8004f72 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0310 	and.w	r3, r3, #16
 8004fb0:	2b10      	cmp	r3, #16
 8004fb2:	d10a      	bne.n	8004fca <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	60fb      	str	r3, [r7, #12]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fce:	4619      	mov	r1, r3
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f7ff fe67 	bl	8004ca4 <HAL_UARTEx_RxEventCallback>
 8004fd6:	e002      	b.n	8004fde <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f7ff fe4f 	bl	8004c7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	e002      	b.n	8004fe8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	e000      	b.n	8004fe8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004fe6:	2302      	movs	r3, #2
  }
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3730      	adds	r7, #48	; 0x30
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ff4:	b0c0      	sub	sp, #256	; 0x100
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800500c:	68d9      	ldr	r1, [r3, #12]
 800500e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	ea40 0301 	orr.w	r3, r0, r1
 8005018:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800501a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	431a      	orrs	r2, r3
 8005028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	431a      	orrs	r2, r3
 8005030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	4313      	orrs	r3, r2
 8005038:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800503c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005048:	f021 010c 	bic.w	r1, r1, #12
 800504c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005056:	430b      	orrs	r3, r1
 8005058:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800505a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800506a:	6999      	ldr	r1, [r3, #24]
 800506c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	ea40 0301 	orr.w	r3, r0, r1
 8005076:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	4b8f      	ldr	r3, [pc, #572]	; (80052bc <UART_SetConfig+0x2cc>)
 8005080:	429a      	cmp	r2, r3
 8005082:	d005      	beq.n	8005090 <UART_SetConfig+0xa0>
 8005084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	4b8d      	ldr	r3, [pc, #564]	; (80052c0 <UART_SetConfig+0x2d0>)
 800508c:	429a      	cmp	r2, r3
 800508e:	d104      	bne.n	800509a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005090:	f7fe fe26 	bl	8003ce0 <HAL_RCC_GetPCLK2Freq>
 8005094:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005098:	e003      	b.n	80050a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800509a:	f7fe fe0d 	bl	8003cb8 <HAL_RCC_GetPCLK1Freq>
 800509e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a6:	69db      	ldr	r3, [r3, #28]
 80050a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050ac:	f040 810c 	bne.w	80052c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050b4:	2200      	movs	r2, #0
 80050b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80050ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80050be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80050c2:	4622      	mov	r2, r4
 80050c4:	462b      	mov	r3, r5
 80050c6:	1891      	adds	r1, r2, r2
 80050c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80050ca:	415b      	adcs	r3, r3
 80050cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80050d2:	4621      	mov	r1, r4
 80050d4:	eb12 0801 	adds.w	r8, r2, r1
 80050d8:	4629      	mov	r1, r5
 80050da:	eb43 0901 	adc.w	r9, r3, r1
 80050de:	f04f 0200 	mov.w	r2, #0
 80050e2:	f04f 0300 	mov.w	r3, #0
 80050e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050f2:	4690      	mov	r8, r2
 80050f4:	4699      	mov	r9, r3
 80050f6:	4623      	mov	r3, r4
 80050f8:	eb18 0303 	adds.w	r3, r8, r3
 80050fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005100:	462b      	mov	r3, r5
 8005102:	eb49 0303 	adc.w	r3, r9, r3
 8005106:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800510a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005116:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800511a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800511e:	460b      	mov	r3, r1
 8005120:	18db      	adds	r3, r3, r3
 8005122:	653b      	str	r3, [r7, #80]	; 0x50
 8005124:	4613      	mov	r3, r2
 8005126:	eb42 0303 	adc.w	r3, r2, r3
 800512a:	657b      	str	r3, [r7, #84]	; 0x54
 800512c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005130:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005134:	f7fb fa78 	bl	8000628 <__aeabi_uldivmod>
 8005138:	4602      	mov	r2, r0
 800513a:	460b      	mov	r3, r1
 800513c:	4b61      	ldr	r3, [pc, #388]	; (80052c4 <UART_SetConfig+0x2d4>)
 800513e:	fba3 2302 	umull	r2, r3, r3, r2
 8005142:	095b      	lsrs	r3, r3, #5
 8005144:	011c      	lsls	r4, r3, #4
 8005146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800514a:	2200      	movs	r2, #0
 800514c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005150:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005154:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005158:	4642      	mov	r2, r8
 800515a:	464b      	mov	r3, r9
 800515c:	1891      	adds	r1, r2, r2
 800515e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005160:	415b      	adcs	r3, r3
 8005162:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005164:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005168:	4641      	mov	r1, r8
 800516a:	eb12 0a01 	adds.w	sl, r2, r1
 800516e:	4649      	mov	r1, r9
 8005170:	eb43 0b01 	adc.w	fp, r3, r1
 8005174:	f04f 0200 	mov.w	r2, #0
 8005178:	f04f 0300 	mov.w	r3, #0
 800517c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005180:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005184:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005188:	4692      	mov	sl, r2
 800518a:	469b      	mov	fp, r3
 800518c:	4643      	mov	r3, r8
 800518e:	eb1a 0303 	adds.w	r3, sl, r3
 8005192:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005196:	464b      	mov	r3, r9
 8005198:	eb4b 0303 	adc.w	r3, fp, r3
 800519c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80051a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80051b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80051b4:	460b      	mov	r3, r1
 80051b6:	18db      	adds	r3, r3, r3
 80051b8:	643b      	str	r3, [r7, #64]	; 0x40
 80051ba:	4613      	mov	r3, r2
 80051bc:	eb42 0303 	adc.w	r3, r2, r3
 80051c0:	647b      	str	r3, [r7, #68]	; 0x44
 80051c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80051c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80051ca:	f7fb fa2d 	bl	8000628 <__aeabi_uldivmod>
 80051ce:	4602      	mov	r2, r0
 80051d0:	460b      	mov	r3, r1
 80051d2:	4611      	mov	r1, r2
 80051d4:	4b3b      	ldr	r3, [pc, #236]	; (80052c4 <UART_SetConfig+0x2d4>)
 80051d6:	fba3 2301 	umull	r2, r3, r3, r1
 80051da:	095b      	lsrs	r3, r3, #5
 80051dc:	2264      	movs	r2, #100	; 0x64
 80051de:	fb02 f303 	mul.w	r3, r2, r3
 80051e2:	1acb      	subs	r3, r1, r3
 80051e4:	00db      	lsls	r3, r3, #3
 80051e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80051ea:	4b36      	ldr	r3, [pc, #216]	; (80052c4 <UART_SetConfig+0x2d4>)
 80051ec:	fba3 2302 	umull	r2, r3, r3, r2
 80051f0:	095b      	lsrs	r3, r3, #5
 80051f2:	005b      	lsls	r3, r3, #1
 80051f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051f8:	441c      	add	r4, r3
 80051fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051fe:	2200      	movs	r2, #0
 8005200:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005204:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005208:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800520c:	4642      	mov	r2, r8
 800520e:	464b      	mov	r3, r9
 8005210:	1891      	adds	r1, r2, r2
 8005212:	63b9      	str	r1, [r7, #56]	; 0x38
 8005214:	415b      	adcs	r3, r3
 8005216:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005218:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800521c:	4641      	mov	r1, r8
 800521e:	1851      	adds	r1, r2, r1
 8005220:	6339      	str	r1, [r7, #48]	; 0x30
 8005222:	4649      	mov	r1, r9
 8005224:	414b      	adcs	r3, r1
 8005226:	637b      	str	r3, [r7, #52]	; 0x34
 8005228:	f04f 0200 	mov.w	r2, #0
 800522c:	f04f 0300 	mov.w	r3, #0
 8005230:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005234:	4659      	mov	r1, fp
 8005236:	00cb      	lsls	r3, r1, #3
 8005238:	4651      	mov	r1, sl
 800523a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800523e:	4651      	mov	r1, sl
 8005240:	00ca      	lsls	r2, r1, #3
 8005242:	4610      	mov	r0, r2
 8005244:	4619      	mov	r1, r3
 8005246:	4603      	mov	r3, r0
 8005248:	4642      	mov	r2, r8
 800524a:	189b      	adds	r3, r3, r2
 800524c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005250:	464b      	mov	r3, r9
 8005252:	460a      	mov	r2, r1
 8005254:	eb42 0303 	adc.w	r3, r2, r3
 8005258:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800525c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005268:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800526c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005270:	460b      	mov	r3, r1
 8005272:	18db      	adds	r3, r3, r3
 8005274:	62bb      	str	r3, [r7, #40]	; 0x28
 8005276:	4613      	mov	r3, r2
 8005278:	eb42 0303 	adc.w	r3, r2, r3
 800527c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800527e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005282:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005286:	f7fb f9cf 	bl	8000628 <__aeabi_uldivmod>
 800528a:	4602      	mov	r2, r0
 800528c:	460b      	mov	r3, r1
 800528e:	4b0d      	ldr	r3, [pc, #52]	; (80052c4 <UART_SetConfig+0x2d4>)
 8005290:	fba3 1302 	umull	r1, r3, r3, r2
 8005294:	095b      	lsrs	r3, r3, #5
 8005296:	2164      	movs	r1, #100	; 0x64
 8005298:	fb01 f303 	mul.w	r3, r1, r3
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	00db      	lsls	r3, r3, #3
 80052a0:	3332      	adds	r3, #50	; 0x32
 80052a2:	4a08      	ldr	r2, [pc, #32]	; (80052c4 <UART_SetConfig+0x2d4>)
 80052a4:	fba2 2303 	umull	r2, r3, r2, r3
 80052a8:	095b      	lsrs	r3, r3, #5
 80052aa:	f003 0207 	and.w	r2, r3, #7
 80052ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4422      	add	r2, r4
 80052b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052b8:	e105      	b.n	80054c6 <UART_SetConfig+0x4d6>
 80052ba:	bf00      	nop
 80052bc:	40011000 	.word	0x40011000
 80052c0:	40011400 	.word	0x40011400
 80052c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052cc:	2200      	movs	r2, #0
 80052ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80052d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80052d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80052da:	4642      	mov	r2, r8
 80052dc:	464b      	mov	r3, r9
 80052de:	1891      	adds	r1, r2, r2
 80052e0:	6239      	str	r1, [r7, #32]
 80052e2:	415b      	adcs	r3, r3
 80052e4:	627b      	str	r3, [r7, #36]	; 0x24
 80052e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052ea:	4641      	mov	r1, r8
 80052ec:	1854      	adds	r4, r2, r1
 80052ee:	4649      	mov	r1, r9
 80052f0:	eb43 0501 	adc.w	r5, r3, r1
 80052f4:	f04f 0200 	mov.w	r2, #0
 80052f8:	f04f 0300 	mov.w	r3, #0
 80052fc:	00eb      	lsls	r3, r5, #3
 80052fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005302:	00e2      	lsls	r2, r4, #3
 8005304:	4614      	mov	r4, r2
 8005306:	461d      	mov	r5, r3
 8005308:	4643      	mov	r3, r8
 800530a:	18e3      	adds	r3, r4, r3
 800530c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005310:	464b      	mov	r3, r9
 8005312:	eb45 0303 	adc.w	r3, r5, r3
 8005316:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800531a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005326:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800532a:	f04f 0200 	mov.w	r2, #0
 800532e:	f04f 0300 	mov.w	r3, #0
 8005332:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005336:	4629      	mov	r1, r5
 8005338:	008b      	lsls	r3, r1, #2
 800533a:	4621      	mov	r1, r4
 800533c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005340:	4621      	mov	r1, r4
 8005342:	008a      	lsls	r2, r1, #2
 8005344:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005348:	f7fb f96e 	bl	8000628 <__aeabi_uldivmod>
 800534c:	4602      	mov	r2, r0
 800534e:	460b      	mov	r3, r1
 8005350:	4b60      	ldr	r3, [pc, #384]	; (80054d4 <UART_SetConfig+0x4e4>)
 8005352:	fba3 2302 	umull	r2, r3, r3, r2
 8005356:	095b      	lsrs	r3, r3, #5
 8005358:	011c      	lsls	r4, r3, #4
 800535a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800535e:	2200      	movs	r2, #0
 8005360:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005364:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005368:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800536c:	4642      	mov	r2, r8
 800536e:	464b      	mov	r3, r9
 8005370:	1891      	adds	r1, r2, r2
 8005372:	61b9      	str	r1, [r7, #24]
 8005374:	415b      	adcs	r3, r3
 8005376:	61fb      	str	r3, [r7, #28]
 8005378:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800537c:	4641      	mov	r1, r8
 800537e:	1851      	adds	r1, r2, r1
 8005380:	6139      	str	r1, [r7, #16]
 8005382:	4649      	mov	r1, r9
 8005384:	414b      	adcs	r3, r1
 8005386:	617b      	str	r3, [r7, #20]
 8005388:	f04f 0200 	mov.w	r2, #0
 800538c:	f04f 0300 	mov.w	r3, #0
 8005390:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005394:	4659      	mov	r1, fp
 8005396:	00cb      	lsls	r3, r1, #3
 8005398:	4651      	mov	r1, sl
 800539a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800539e:	4651      	mov	r1, sl
 80053a0:	00ca      	lsls	r2, r1, #3
 80053a2:	4610      	mov	r0, r2
 80053a4:	4619      	mov	r1, r3
 80053a6:	4603      	mov	r3, r0
 80053a8:	4642      	mov	r2, r8
 80053aa:	189b      	adds	r3, r3, r2
 80053ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053b0:	464b      	mov	r3, r9
 80053b2:	460a      	mov	r2, r1
 80053b4:	eb42 0303 	adc.w	r3, r2, r3
 80053b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80053bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80053c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80053c8:	f04f 0200 	mov.w	r2, #0
 80053cc:	f04f 0300 	mov.w	r3, #0
 80053d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80053d4:	4649      	mov	r1, r9
 80053d6:	008b      	lsls	r3, r1, #2
 80053d8:	4641      	mov	r1, r8
 80053da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053de:	4641      	mov	r1, r8
 80053e0:	008a      	lsls	r2, r1, #2
 80053e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80053e6:	f7fb f91f 	bl	8000628 <__aeabi_uldivmod>
 80053ea:	4602      	mov	r2, r0
 80053ec:	460b      	mov	r3, r1
 80053ee:	4b39      	ldr	r3, [pc, #228]	; (80054d4 <UART_SetConfig+0x4e4>)
 80053f0:	fba3 1302 	umull	r1, r3, r3, r2
 80053f4:	095b      	lsrs	r3, r3, #5
 80053f6:	2164      	movs	r1, #100	; 0x64
 80053f8:	fb01 f303 	mul.w	r3, r1, r3
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	011b      	lsls	r3, r3, #4
 8005400:	3332      	adds	r3, #50	; 0x32
 8005402:	4a34      	ldr	r2, [pc, #208]	; (80054d4 <UART_SetConfig+0x4e4>)
 8005404:	fba2 2303 	umull	r2, r3, r2, r3
 8005408:	095b      	lsrs	r3, r3, #5
 800540a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800540e:	441c      	add	r4, r3
 8005410:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005414:	2200      	movs	r2, #0
 8005416:	673b      	str	r3, [r7, #112]	; 0x70
 8005418:	677a      	str	r2, [r7, #116]	; 0x74
 800541a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800541e:	4642      	mov	r2, r8
 8005420:	464b      	mov	r3, r9
 8005422:	1891      	adds	r1, r2, r2
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	415b      	adcs	r3, r3
 8005428:	60fb      	str	r3, [r7, #12]
 800542a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800542e:	4641      	mov	r1, r8
 8005430:	1851      	adds	r1, r2, r1
 8005432:	6039      	str	r1, [r7, #0]
 8005434:	4649      	mov	r1, r9
 8005436:	414b      	adcs	r3, r1
 8005438:	607b      	str	r3, [r7, #4]
 800543a:	f04f 0200 	mov.w	r2, #0
 800543e:	f04f 0300 	mov.w	r3, #0
 8005442:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005446:	4659      	mov	r1, fp
 8005448:	00cb      	lsls	r3, r1, #3
 800544a:	4651      	mov	r1, sl
 800544c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005450:	4651      	mov	r1, sl
 8005452:	00ca      	lsls	r2, r1, #3
 8005454:	4610      	mov	r0, r2
 8005456:	4619      	mov	r1, r3
 8005458:	4603      	mov	r3, r0
 800545a:	4642      	mov	r2, r8
 800545c:	189b      	adds	r3, r3, r2
 800545e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005460:	464b      	mov	r3, r9
 8005462:	460a      	mov	r2, r1
 8005464:	eb42 0303 	adc.w	r3, r2, r3
 8005468:	66fb      	str	r3, [r7, #108]	; 0x6c
 800546a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	663b      	str	r3, [r7, #96]	; 0x60
 8005474:	667a      	str	r2, [r7, #100]	; 0x64
 8005476:	f04f 0200 	mov.w	r2, #0
 800547a:	f04f 0300 	mov.w	r3, #0
 800547e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005482:	4649      	mov	r1, r9
 8005484:	008b      	lsls	r3, r1, #2
 8005486:	4641      	mov	r1, r8
 8005488:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800548c:	4641      	mov	r1, r8
 800548e:	008a      	lsls	r2, r1, #2
 8005490:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005494:	f7fb f8c8 	bl	8000628 <__aeabi_uldivmod>
 8005498:	4602      	mov	r2, r0
 800549a:	460b      	mov	r3, r1
 800549c:	4b0d      	ldr	r3, [pc, #52]	; (80054d4 <UART_SetConfig+0x4e4>)
 800549e:	fba3 1302 	umull	r1, r3, r3, r2
 80054a2:	095b      	lsrs	r3, r3, #5
 80054a4:	2164      	movs	r1, #100	; 0x64
 80054a6:	fb01 f303 	mul.w	r3, r1, r3
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	011b      	lsls	r3, r3, #4
 80054ae:	3332      	adds	r3, #50	; 0x32
 80054b0:	4a08      	ldr	r2, [pc, #32]	; (80054d4 <UART_SetConfig+0x4e4>)
 80054b2:	fba2 2303 	umull	r2, r3, r2, r3
 80054b6:	095b      	lsrs	r3, r3, #5
 80054b8:	f003 020f 	and.w	r2, r3, #15
 80054bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4422      	add	r2, r4
 80054c4:	609a      	str	r2, [r3, #8]
}
 80054c6:	bf00      	nop
 80054c8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80054cc:	46bd      	mov	sp, r7
 80054ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054d2:	bf00      	nop
 80054d4:	51eb851f 	.word	0x51eb851f

080054d8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	4603      	mov	r3, r0
 80054e0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80054e2:	2300      	movs	r3, #0
 80054e4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80054e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054ea:	2b84      	cmp	r3, #132	; 0x84
 80054ec:	d005      	beq.n	80054fa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80054ee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	4413      	add	r3, r2
 80054f6:	3303      	adds	r3, #3
 80054f8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80054fa:	68fb      	ldr	r3, [r7, #12]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3714      	adds	r7, #20
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800550e:	f3ef 8305 	mrs	r3, IPSR
 8005512:	607b      	str	r3, [r7, #4]
  return(result);
 8005514:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005516:	2b00      	cmp	r3, #0
 8005518:	bf14      	ite	ne
 800551a:	2301      	movne	r3, #1
 800551c:	2300      	moveq	r3, #0
 800551e:	b2db      	uxtb	r3, r3
}
 8005520:	4618      	mov	r0, r3
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005530:	f001 fa1e 	bl	8006970 <vTaskStartScheduler>
  
  return osOK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	bd80      	pop	{r7, pc}

0800553a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800553a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800553c:	b089      	sub	sp, #36	; 0x24
 800553e:	af04      	add	r7, sp, #16
 8005540:	6078      	str	r0, [r7, #4]
 8005542:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	695b      	ldr	r3, [r3, #20]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d020      	beq.n	800558e <osThreadCreate+0x54>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d01c      	beq.n	800558e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685c      	ldr	r4, [r3, #4]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681d      	ldr	r5, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	691e      	ldr	r6, [r3, #16]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005566:	4618      	mov	r0, r3
 8005568:	f7ff ffb6 	bl	80054d8 <makeFreeRtosPriority>
 800556c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005576:	9202      	str	r2, [sp, #8]
 8005578:	9301      	str	r3, [sp, #4]
 800557a:	9100      	str	r1, [sp, #0]
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	4632      	mov	r2, r6
 8005580:	4629      	mov	r1, r5
 8005582:	4620      	mov	r0, r4
 8005584:	f001 f82c 	bl	80065e0 <xTaskCreateStatic>
 8005588:	4603      	mov	r3, r0
 800558a:	60fb      	str	r3, [r7, #12]
 800558c:	e01c      	b.n	80055c8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685c      	ldr	r4, [r3, #4]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800559a:	b29e      	uxth	r6, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7ff ff98 	bl	80054d8 <makeFreeRtosPriority>
 80055a8:	4602      	mov	r2, r0
 80055aa:	f107 030c 	add.w	r3, r7, #12
 80055ae:	9301      	str	r3, [sp, #4]
 80055b0:	9200      	str	r2, [sp, #0]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	4632      	mov	r2, r6
 80055b6:	4629      	mov	r1, r5
 80055b8:	4620      	mov	r0, r4
 80055ba:	f001 f86e 	bl	800669a <xTaskCreate>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d001      	beq.n	80055c8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80055c4:	2300      	movs	r3, #0
 80055c6:	e000      	b.n	80055ca <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80055c8:	68fb      	ldr	r3, [r7, #12]
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3714      	adds	r7, #20
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080055d2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b084      	sub	sp, #16
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d001      	beq.n	80055e8 <osDelay+0x16>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	e000      	b.n	80055ea <osDelay+0x18>
 80055e8:	2301      	movs	r3, #1
 80055ea:	4618      	mov	r0, r3
 80055ec:	f001 f98c 	bl	8006908 <vTaskDelay>
  
  return osOK;
 80055f0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3710      	adds	r7, #16
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
	...

080055fc <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b086      	sub	sp, #24
 8005600:	af02      	add	r7, sp, #8
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	460b      	mov	r3, r1
 8005606:	607a      	str	r2, [r7, #4]
 8005608:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d013      	beq.n	800563a <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8005612:	7afb      	ldrb	r3, [r7, #11]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d101      	bne.n	800561c <osTimerCreate+0x20>
 8005618:	2101      	movs	r1, #1
 800561a:	e000      	b.n	800561e <osTimerCreate+0x22>
 800561c:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8005626:	9201      	str	r2, [sp, #4]
 8005628:	9300      	str	r3, [sp, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	460a      	mov	r2, r1
 800562e:	2101      	movs	r1, #1
 8005630:	480b      	ldr	r0, [pc, #44]	; (8005660 <osTimerCreate+0x64>)
 8005632:	f002 f8c0 	bl	80077b6 <xTimerCreateStatic>
 8005636:	4603      	mov	r3, r0
 8005638:	e00e      	b.n	8005658 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800563a:	7afb      	ldrb	r3, [r7, #11]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d101      	bne.n	8005644 <osTimerCreate+0x48>
 8005640:	2201      	movs	r2, #1
 8005642:	e000      	b.n	8005646 <osTimerCreate+0x4a>
 8005644:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800564a:	9300      	str	r3, [sp, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2101      	movs	r1, #1
 8005650:	4803      	ldr	r0, [pc, #12]	; (8005660 <osTimerCreate+0x64>)
 8005652:	f002 f88f 	bl	8007774 <xTimerCreate>
 8005656:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8005658:	4618      	mov	r0, r3
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	0800923c 	.word	0x0800923c

08005664 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af02      	add	r7, sp, #8
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800566e:	2300      	movs	r3, #0
 8005670:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8005672:	2300      	movs	r3, #0
 8005674:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8005676:	f7ff ff47 	bl	8005508 <inHandlerMode>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d01c      	beq.n	80056ba <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8005680:	6839      	ldr	r1, [r7, #0]
 8005682:	f107 0208 	add.w	r2, r7, #8
 8005686:	f107 030c 	add.w	r3, r7, #12
 800568a:	9300      	str	r3, [sp, #0]
 800568c:	4613      	mov	r3, r2
 800568e:	2201      	movs	r2, #1
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f001 fef9 	bl	8007488 <xTaskGenericNotifyFromISR>
 8005696:	4603      	mov	r3, r0
 8005698:	2b01      	cmp	r3, #1
 800569a:	d002      	beq.n	80056a2 <osSignalSet+0x3e>
      return 0x80000000;
 800569c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80056a0:	e019      	b.n	80056d6 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d015      	beq.n	80056d4 <osSignalSet+0x70>
 80056a8:	4b0d      	ldr	r3, [pc, #52]	; (80056e0 <osSignalSet+0x7c>)
 80056aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ae:	601a      	str	r2, [r3, #0]
 80056b0:	f3bf 8f4f 	dsb	sy
 80056b4:	f3bf 8f6f 	isb	sy
 80056b8:	e00c      	b.n	80056d4 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 80056ba:	6839      	ldr	r1, [r7, #0]
 80056bc:	f107 0308 	add.w	r3, r7, #8
 80056c0:	2201      	movs	r2, #1
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f001 fe2a 	bl	800731c <xTaskGenericNotify>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d002      	beq.n	80056d4 <osSignalSet+0x70>
    return 0x80000000;
 80056ce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80056d2:	e000      	b.n	80056d6 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 80056d4:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3710      	adds	r7, #16
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	e000ed04 	.word	0xe000ed04

080056e4 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 80056e4:	b590      	push	{r4, r7, lr}
 80056e6:	b089      	sub	sp, #36	; 0x24
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 80056f0:	2300      	movs	r3, #0
 80056f2:	617b      	str	r3, [r7, #20]
  ticks = 0;
 80056f4:	2300      	movs	r3, #0
 80056f6:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056fe:	d103      	bne.n	8005708 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8005700:	f04f 33ff 	mov.w	r3, #4294967295
 8005704:	61fb      	str	r3, [r7, #28]
 8005706:	e009      	b.n	800571c <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d006      	beq.n	800571c <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <osSignalWait+0x38>
      ticks = 1;
 8005718:	2301      	movs	r3, #1
 800571a:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 800571c:	f7ff fef4 	bl	8005508 <inHandlerMode>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d002      	beq.n	800572c <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8005726:	2382      	movs	r3, #130	; 0x82
 8005728:	613b      	str	r3, [r7, #16]
 800572a:	e01b      	b.n	8005764 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 800572c:	68b9      	ldr	r1, [r7, #8]
 800572e:	f107 0310 	add.w	r3, r7, #16
 8005732:	1d1a      	adds	r2, r3, #4
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	2000      	movs	r0, #0
 8005738:	f001 fd96 	bl	8007268 <xTaskNotifyWait>
 800573c:	4603      	mov	r3, r0
 800573e:	2b01      	cmp	r3, #1
 8005740:	d008      	beq.n	8005754 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d102      	bne.n	800574e <osSignalWait+0x6a>
 8005748:	2300      	movs	r3, #0
 800574a:	613b      	str	r3, [r7, #16]
 800574c:	e00a      	b.n	8005764 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 800574e:	2340      	movs	r3, #64	; 0x40
 8005750:	613b      	str	r3, [r7, #16]
 8005752:	e007      	b.n	8005764 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	2b00      	cmp	r3, #0
 8005758:	da02      	bge.n	8005760 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 800575a:	2386      	movs	r3, #134	; 0x86
 800575c:	613b      	str	r3, [r7, #16]
 800575e:	e001      	b.n	8005764 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8005760:	2308      	movs	r3, #8
 8005762:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	461c      	mov	r4, r3
 8005768:	f107 0310 	add.w	r3, r7, #16
 800576c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005770:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	3724      	adds	r7, #36	; 0x24
 8005778:	46bd      	mov	sp, r7
 800577a:	bd90      	pop	{r4, r7, pc}

0800577c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800577c:	b590      	push	{r4, r7, lr}
 800577e:	b085      	sub	sp, #20
 8005780:	af02      	add	r7, sp, #8
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d011      	beq.n	80057b2 <osMessageCreate+0x36>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00d      	beq.n	80057b2 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6818      	ldr	r0, [r3, #0]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6859      	ldr	r1, [r3, #4]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	689a      	ldr	r2, [r3, #8]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	2400      	movs	r4, #0
 80057a8:	9400      	str	r4, [sp, #0]
 80057aa:	f000 f9df 	bl	8005b6c <xQueueGenericCreateStatic>
 80057ae:	4603      	mov	r3, r0
 80057b0:	e008      	b.n	80057c4 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6818      	ldr	r0, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	4619      	mov	r1, r3
 80057be:	f000 fa4d 	bl	8005c5c <xQueueGenericCreate>
 80057c2:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd90      	pop	{r4, r7, pc}

080057cc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80057d8:	2300      	movs	r3, #0
 80057da:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d101      	bne.n	80057ea <osMessagePut+0x1e>
    ticks = 1;
 80057e6:	2301      	movs	r3, #1
 80057e8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80057ea:	f7ff fe8d 	bl	8005508 <inHandlerMode>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d018      	beq.n	8005826 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80057f4:	f107 0210 	add.w	r2, r7, #16
 80057f8:	f107 0108 	add.w	r1, r7, #8
 80057fc:	2300      	movs	r3, #0
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f000 fb84 	bl	8005f0c <xQueueGenericSendFromISR>
 8005804:	4603      	mov	r3, r0
 8005806:	2b01      	cmp	r3, #1
 8005808:	d001      	beq.n	800580e <osMessagePut+0x42>
      return osErrorOS;
 800580a:	23ff      	movs	r3, #255	; 0xff
 800580c:	e018      	b.n	8005840 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d014      	beq.n	800583e <osMessagePut+0x72>
 8005814:	4b0c      	ldr	r3, [pc, #48]	; (8005848 <osMessagePut+0x7c>)
 8005816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800581a:	601a      	str	r2, [r3, #0]
 800581c:	f3bf 8f4f 	dsb	sy
 8005820:	f3bf 8f6f 	isb	sy
 8005824:	e00b      	b.n	800583e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005826:	f107 0108 	add.w	r1, r7, #8
 800582a:	2300      	movs	r3, #0
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	f000 fa6e 	bl	8005d10 <xQueueGenericSend>
 8005834:	4603      	mov	r3, r0
 8005836:	2b01      	cmp	r3, #1
 8005838:	d001      	beq.n	800583e <osMessagePut+0x72>
      return osErrorOS;
 800583a:	23ff      	movs	r3, #255	; 0xff
 800583c:	e000      	b.n	8005840 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3718      	adds	r7, #24
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	e000ed04 	.word	0xe000ed04

0800584c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800584c:	b590      	push	{r4, r7, lr}
 800584e:	b08b      	sub	sp, #44	; 0x2c
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800585c:	2300      	movs	r3, #0
 800585e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10a      	bne.n	800587c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005866:	2380      	movs	r3, #128	; 0x80
 8005868:	617b      	str	r3, [r7, #20]
    return event;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	461c      	mov	r4, r3
 800586e:	f107 0314 	add.w	r3, r7, #20
 8005872:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005876:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800587a:	e054      	b.n	8005926 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800587c:	2300      	movs	r3, #0
 800587e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005880:	2300      	movs	r3, #0
 8005882:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800588a:	d103      	bne.n	8005894 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800588c:	f04f 33ff 	mov.w	r3, #4294967295
 8005890:	627b      	str	r3, [r7, #36]	; 0x24
 8005892:	e009      	b.n	80058a8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d006      	beq.n	80058a8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <osMessageGet+0x5c>
      ticks = 1;
 80058a4:	2301      	movs	r3, #1
 80058a6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80058a8:	f7ff fe2e 	bl	8005508 <inHandlerMode>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d01c      	beq.n	80058ec <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80058b2:	f107 0220 	add.w	r2, r7, #32
 80058b6:	f107 0314 	add.w	r3, r7, #20
 80058ba:	3304      	adds	r3, #4
 80058bc:	4619      	mov	r1, r3
 80058be:	68b8      	ldr	r0, [r7, #8]
 80058c0:	f000 fca0 	bl	8006204 <xQueueReceiveFromISR>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d102      	bne.n	80058d0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80058ca:	2310      	movs	r3, #16
 80058cc:	617b      	str	r3, [r7, #20]
 80058ce:	e001      	b.n	80058d4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80058d0:	2300      	movs	r3, #0
 80058d2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80058d4:	6a3b      	ldr	r3, [r7, #32]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d01d      	beq.n	8005916 <osMessageGet+0xca>
 80058da:	4b15      	ldr	r3, [pc, #84]	; (8005930 <osMessageGet+0xe4>)
 80058dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058e0:	601a      	str	r2, [r3, #0]
 80058e2:	f3bf 8f4f 	dsb	sy
 80058e6:	f3bf 8f6f 	isb	sy
 80058ea:	e014      	b.n	8005916 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80058ec:	f107 0314 	add.w	r3, r7, #20
 80058f0:	3304      	adds	r3, #4
 80058f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058f4:	4619      	mov	r1, r3
 80058f6:	68b8      	ldr	r0, [r7, #8]
 80058f8:	f000 fba4 	bl	8006044 <xQueueReceive>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d102      	bne.n	8005908 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005902:	2310      	movs	r3, #16
 8005904:	617b      	str	r3, [r7, #20]
 8005906:	e006      	b.n	8005916 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590a:	2b00      	cmp	r3, #0
 800590c:	d101      	bne.n	8005912 <osMessageGet+0xc6>
 800590e:	2300      	movs	r3, #0
 8005910:	e000      	b.n	8005914 <osMessageGet+0xc8>
 8005912:	2340      	movs	r3, #64	; 0x40
 8005914:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	461c      	mov	r4, r3
 800591a:	f107 0314 	add.w	r3, r7, #20
 800591e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005922:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	372c      	adds	r7, #44	; 0x2c
 800592a:	46bd      	mov	sp, r7
 800592c:	bd90      	pop	{r4, r7, pc}
 800592e:	bf00      	nop
 8005930:	e000ed04 	.word	0xe000ed04

08005934 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f103 0208 	add.w	r2, r3, #8
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f04f 32ff 	mov.w	r2, #4294967295
 800594c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f103 0208 	add.w	r2, r3, #8
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f103 0208 	add.w	r2, r3, #8
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005982:	bf00      	nop
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr

0800598e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800598e:	b480      	push	{r7}
 8005990:	b085      	sub	sp, #20
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
 8005996:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	689a      	ldr	r2, [r3, #8]
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	683a      	ldr	r2, [r7, #0]
 80059b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	1c5a      	adds	r2, r3, #1
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	601a      	str	r2, [r3, #0]
}
 80059ca:	bf00      	nop
 80059cc:	3714      	adds	r7, #20
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr

080059d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80059d6:	b480      	push	{r7}
 80059d8:	b085      	sub	sp, #20
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
 80059de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ec:	d103      	bne.n	80059f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	60fb      	str	r3, [r7, #12]
 80059f4:	e00c      	b.n	8005a10 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	3308      	adds	r3, #8
 80059fa:	60fb      	str	r3, [r7, #12]
 80059fc:	e002      	b.n	8005a04 <vListInsert+0x2e>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	60fb      	str	r3, [r7, #12]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d2f6      	bcs.n	80059fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	685a      	ldr	r2, [r3, #4]
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	683a      	ldr	r2, [r7, #0]
 8005a1e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	683a      	ldr	r2, [r7, #0]
 8005a2a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	1c5a      	adds	r2, r3, #1
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	601a      	str	r2, [r3, #0]
}
 8005a3c:	bf00      	nop
 8005a3e:	3714      	adds	r7, #20
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	6892      	ldr	r2, [r2, #8]
 8005a5e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	6852      	ldr	r2, [r2, #4]
 8005a68:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d103      	bne.n	8005a7c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	689a      	ldr	r2, [r3, #8]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	1e5a      	subs	r2, r3, #1
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3714      	adds	r7, #20
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d10a      	bne.n	8005ac6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab4:	f383 8811 	msr	BASEPRI, r3
 8005ab8:	f3bf 8f6f 	isb	sy
 8005abc:	f3bf 8f4f 	dsb	sy
 8005ac0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005ac2:	bf00      	nop
 8005ac4:	e7fe      	b.n	8005ac4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005ac6:	f002 fb05 	bl	80080d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ad2:	68f9      	ldr	r1, [r7, #12]
 8005ad4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005ad6:	fb01 f303 	mul.w	r3, r1, r3
 8005ada:	441a      	add	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af6:	3b01      	subs	r3, #1
 8005af8:	68f9      	ldr	r1, [r7, #12]
 8005afa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005afc:	fb01 f303 	mul.w	r3, r1, r3
 8005b00:	441a      	add	r2, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	22ff      	movs	r2, #255	; 0xff
 8005b0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	22ff      	movs	r2, #255	; 0xff
 8005b12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d114      	bne.n	8005b46 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d01a      	beq.n	8005b5a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	3310      	adds	r3, #16
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f001 f9a5 	bl	8006e78 <xTaskRemoveFromEventList>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d012      	beq.n	8005b5a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005b34:	4b0c      	ldr	r3, [pc, #48]	; (8005b68 <xQueueGenericReset+0xcc>)
 8005b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b3a:	601a      	str	r2, [r3, #0]
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	f3bf 8f6f 	isb	sy
 8005b44:	e009      	b.n	8005b5a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	3310      	adds	r3, #16
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f7ff fef2 	bl	8005934 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	3324      	adds	r3, #36	; 0x24
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7ff feed 	bl	8005934 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005b5a:	f002 faeb 	bl	8008134 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005b5e:	2301      	movs	r3, #1
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	e000ed04 	.word	0xe000ed04

08005b6c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b08e      	sub	sp, #56	; 0x38
 8005b70:	af02      	add	r7, sp, #8
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
 8005b78:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d10a      	bne.n	8005b96 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b84:	f383 8811 	msr	BASEPRI, r3
 8005b88:	f3bf 8f6f 	isb	sy
 8005b8c:	f3bf 8f4f 	dsb	sy
 8005b90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005b92:	bf00      	nop
 8005b94:	e7fe      	b.n	8005b94 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d10a      	bne.n	8005bb2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba0:	f383 8811 	msr	BASEPRI, r3
 8005ba4:	f3bf 8f6f 	isb	sy
 8005ba8:	f3bf 8f4f 	dsb	sy
 8005bac:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005bae:	bf00      	nop
 8005bb0:	e7fe      	b.n	8005bb0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d002      	beq.n	8005bbe <xQueueGenericCreateStatic+0x52>
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d001      	beq.n	8005bc2 <xQueueGenericCreateStatic+0x56>
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e000      	b.n	8005bc4 <xQueueGenericCreateStatic+0x58>
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d10a      	bne.n	8005bde <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bcc:	f383 8811 	msr	BASEPRI, r3
 8005bd0:	f3bf 8f6f 	isb	sy
 8005bd4:	f3bf 8f4f 	dsb	sy
 8005bd8:	623b      	str	r3, [r7, #32]
}
 8005bda:	bf00      	nop
 8005bdc:	e7fe      	b.n	8005bdc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d102      	bne.n	8005bea <xQueueGenericCreateStatic+0x7e>
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <xQueueGenericCreateStatic+0x82>
 8005bea:	2301      	movs	r3, #1
 8005bec:	e000      	b.n	8005bf0 <xQueueGenericCreateStatic+0x84>
 8005bee:	2300      	movs	r3, #0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d10a      	bne.n	8005c0a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf8:	f383 8811 	msr	BASEPRI, r3
 8005bfc:	f3bf 8f6f 	isb	sy
 8005c00:	f3bf 8f4f 	dsb	sy
 8005c04:	61fb      	str	r3, [r7, #28]
}
 8005c06:	bf00      	nop
 8005c08:	e7fe      	b.n	8005c08 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005c0a:	2348      	movs	r3, #72	; 0x48
 8005c0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	2b48      	cmp	r3, #72	; 0x48
 8005c12:	d00a      	beq.n	8005c2a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c18:	f383 8811 	msr	BASEPRI, r3
 8005c1c:	f3bf 8f6f 	isb	sy
 8005c20:	f3bf 8f4f 	dsb	sy
 8005c24:	61bb      	str	r3, [r7, #24]
}
 8005c26:	bf00      	nop
 8005c28:	e7fe      	b.n	8005c28 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005c2a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00d      	beq.n	8005c52 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005c3e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c44:	9300      	str	r3, [sp, #0]
 8005c46:	4613      	mov	r3, r2
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	68b9      	ldr	r1, [r7, #8]
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f000 f83f 	bl	8005cd0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3730      	adds	r7, #48	; 0x30
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b08a      	sub	sp, #40	; 0x28
 8005c60:	af02      	add	r7, sp, #8
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	4613      	mov	r3, r2
 8005c68:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10a      	bne.n	8005c86 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c74:	f383 8811 	msr	BASEPRI, r3
 8005c78:	f3bf 8f6f 	isb	sy
 8005c7c:	f3bf 8f4f 	dsb	sy
 8005c80:	613b      	str	r3, [r7, #16]
}
 8005c82:	bf00      	nop
 8005c84:	e7fe      	b.n	8005c84 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	68ba      	ldr	r2, [r7, #8]
 8005c8a:	fb02 f303 	mul.w	r3, r2, r3
 8005c8e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	3348      	adds	r3, #72	; 0x48
 8005c94:	4618      	mov	r0, r3
 8005c96:	f002 fb3f 	bl	8008318 <pvPortMalloc>
 8005c9a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d011      	beq.n	8005cc6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	3348      	adds	r3, #72	; 0x48
 8005caa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005cb4:	79fa      	ldrb	r2, [r7, #7]
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	4613      	mov	r3, r2
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	68b9      	ldr	r1, [r7, #8]
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f000 f805 	bl	8005cd0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005cc6:	69bb      	ldr	r3, [r7, #24]
	}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3720      	adds	r7, #32
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
 8005cdc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d103      	bne.n	8005cec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	69ba      	ldr	r2, [r7, #24]
 8005ce8:	601a      	str	r2, [r3, #0]
 8005cea:	e002      	b.n	8005cf2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	68ba      	ldr	r2, [r7, #8]
 8005cfc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005cfe:	2101      	movs	r1, #1
 8005d00:	69b8      	ldr	r0, [r7, #24]
 8005d02:	f7ff fecb 	bl	8005a9c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005d06:	bf00      	nop
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
	...

08005d10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b08e      	sub	sp, #56	; 0x38
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
 8005d1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d10a      	bne.n	8005d42 <xQueueGenericSend+0x32>
	__asm volatile
 8005d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d30:	f383 8811 	msr	BASEPRI, r3
 8005d34:	f3bf 8f6f 	isb	sy
 8005d38:	f3bf 8f4f 	dsb	sy
 8005d3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005d3e:	bf00      	nop
 8005d40:	e7fe      	b.n	8005d40 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d103      	bne.n	8005d50 <xQueueGenericSend+0x40>
 8005d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d101      	bne.n	8005d54 <xQueueGenericSend+0x44>
 8005d50:	2301      	movs	r3, #1
 8005d52:	e000      	b.n	8005d56 <xQueueGenericSend+0x46>
 8005d54:	2300      	movs	r3, #0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d10a      	bne.n	8005d70 <xQueueGenericSend+0x60>
	__asm volatile
 8005d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5e:	f383 8811 	msr	BASEPRI, r3
 8005d62:	f3bf 8f6f 	isb	sy
 8005d66:	f3bf 8f4f 	dsb	sy
 8005d6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005d6c:	bf00      	nop
 8005d6e:	e7fe      	b.n	8005d6e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d103      	bne.n	8005d7e <xQueueGenericSend+0x6e>
 8005d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d101      	bne.n	8005d82 <xQueueGenericSend+0x72>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e000      	b.n	8005d84 <xQueueGenericSend+0x74>
 8005d82:	2300      	movs	r3, #0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d10a      	bne.n	8005d9e <xQueueGenericSend+0x8e>
	__asm volatile
 8005d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8c:	f383 8811 	msr	BASEPRI, r3
 8005d90:	f3bf 8f6f 	isb	sy
 8005d94:	f3bf 8f4f 	dsb	sy
 8005d98:	623b      	str	r3, [r7, #32]
}
 8005d9a:	bf00      	nop
 8005d9c:	e7fe      	b.n	8005d9c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d9e:	f001 f9bf 	bl	8007120 <xTaskGetSchedulerState>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d102      	bne.n	8005dae <xQueueGenericSend+0x9e>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d101      	bne.n	8005db2 <xQueueGenericSend+0xa2>
 8005dae:	2301      	movs	r3, #1
 8005db0:	e000      	b.n	8005db4 <xQueueGenericSend+0xa4>
 8005db2:	2300      	movs	r3, #0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10a      	bne.n	8005dce <xQueueGenericSend+0xbe>
	__asm volatile
 8005db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dbc:	f383 8811 	msr	BASEPRI, r3
 8005dc0:	f3bf 8f6f 	isb	sy
 8005dc4:	f3bf 8f4f 	dsb	sy
 8005dc8:	61fb      	str	r3, [r7, #28]
}
 8005dca:	bf00      	nop
 8005dcc:	e7fe      	b.n	8005dcc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005dce:	f002 f981 	bl	80080d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d302      	bcc.n	8005de4 <xQueueGenericSend+0xd4>
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	d129      	bne.n	8005e38 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005de4:	683a      	ldr	r2, [r7, #0]
 8005de6:	68b9      	ldr	r1, [r7, #8]
 8005de8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dea:	f000 fa8b 	bl	8006304 <prvCopyDataToQueue>
 8005dee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d010      	beq.n	8005e1a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfa:	3324      	adds	r3, #36	; 0x24
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f001 f83b 	bl	8006e78 <xTaskRemoveFromEventList>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d013      	beq.n	8005e30 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005e08:	4b3f      	ldr	r3, [pc, #252]	; (8005f08 <xQueueGenericSend+0x1f8>)
 8005e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e0e:	601a      	str	r2, [r3, #0]
 8005e10:	f3bf 8f4f 	dsb	sy
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	e00a      	b.n	8005e30 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d007      	beq.n	8005e30 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005e20:	4b39      	ldr	r3, [pc, #228]	; (8005f08 <xQueueGenericSend+0x1f8>)
 8005e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e26:	601a      	str	r2, [r3, #0]
 8005e28:	f3bf 8f4f 	dsb	sy
 8005e2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005e30:	f002 f980 	bl	8008134 <vPortExitCritical>
				return pdPASS;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e063      	b.n	8005f00 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d103      	bne.n	8005e46 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e3e:	f002 f979 	bl	8008134 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005e42:	2300      	movs	r3, #0
 8005e44:	e05c      	b.n	8005f00 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d106      	bne.n	8005e5a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e4c:	f107 0314 	add.w	r3, r7, #20
 8005e50:	4618      	mov	r0, r3
 8005e52:	f001 f873 	bl	8006f3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e56:	2301      	movs	r3, #1
 8005e58:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e5a:	f002 f96b 	bl	8008134 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e5e:	f000 fded 	bl	8006a3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e62:	f002 f937 	bl	80080d4 <vPortEnterCritical>
 8005e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e6c:	b25b      	sxtb	r3, r3
 8005e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e72:	d103      	bne.n	8005e7c <xQueueGenericSend+0x16c>
 8005e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e82:	b25b      	sxtb	r3, r3
 8005e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e88:	d103      	bne.n	8005e92 <xQueueGenericSend+0x182>
 8005e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e92:	f002 f94f 	bl	8008134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e96:	1d3a      	adds	r2, r7, #4
 8005e98:	f107 0314 	add.w	r3, r7, #20
 8005e9c:	4611      	mov	r1, r2
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f001 f862 	bl	8006f68 <xTaskCheckForTimeOut>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d124      	bne.n	8005ef4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005eaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005eac:	f000 fb22 	bl	80064f4 <prvIsQueueFull>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d018      	beq.n	8005ee8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb8:	3310      	adds	r3, #16
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	4611      	mov	r1, r2
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f000 ff8a 	bl	8006dd8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005ec4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ec6:	f000 faad 	bl	8006424 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005eca:	f000 fdc5 	bl	8006a58 <xTaskResumeAll>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	f47f af7c 	bne.w	8005dce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005ed6:	4b0c      	ldr	r3, [pc, #48]	; (8005f08 <xQueueGenericSend+0x1f8>)
 8005ed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005edc:	601a      	str	r2, [r3, #0]
 8005ede:	f3bf 8f4f 	dsb	sy
 8005ee2:	f3bf 8f6f 	isb	sy
 8005ee6:	e772      	b.n	8005dce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ee8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005eea:	f000 fa9b 	bl	8006424 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005eee:	f000 fdb3 	bl	8006a58 <xTaskResumeAll>
 8005ef2:	e76c      	b.n	8005dce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005ef4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ef6:	f000 fa95 	bl	8006424 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005efa:	f000 fdad 	bl	8006a58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005efe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3738      	adds	r7, #56	; 0x38
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	e000ed04 	.word	0xe000ed04

08005f0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b090      	sub	sp, #64	; 0x40
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
 8005f18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d10a      	bne.n	8005f3a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f28:	f383 8811 	msr	BASEPRI, r3
 8005f2c:	f3bf 8f6f 	isb	sy
 8005f30:	f3bf 8f4f 	dsb	sy
 8005f34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f36:	bf00      	nop
 8005f38:	e7fe      	b.n	8005f38 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d103      	bne.n	8005f48 <xQueueGenericSendFromISR+0x3c>
 8005f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d101      	bne.n	8005f4c <xQueueGenericSendFromISR+0x40>
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e000      	b.n	8005f4e <xQueueGenericSendFromISR+0x42>
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10a      	bne.n	8005f68 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f56:	f383 8811 	msr	BASEPRI, r3
 8005f5a:	f3bf 8f6f 	isb	sy
 8005f5e:	f3bf 8f4f 	dsb	sy
 8005f62:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f64:	bf00      	nop
 8005f66:	e7fe      	b.n	8005f66 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d103      	bne.n	8005f76 <xQueueGenericSendFromISR+0x6a>
 8005f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d101      	bne.n	8005f7a <xQueueGenericSendFromISR+0x6e>
 8005f76:	2301      	movs	r3, #1
 8005f78:	e000      	b.n	8005f7c <xQueueGenericSendFromISR+0x70>
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10a      	bne.n	8005f96 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f84:	f383 8811 	msr	BASEPRI, r3
 8005f88:	f3bf 8f6f 	isb	sy
 8005f8c:	f3bf 8f4f 	dsb	sy
 8005f90:	623b      	str	r3, [r7, #32]
}
 8005f92:	bf00      	nop
 8005f94:	e7fe      	b.n	8005f94 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f96:	f002 f97f 	bl	8008298 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005f9a:	f3ef 8211 	mrs	r2, BASEPRI
 8005f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa2:	f383 8811 	msr	BASEPRI, r3
 8005fa6:	f3bf 8f6f 	isb	sy
 8005faa:	f3bf 8f4f 	dsb	sy
 8005fae:	61fa      	str	r2, [r7, #28]
 8005fb0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005fb2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005fb4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d302      	bcc.n	8005fc8 <xQueueGenericSendFromISR+0xbc>
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d12f      	bne.n	8006028 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005fd8:	683a      	ldr	r2, [r7, #0]
 8005fda:	68b9      	ldr	r1, [r7, #8]
 8005fdc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005fde:	f000 f991 	bl	8006304 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005fe2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fea:	d112      	bne.n	8006012 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d016      	beq.n	8006022 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff6:	3324      	adds	r3, #36	; 0x24
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f000 ff3d 	bl	8006e78 <xTaskRemoveFromEventList>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00e      	beq.n	8006022 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00b      	beq.n	8006022 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2201      	movs	r2, #1
 800600e:	601a      	str	r2, [r3, #0]
 8006010:	e007      	b.n	8006022 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006012:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006016:	3301      	adds	r3, #1
 8006018:	b2db      	uxtb	r3, r3
 800601a:	b25a      	sxtb	r2, r3
 800601c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006022:	2301      	movs	r3, #1
 8006024:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006026:	e001      	b.n	800602c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006028:	2300      	movs	r3, #0
 800602a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800602c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800602e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006036:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800603a:	4618      	mov	r0, r3
 800603c:	3740      	adds	r7, #64	; 0x40
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
	...

08006044 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b08c      	sub	sp, #48	; 0x30
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006050:	2300      	movs	r3, #0
 8006052:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10a      	bne.n	8006074 <xQueueReceive+0x30>
	__asm volatile
 800605e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006062:	f383 8811 	msr	BASEPRI, r3
 8006066:	f3bf 8f6f 	isb	sy
 800606a:	f3bf 8f4f 	dsb	sy
 800606e:	623b      	str	r3, [r7, #32]
}
 8006070:	bf00      	nop
 8006072:	e7fe      	b.n	8006072 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d103      	bne.n	8006082 <xQueueReceive+0x3e>
 800607a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607e:	2b00      	cmp	r3, #0
 8006080:	d101      	bne.n	8006086 <xQueueReceive+0x42>
 8006082:	2301      	movs	r3, #1
 8006084:	e000      	b.n	8006088 <xQueueReceive+0x44>
 8006086:	2300      	movs	r3, #0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d10a      	bne.n	80060a2 <xQueueReceive+0x5e>
	__asm volatile
 800608c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006090:	f383 8811 	msr	BASEPRI, r3
 8006094:	f3bf 8f6f 	isb	sy
 8006098:	f3bf 8f4f 	dsb	sy
 800609c:	61fb      	str	r3, [r7, #28]
}
 800609e:	bf00      	nop
 80060a0:	e7fe      	b.n	80060a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060a2:	f001 f83d 	bl	8007120 <xTaskGetSchedulerState>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d102      	bne.n	80060b2 <xQueueReceive+0x6e>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <xQueueReceive+0x72>
 80060b2:	2301      	movs	r3, #1
 80060b4:	e000      	b.n	80060b8 <xQueueReceive+0x74>
 80060b6:	2300      	movs	r3, #0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d10a      	bne.n	80060d2 <xQueueReceive+0x8e>
	__asm volatile
 80060bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c0:	f383 8811 	msr	BASEPRI, r3
 80060c4:	f3bf 8f6f 	isb	sy
 80060c8:	f3bf 8f4f 	dsb	sy
 80060cc:	61bb      	str	r3, [r7, #24]
}
 80060ce:	bf00      	nop
 80060d0:	e7fe      	b.n	80060d0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80060d2:	f001 ffff 	bl	80080d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d01f      	beq.n	8006122 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80060e2:	68b9      	ldr	r1, [r7, #8]
 80060e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060e6:	f000 f977 	bl	80063d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ec:	1e5a      	subs	r2, r3, #1
 80060ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00f      	beq.n	800611a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fc:	3310      	adds	r3, #16
 80060fe:	4618      	mov	r0, r3
 8006100:	f000 feba 	bl	8006e78 <xTaskRemoveFromEventList>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d007      	beq.n	800611a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800610a:	4b3d      	ldr	r3, [pc, #244]	; (8006200 <xQueueReceive+0x1bc>)
 800610c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006110:	601a      	str	r2, [r3, #0]
 8006112:	f3bf 8f4f 	dsb	sy
 8006116:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800611a:	f002 f80b 	bl	8008134 <vPortExitCritical>
				return pdPASS;
 800611e:	2301      	movs	r3, #1
 8006120:	e069      	b.n	80061f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d103      	bne.n	8006130 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006128:	f002 f804 	bl	8008134 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800612c:	2300      	movs	r3, #0
 800612e:	e062      	b.n	80061f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006132:	2b00      	cmp	r3, #0
 8006134:	d106      	bne.n	8006144 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006136:	f107 0310 	add.w	r3, r7, #16
 800613a:	4618      	mov	r0, r3
 800613c:	f000 fefe 	bl	8006f3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006140:	2301      	movs	r3, #1
 8006142:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006144:	f001 fff6 	bl	8008134 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006148:	f000 fc78 	bl	8006a3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800614c:	f001 ffc2 	bl	80080d4 <vPortEnterCritical>
 8006150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006152:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006156:	b25b      	sxtb	r3, r3
 8006158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800615c:	d103      	bne.n	8006166 <xQueueReceive+0x122>
 800615e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006160:	2200      	movs	r2, #0
 8006162:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006168:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800616c:	b25b      	sxtb	r3, r3
 800616e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006172:	d103      	bne.n	800617c <xQueueReceive+0x138>
 8006174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006176:	2200      	movs	r2, #0
 8006178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800617c:	f001 ffda 	bl	8008134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006180:	1d3a      	adds	r2, r7, #4
 8006182:	f107 0310 	add.w	r3, r7, #16
 8006186:	4611      	mov	r1, r2
 8006188:	4618      	mov	r0, r3
 800618a:	f000 feed 	bl	8006f68 <xTaskCheckForTimeOut>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d123      	bne.n	80061dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006194:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006196:	f000 f997 	bl	80064c8 <prvIsQueueEmpty>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d017      	beq.n	80061d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80061a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a2:	3324      	adds	r3, #36	; 0x24
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	4611      	mov	r1, r2
 80061a8:	4618      	mov	r0, r3
 80061aa:	f000 fe15 	bl	8006dd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80061ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061b0:	f000 f938 	bl	8006424 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80061b4:	f000 fc50 	bl	8006a58 <xTaskResumeAll>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d189      	bne.n	80060d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80061be:	4b10      	ldr	r3, [pc, #64]	; (8006200 <xQueueReceive+0x1bc>)
 80061c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061c4:	601a      	str	r2, [r3, #0]
 80061c6:	f3bf 8f4f 	dsb	sy
 80061ca:	f3bf 8f6f 	isb	sy
 80061ce:	e780      	b.n	80060d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80061d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061d2:	f000 f927 	bl	8006424 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80061d6:	f000 fc3f 	bl	8006a58 <xTaskResumeAll>
 80061da:	e77a      	b.n	80060d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80061dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061de:	f000 f921 	bl	8006424 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80061e2:	f000 fc39 	bl	8006a58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061e8:	f000 f96e 	bl	80064c8 <prvIsQueueEmpty>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f43f af6f 	beq.w	80060d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80061f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3730      	adds	r7, #48	; 0x30
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	e000ed04 	.word	0xe000ed04

08006204 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b08e      	sub	sp, #56	; 0x38
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10a      	bne.n	8006230 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800621a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621e:	f383 8811 	msr	BASEPRI, r3
 8006222:	f3bf 8f6f 	isb	sy
 8006226:	f3bf 8f4f 	dsb	sy
 800622a:	623b      	str	r3, [r7, #32]
}
 800622c:	bf00      	nop
 800622e:	e7fe      	b.n	800622e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d103      	bne.n	800623e <xQueueReceiveFromISR+0x3a>
 8006236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623a:	2b00      	cmp	r3, #0
 800623c:	d101      	bne.n	8006242 <xQueueReceiveFromISR+0x3e>
 800623e:	2301      	movs	r3, #1
 8006240:	e000      	b.n	8006244 <xQueueReceiveFromISR+0x40>
 8006242:	2300      	movs	r3, #0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10a      	bne.n	800625e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624c:	f383 8811 	msr	BASEPRI, r3
 8006250:	f3bf 8f6f 	isb	sy
 8006254:	f3bf 8f4f 	dsb	sy
 8006258:	61fb      	str	r3, [r7, #28]
}
 800625a:	bf00      	nop
 800625c:	e7fe      	b.n	800625c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800625e:	f002 f81b 	bl	8008298 <vPortValidateInterruptPriority>
	__asm volatile
 8006262:	f3ef 8211 	mrs	r2, BASEPRI
 8006266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626a:	f383 8811 	msr	BASEPRI, r3
 800626e:	f3bf 8f6f 	isb	sy
 8006272:	f3bf 8f4f 	dsb	sy
 8006276:	61ba      	str	r2, [r7, #24]
 8006278:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800627a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800627c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800627e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006282:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006286:	2b00      	cmp	r3, #0
 8006288:	d02f      	beq.n	80062ea <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800628a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006290:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006294:	68b9      	ldr	r1, [r7, #8]
 8006296:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006298:	f000 f89e 	bl	80063d8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800629c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629e:	1e5a      	subs	r2, r3, #1
 80062a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80062a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80062a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ac:	d112      	bne.n	80062d4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d016      	beq.n	80062e4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b8:	3310      	adds	r3, #16
 80062ba:	4618      	mov	r0, r3
 80062bc:	f000 fddc 	bl	8006e78 <xTaskRemoveFromEventList>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00e      	beq.n	80062e4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00b      	beq.n	80062e4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	601a      	str	r2, [r3, #0]
 80062d2:	e007      	b.n	80062e4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80062d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062d8:	3301      	adds	r3, #1
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	b25a      	sxtb	r2, r3
 80062de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80062e4:	2301      	movs	r3, #1
 80062e6:	637b      	str	r3, [r7, #52]	; 0x34
 80062e8:	e001      	b.n	80062ee <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80062ea:	2300      	movs	r3, #0
 80062ec:	637b      	str	r3, [r7, #52]	; 0x34
 80062ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	f383 8811 	msr	BASEPRI, r3
}
 80062f8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80062fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3738      	adds	r7, #56	; 0x38
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b086      	sub	sp, #24
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006310:	2300      	movs	r3, #0
 8006312:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006318:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631e:	2b00      	cmp	r3, #0
 8006320:	d10d      	bne.n	800633e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d14d      	bne.n	80063c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	4618      	mov	r0, r3
 8006330:	f000 ff14 	bl	800715c <xTaskPriorityDisinherit>
 8006334:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	609a      	str	r2, [r3, #8]
 800633c:	e043      	b.n	80063c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d119      	bne.n	8006378 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6858      	ldr	r0, [r3, #4]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634c:	461a      	mov	r2, r3
 800634e:	68b9      	ldr	r1, [r7, #8]
 8006350:	f002 f9f6 	bl	8008740 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	685a      	ldr	r2, [r3, #4]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635c:	441a      	add	r2, r3
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	685a      	ldr	r2, [r3, #4]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	429a      	cmp	r2, r3
 800636c:	d32b      	bcc.n	80063c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	605a      	str	r2, [r3, #4]
 8006376:	e026      	b.n	80063c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	68d8      	ldr	r0, [r3, #12]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006380:	461a      	mov	r2, r3
 8006382:	68b9      	ldr	r1, [r7, #8]
 8006384:	f002 f9dc 	bl	8008740 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	68da      	ldr	r2, [r3, #12]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006390:	425b      	negs	r3, r3
 8006392:	441a      	add	r2, r3
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	68da      	ldr	r2, [r3, #12]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d207      	bcs.n	80063b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	689a      	ldr	r2, [r3, #8]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ac:	425b      	negs	r3, r3
 80063ae:	441a      	add	r2, r3
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d105      	bne.n	80063c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d002      	beq.n	80063c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	3b01      	subs	r3, #1
 80063c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	1c5a      	adds	r2, r3, #1
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80063ce:	697b      	ldr	r3, [r7, #20]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3718      	adds	r7, #24
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d018      	beq.n	800641c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	68da      	ldr	r2, [r3, #12]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f2:	441a      	add	r2, r3
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	68da      	ldr	r2, [r3, #12]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	429a      	cmp	r2, r3
 8006402:	d303      	bcc.n	800640c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	68d9      	ldr	r1, [r3, #12]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006414:	461a      	mov	r2, r3
 8006416:	6838      	ldr	r0, [r7, #0]
 8006418:	f002 f992 	bl	8008740 <memcpy>
	}
}
 800641c:	bf00      	nop
 800641e:	3708      	adds	r7, #8
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800642c:	f001 fe52 	bl	80080d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006436:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006438:	e011      	b.n	800645e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643e:	2b00      	cmp	r3, #0
 8006440:	d012      	beq.n	8006468 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	3324      	adds	r3, #36	; 0x24
 8006446:	4618      	mov	r0, r3
 8006448:	f000 fd16 	bl	8006e78 <xTaskRemoveFromEventList>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d001      	beq.n	8006456 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006452:	f000 fde3 	bl	800701c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006456:	7bfb      	ldrb	r3, [r7, #15]
 8006458:	3b01      	subs	r3, #1
 800645a:	b2db      	uxtb	r3, r3
 800645c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800645e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006462:	2b00      	cmp	r3, #0
 8006464:	dce9      	bgt.n	800643a <prvUnlockQueue+0x16>
 8006466:	e000      	b.n	800646a <prvUnlockQueue+0x46>
					break;
 8006468:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	22ff      	movs	r2, #255	; 0xff
 800646e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006472:	f001 fe5f 	bl	8008134 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006476:	f001 fe2d 	bl	80080d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006480:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006482:	e011      	b.n	80064a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d012      	beq.n	80064b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	3310      	adds	r3, #16
 8006490:	4618      	mov	r0, r3
 8006492:	f000 fcf1 	bl	8006e78 <xTaskRemoveFromEventList>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d001      	beq.n	80064a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800649c:	f000 fdbe 	bl	800701c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80064a0:	7bbb      	ldrb	r3, [r7, #14]
 80064a2:	3b01      	subs	r3, #1
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80064a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	dce9      	bgt.n	8006484 <prvUnlockQueue+0x60>
 80064b0:	e000      	b.n	80064b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80064b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	22ff      	movs	r2, #255	; 0xff
 80064b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80064bc:	f001 fe3a 	bl	8008134 <vPortExitCritical>
}
 80064c0:	bf00      	nop
 80064c2:	3710      	adds	r7, #16
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80064d0:	f001 fe00 	bl	80080d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d102      	bne.n	80064e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80064dc:	2301      	movs	r3, #1
 80064de:	60fb      	str	r3, [r7, #12]
 80064e0:	e001      	b.n	80064e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80064e2:	2300      	movs	r3, #0
 80064e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80064e6:	f001 fe25 	bl	8008134 <vPortExitCritical>

	return xReturn;
 80064ea:	68fb      	ldr	r3, [r7, #12]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80064fc:	f001 fdea 	bl	80080d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006508:	429a      	cmp	r2, r3
 800650a:	d102      	bne.n	8006512 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800650c:	2301      	movs	r3, #1
 800650e:	60fb      	str	r3, [r7, #12]
 8006510:	e001      	b.n	8006516 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006512:	2300      	movs	r3, #0
 8006514:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006516:	f001 fe0d 	bl	8008134 <vPortExitCritical>

	return xReturn;
 800651a:	68fb      	ldr	r3, [r7, #12]
}
 800651c:	4618      	mov	r0, r3
 800651e:	3710      	adds	r7, #16
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800652e:	2300      	movs	r3, #0
 8006530:	60fb      	str	r3, [r7, #12]
 8006532:	e014      	b.n	800655e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006534:	4a0f      	ldr	r2, [pc, #60]	; (8006574 <vQueueAddToRegistry+0x50>)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d10b      	bne.n	8006558 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006540:	490c      	ldr	r1, [pc, #48]	; (8006574 <vQueueAddToRegistry+0x50>)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	683a      	ldr	r2, [r7, #0]
 8006546:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800654a:	4a0a      	ldr	r2, [pc, #40]	; (8006574 <vQueueAddToRegistry+0x50>)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	00db      	lsls	r3, r3, #3
 8006550:	4413      	add	r3, r2
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006556:	e006      	b.n	8006566 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	3301      	adds	r3, #1
 800655c:	60fb      	str	r3, [r7, #12]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2b07      	cmp	r3, #7
 8006562:	d9e7      	bls.n	8006534 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006564:	bf00      	nop
 8006566:	bf00      	nop
 8006568:	3714      	adds	r7, #20
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	20000898 	.word	0x20000898

08006578 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006578:	b580      	push	{r7, lr}
 800657a:	b086      	sub	sp, #24
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006588:	f001 fda4 	bl	80080d4 <vPortEnterCritical>
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006592:	b25b      	sxtb	r3, r3
 8006594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006598:	d103      	bne.n	80065a2 <vQueueWaitForMessageRestricted+0x2a>
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065a8:	b25b      	sxtb	r3, r3
 80065aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ae:	d103      	bne.n	80065b8 <vQueueWaitForMessageRestricted+0x40>
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065b8:	f001 fdbc 	bl	8008134 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d106      	bne.n	80065d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	3324      	adds	r3, #36	; 0x24
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	68b9      	ldr	r1, [r7, #8]
 80065cc:	4618      	mov	r0, r3
 80065ce:	f000 fc27 	bl	8006e20 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80065d2:	6978      	ldr	r0, [r7, #20]
 80065d4:	f7ff ff26 	bl	8006424 <prvUnlockQueue>
	}
 80065d8:	bf00      	nop
 80065da:	3718      	adds	r7, #24
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b08e      	sub	sp, #56	; 0x38
 80065e4:	af04      	add	r7, sp, #16
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	607a      	str	r2, [r7, #4]
 80065ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80065ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10a      	bne.n	800660a <xTaskCreateStatic+0x2a>
	__asm volatile
 80065f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f8:	f383 8811 	msr	BASEPRI, r3
 80065fc:	f3bf 8f6f 	isb	sy
 8006600:	f3bf 8f4f 	dsb	sy
 8006604:	623b      	str	r3, [r7, #32]
}
 8006606:	bf00      	nop
 8006608:	e7fe      	b.n	8006608 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800660a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660c:	2b00      	cmp	r3, #0
 800660e:	d10a      	bne.n	8006626 <xTaskCreateStatic+0x46>
	__asm volatile
 8006610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006614:	f383 8811 	msr	BASEPRI, r3
 8006618:	f3bf 8f6f 	isb	sy
 800661c:	f3bf 8f4f 	dsb	sy
 8006620:	61fb      	str	r3, [r7, #28]
}
 8006622:	bf00      	nop
 8006624:	e7fe      	b.n	8006624 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006626:	2354      	movs	r3, #84	; 0x54
 8006628:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	2b54      	cmp	r3, #84	; 0x54
 800662e:	d00a      	beq.n	8006646 <xTaskCreateStatic+0x66>
	__asm volatile
 8006630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006634:	f383 8811 	msr	BASEPRI, r3
 8006638:	f3bf 8f6f 	isb	sy
 800663c:	f3bf 8f4f 	dsb	sy
 8006640:	61bb      	str	r3, [r7, #24]
}
 8006642:	bf00      	nop
 8006644:	e7fe      	b.n	8006644 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006646:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800664a:	2b00      	cmp	r3, #0
 800664c:	d01e      	beq.n	800668c <xTaskCreateStatic+0xac>
 800664e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006650:	2b00      	cmp	r3, #0
 8006652:	d01b      	beq.n	800668c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006656:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800665c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800665e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006660:	2202      	movs	r2, #2
 8006662:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006666:	2300      	movs	r3, #0
 8006668:	9303      	str	r3, [sp, #12]
 800666a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666c:	9302      	str	r3, [sp, #8]
 800666e:	f107 0314 	add.w	r3, r7, #20
 8006672:	9301      	str	r3, [sp, #4]
 8006674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006676:	9300      	str	r3, [sp, #0]
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	68b9      	ldr	r1, [r7, #8]
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	f000 f850 	bl	8006724 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006684:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006686:	f000 f8d5 	bl	8006834 <prvAddNewTaskToReadyList>
 800668a:	e001      	b.n	8006690 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800668c:	2300      	movs	r3, #0
 800668e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006690:	697b      	ldr	r3, [r7, #20]
	}
 8006692:	4618      	mov	r0, r3
 8006694:	3728      	adds	r7, #40	; 0x28
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800669a:	b580      	push	{r7, lr}
 800669c:	b08c      	sub	sp, #48	; 0x30
 800669e:	af04      	add	r7, sp, #16
 80066a0:	60f8      	str	r0, [r7, #12]
 80066a2:	60b9      	str	r1, [r7, #8]
 80066a4:	603b      	str	r3, [r7, #0]
 80066a6:	4613      	mov	r3, r2
 80066a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80066aa:	88fb      	ldrh	r3, [r7, #6]
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4618      	mov	r0, r3
 80066b0:	f001 fe32 	bl	8008318 <pvPortMalloc>
 80066b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00e      	beq.n	80066da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80066bc:	2054      	movs	r0, #84	; 0x54
 80066be:	f001 fe2b 	bl	8008318 <pvPortMalloc>
 80066c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d003      	beq.n	80066d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	631a      	str	r2, [r3, #48]	; 0x30
 80066d0:	e005      	b.n	80066de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80066d2:	6978      	ldr	r0, [r7, #20]
 80066d4:	f001 feec 	bl	80084b0 <vPortFree>
 80066d8:	e001      	b.n	80066de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80066da:	2300      	movs	r3, #0
 80066dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d017      	beq.n	8006714 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80066ec:	88fa      	ldrh	r2, [r7, #6]
 80066ee:	2300      	movs	r3, #0
 80066f0:	9303      	str	r3, [sp, #12]
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	9302      	str	r3, [sp, #8]
 80066f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f8:	9301      	str	r3, [sp, #4]
 80066fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fc:	9300      	str	r3, [sp, #0]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	68b9      	ldr	r1, [r7, #8]
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f000 f80e 	bl	8006724 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006708:	69f8      	ldr	r0, [r7, #28]
 800670a:	f000 f893 	bl	8006834 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800670e:	2301      	movs	r3, #1
 8006710:	61bb      	str	r3, [r7, #24]
 8006712:	e002      	b.n	800671a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006714:	f04f 33ff 	mov.w	r3, #4294967295
 8006718:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800671a:	69bb      	ldr	r3, [r7, #24]
	}
 800671c:	4618      	mov	r0, r3
 800671e:	3720      	adds	r7, #32
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b088      	sub	sp, #32
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]
 8006730:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006734:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800673c:	3b01      	subs	r3, #1
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	4413      	add	r3, r2
 8006742:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	f023 0307 	bic.w	r3, r3, #7
 800674a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	f003 0307 	and.w	r3, r3, #7
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00a      	beq.n	800676c <prvInitialiseNewTask+0x48>
	__asm volatile
 8006756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675a:	f383 8811 	msr	BASEPRI, r3
 800675e:	f3bf 8f6f 	isb	sy
 8006762:	f3bf 8f4f 	dsb	sy
 8006766:	617b      	str	r3, [r7, #20]
}
 8006768:	bf00      	nop
 800676a:	e7fe      	b.n	800676a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d01f      	beq.n	80067b2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006772:	2300      	movs	r3, #0
 8006774:	61fb      	str	r3, [r7, #28]
 8006776:	e012      	b.n	800679e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006778:	68ba      	ldr	r2, [r7, #8]
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	4413      	add	r3, r2
 800677e:	7819      	ldrb	r1, [r3, #0]
 8006780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	4413      	add	r3, r2
 8006786:	3334      	adds	r3, #52	; 0x34
 8006788:	460a      	mov	r2, r1
 800678a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	4413      	add	r3, r2
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d006      	beq.n	80067a6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	3301      	adds	r3, #1
 800679c:	61fb      	str	r3, [r7, #28]
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	2b0f      	cmp	r3, #15
 80067a2:	d9e9      	bls.n	8006778 <prvInitialiseNewTask+0x54>
 80067a4:	e000      	b.n	80067a8 <prvInitialiseNewTask+0x84>
			{
				break;
 80067a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80067a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067b0:	e003      	b.n	80067ba <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80067b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80067ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067bc:	2b06      	cmp	r3, #6
 80067be:	d901      	bls.n	80067c4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80067c0:	2306      	movs	r3, #6
 80067c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80067c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80067ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067ce:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80067d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d2:	2200      	movs	r2, #0
 80067d4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80067d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d8:	3304      	adds	r3, #4
 80067da:	4618      	mov	r0, r3
 80067dc:	f7ff f8ca 	bl	8005974 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80067e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e2:	3318      	adds	r3, #24
 80067e4:	4618      	mov	r0, r3
 80067e6:	f7ff f8c5 	bl	8005974 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80067ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f2:	f1c3 0207 	rsb	r2, r3, #7
 80067f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80067fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006802:	2200      	movs	r2, #0
 8006804:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006808:	2200      	movs	r2, #0
 800680a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800680e:	683a      	ldr	r2, [r7, #0]
 8006810:	68f9      	ldr	r1, [r7, #12]
 8006812:	69b8      	ldr	r0, [r7, #24]
 8006814:	f001 fb32 	bl	8007e7c <pxPortInitialiseStack>
 8006818:	4602      	mov	r2, r0
 800681a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800681e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006820:	2b00      	cmp	r3, #0
 8006822:	d002      	beq.n	800682a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006826:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006828:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800682a:	bf00      	nop
 800682c:	3720      	adds	r7, #32
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
	...

08006834 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b082      	sub	sp, #8
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800683c:	f001 fc4a 	bl	80080d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006840:	4b2a      	ldr	r3, [pc, #168]	; (80068ec <prvAddNewTaskToReadyList+0xb8>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	3301      	adds	r3, #1
 8006846:	4a29      	ldr	r2, [pc, #164]	; (80068ec <prvAddNewTaskToReadyList+0xb8>)
 8006848:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800684a:	4b29      	ldr	r3, [pc, #164]	; (80068f0 <prvAddNewTaskToReadyList+0xbc>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d109      	bne.n	8006866 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006852:	4a27      	ldr	r2, [pc, #156]	; (80068f0 <prvAddNewTaskToReadyList+0xbc>)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006858:	4b24      	ldr	r3, [pc, #144]	; (80068ec <prvAddNewTaskToReadyList+0xb8>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2b01      	cmp	r3, #1
 800685e:	d110      	bne.n	8006882 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006860:	f000 fc00 	bl	8007064 <prvInitialiseTaskLists>
 8006864:	e00d      	b.n	8006882 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006866:	4b23      	ldr	r3, [pc, #140]	; (80068f4 <prvAddNewTaskToReadyList+0xc0>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d109      	bne.n	8006882 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800686e:	4b20      	ldr	r3, [pc, #128]	; (80068f0 <prvAddNewTaskToReadyList+0xbc>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006878:	429a      	cmp	r2, r3
 800687a:	d802      	bhi.n	8006882 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800687c:	4a1c      	ldr	r2, [pc, #112]	; (80068f0 <prvAddNewTaskToReadyList+0xbc>)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006882:	4b1d      	ldr	r3, [pc, #116]	; (80068f8 <prvAddNewTaskToReadyList+0xc4>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	3301      	adds	r3, #1
 8006888:	4a1b      	ldr	r2, [pc, #108]	; (80068f8 <prvAddNewTaskToReadyList+0xc4>)
 800688a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006890:	2201      	movs	r2, #1
 8006892:	409a      	lsls	r2, r3
 8006894:	4b19      	ldr	r3, [pc, #100]	; (80068fc <prvAddNewTaskToReadyList+0xc8>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4313      	orrs	r3, r2
 800689a:	4a18      	ldr	r2, [pc, #96]	; (80068fc <prvAddNewTaskToReadyList+0xc8>)
 800689c:	6013      	str	r3, [r2, #0]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a2:	4613      	mov	r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	4413      	add	r3, r2
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	4a15      	ldr	r2, [pc, #84]	; (8006900 <prvAddNewTaskToReadyList+0xcc>)
 80068ac:	441a      	add	r2, r3
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	3304      	adds	r3, #4
 80068b2:	4619      	mov	r1, r3
 80068b4:	4610      	mov	r0, r2
 80068b6:	f7ff f86a 	bl	800598e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80068ba:	f001 fc3b 	bl	8008134 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80068be:	4b0d      	ldr	r3, [pc, #52]	; (80068f4 <prvAddNewTaskToReadyList+0xc0>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d00e      	beq.n	80068e4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80068c6:	4b0a      	ldr	r3, [pc, #40]	; (80068f0 <prvAddNewTaskToReadyList+0xbc>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d207      	bcs.n	80068e4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80068d4:	4b0b      	ldr	r3, [pc, #44]	; (8006904 <prvAddNewTaskToReadyList+0xd0>)
 80068d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068da:	601a      	str	r2, [r3, #0]
 80068dc:	f3bf 8f4f 	dsb	sy
 80068e0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068e4:	bf00      	nop
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	200009ac 	.word	0x200009ac
 80068f0:	200008d8 	.word	0x200008d8
 80068f4:	200009b8 	.word	0x200009b8
 80068f8:	200009c8 	.word	0x200009c8
 80068fc:	200009b4 	.word	0x200009b4
 8006900:	200008dc 	.word	0x200008dc
 8006904:	e000ed04 	.word	0xe000ed04

08006908 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006910:	2300      	movs	r3, #0
 8006912:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d017      	beq.n	800694a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800691a:	4b13      	ldr	r3, [pc, #76]	; (8006968 <vTaskDelay+0x60>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00a      	beq.n	8006938 <vTaskDelay+0x30>
	__asm volatile
 8006922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006926:	f383 8811 	msr	BASEPRI, r3
 800692a:	f3bf 8f6f 	isb	sy
 800692e:	f3bf 8f4f 	dsb	sy
 8006932:	60bb      	str	r3, [r7, #8]
}
 8006934:	bf00      	nop
 8006936:	e7fe      	b.n	8006936 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006938:	f000 f880 	bl	8006a3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800693c:	2100      	movs	r1, #0
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 fe7c 	bl	800763c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006944:	f000 f888 	bl	8006a58 <xTaskResumeAll>
 8006948:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d107      	bne.n	8006960 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006950:	4b06      	ldr	r3, [pc, #24]	; (800696c <vTaskDelay+0x64>)
 8006952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006956:	601a      	str	r2, [r3, #0]
 8006958:	f3bf 8f4f 	dsb	sy
 800695c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006960:	bf00      	nop
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	200009d4 	.word	0x200009d4
 800696c:	e000ed04 	.word	0xe000ed04

08006970 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b08a      	sub	sp, #40	; 0x28
 8006974:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006976:	2300      	movs	r3, #0
 8006978:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800697a:	2300      	movs	r3, #0
 800697c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800697e:	463a      	mov	r2, r7
 8006980:	1d39      	adds	r1, r7, #4
 8006982:	f107 0308 	add.w	r3, r7, #8
 8006986:	4618      	mov	r0, r3
 8006988:	f7fa fb5e 	bl	8001048 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800698c:	6839      	ldr	r1, [r7, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	68ba      	ldr	r2, [r7, #8]
 8006992:	9202      	str	r2, [sp, #8]
 8006994:	9301      	str	r3, [sp, #4]
 8006996:	2300      	movs	r3, #0
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	2300      	movs	r3, #0
 800699c:	460a      	mov	r2, r1
 800699e:	4921      	ldr	r1, [pc, #132]	; (8006a24 <vTaskStartScheduler+0xb4>)
 80069a0:	4821      	ldr	r0, [pc, #132]	; (8006a28 <vTaskStartScheduler+0xb8>)
 80069a2:	f7ff fe1d 	bl	80065e0 <xTaskCreateStatic>
 80069a6:	4603      	mov	r3, r0
 80069a8:	4a20      	ldr	r2, [pc, #128]	; (8006a2c <vTaskStartScheduler+0xbc>)
 80069aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80069ac:	4b1f      	ldr	r3, [pc, #124]	; (8006a2c <vTaskStartScheduler+0xbc>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d002      	beq.n	80069ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80069b4:	2301      	movs	r3, #1
 80069b6:	617b      	str	r3, [r7, #20]
 80069b8:	e001      	b.n	80069be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80069ba:	2300      	movs	r3, #0
 80069bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d102      	bne.n	80069ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80069c4:	f000 fe8e 	bl	80076e4 <xTimerCreateTimerTask>
 80069c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d116      	bne.n	80069fe <vTaskStartScheduler+0x8e>
	__asm volatile
 80069d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	613b      	str	r3, [r7, #16]
}
 80069e2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80069e4:	4b12      	ldr	r3, [pc, #72]	; (8006a30 <vTaskStartScheduler+0xc0>)
 80069e6:	f04f 32ff 	mov.w	r2, #4294967295
 80069ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80069ec:	4b11      	ldr	r3, [pc, #68]	; (8006a34 <vTaskStartScheduler+0xc4>)
 80069ee:	2201      	movs	r2, #1
 80069f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80069f2:	4b11      	ldr	r3, [pc, #68]	; (8006a38 <vTaskStartScheduler+0xc8>)
 80069f4:	2200      	movs	r2, #0
 80069f6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80069f8:	f001 faca 	bl	8007f90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80069fc:	e00e      	b.n	8006a1c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a04:	d10a      	bne.n	8006a1c <vTaskStartScheduler+0xac>
	__asm volatile
 8006a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0a:	f383 8811 	msr	BASEPRI, r3
 8006a0e:	f3bf 8f6f 	isb	sy
 8006a12:	f3bf 8f4f 	dsb	sy
 8006a16:	60fb      	str	r3, [r7, #12]
}
 8006a18:	bf00      	nop
 8006a1a:	e7fe      	b.n	8006a1a <vTaskStartScheduler+0xaa>
}
 8006a1c:	bf00      	nop
 8006a1e:	3718      	adds	r7, #24
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	08009240 	.word	0x08009240
 8006a28:	08007035 	.word	0x08007035
 8006a2c:	200009d0 	.word	0x200009d0
 8006a30:	200009cc 	.word	0x200009cc
 8006a34:	200009b8 	.word	0x200009b8
 8006a38:	200009b0 	.word	0x200009b0

08006a3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006a40:	4b04      	ldr	r3, [pc, #16]	; (8006a54 <vTaskSuspendAll+0x18>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	3301      	adds	r3, #1
 8006a46:	4a03      	ldr	r2, [pc, #12]	; (8006a54 <vTaskSuspendAll+0x18>)
 8006a48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006a4a:	bf00      	nop
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr
 8006a54:	200009d4 	.word	0x200009d4

08006a58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006a62:	2300      	movs	r3, #0
 8006a64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006a66:	4b41      	ldr	r3, [pc, #260]	; (8006b6c <xTaskResumeAll+0x114>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d10a      	bne.n	8006a84 <xTaskResumeAll+0x2c>
	__asm volatile
 8006a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a72:	f383 8811 	msr	BASEPRI, r3
 8006a76:	f3bf 8f6f 	isb	sy
 8006a7a:	f3bf 8f4f 	dsb	sy
 8006a7e:	603b      	str	r3, [r7, #0]
}
 8006a80:	bf00      	nop
 8006a82:	e7fe      	b.n	8006a82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006a84:	f001 fb26 	bl	80080d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006a88:	4b38      	ldr	r3, [pc, #224]	; (8006b6c <xTaskResumeAll+0x114>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	4a37      	ldr	r2, [pc, #220]	; (8006b6c <xTaskResumeAll+0x114>)
 8006a90:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a92:	4b36      	ldr	r3, [pc, #216]	; (8006b6c <xTaskResumeAll+0x114>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d161      	bne.n	8006b5e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006a9a:	4b35      	ldr	r3, [pc, #212]	; (8006b70 <xTaskResumeAll+0x118>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d05d      	beq.n	8006b5e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006aa2:	e02e      	b.n	8006b02 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006aa4:	4b33      	ldr	r3, [pc, #204]	; (8006b74 <xTaskResumeAll+0x11c>)
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	3318      	adds	r3, #24
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f7fe ffc9 	bl	8005a48 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	3304      	adds	r3, #4
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7fe ffc4 	bl	8005a48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	409a      	lsls	r2, r3
 8006ac8:	4b2b      	ldr	r3, [pc, #172]	; (8006b78 <xTaskResumeAll+0x120>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	4a2a      	ldr	r2, [pc, #168]	; (8006b78 <xTaskResumeAll+0x120>)
 8006ad0:	6013      	str	r3, [r2, #0]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	4413      	add	r3, r2
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	4a27      	ldr	r2, [pc, #156]	; (8006b7c <xTaskResumeAll+0x124>)
 8006ae0:	441a      	add	r2, r3
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	3304      	adds	r3, #4
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	4610      	mov	r0, r2
 8006aea:	f7fe ff50 	bl	800598e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af2:	4b23      	ldr	r3, [pc, #140]	; (8006b80 <xTaskResumeAll+0x128>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d302      	bcc.n	8006b02 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006afc:	4b21      	ldr	r3, [pc, #132]	; (8006b84 <xTaskResumeAll+0x12c>)
 8006afe:	2201      	movs	r2, #1
 8006b00:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b02:	4b1c      	ldr	r3, [pc, #112]	; (8006b74 <xTaskResumeAll+0x11c>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d1cc      	bne.n	8006aa4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d001      	beq.n	8006b14 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006b10:	f000 fae6 	bl	80070e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006b14:	4b1c      	ldr	r3, [pc, #112]	; (8006b88 <xTaskResumeAll+0x130>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d010      	beq.n	8006b42 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006b20:	f000 f846 	bl	8006bb0 <xTaskIncrementTick>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d002      	beq.n	8006b30 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006b2a:	4b16      	ldr	r3, [pc, #88]	; (8006b84 <xTaskResumeAll+0x12c>)
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	3b01      	subs	r3, #1
 8006b34:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1f1      	bne.n	8006b20 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006b3c:	4b12      	ldr	r3, [pc, #72]	; (8006b88 <xTaskResumeAll+0x130>)
 8006b3e:	2200      	movs	r2, #0
 8006b40:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006b42:	4b10      	ldr	r3, [pc, #64]	; (8006b84 <xTaskResumeAll+0x12c>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d009      	beq.n	8006b5e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006b4e:	4b0f      	ldr	r3, [pc, #60]	; (8006b8c <xTaskResumeAll+0x134>)
 8006b50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b54:	601a      	str	r2, [r3, #0]
 8006b56:	f3bf 8f4f 	dsb	sy
 8006b5a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b5e:	f001 fae9 	bl	8008134 <vPortExitCritical>

	return xAlreadyYielded;
 8006b62:	68bb      	ldr	r3, [r7, #8]
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3710      	adds	r7, #16
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	200009d4 	.word	0x200009d4
 8006b70:	200009ac 	.word	0x200009ac
 8006b74:	20000998 	.word	0x20000998
 8006b78:	200009b4 	.word	0x200009b4
 8006b7c:	200008dc 	.word	0x200008dc
 8006b80:	200008d8 	.word	0x200008d8
 8006b84:	200009c0 	.word	0x200009c0
 8006b88:	200009bc 	.word	0x200009bc
 8006b8c:	e000ed04 	.word	0xe000ed04

08006b90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006b96:	4b05      	ldr	r3, [pc, #20]	; (8006bac <xTaskGetTickCount+0x1c>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006b9c:	687b      	ldr	r3, [r7, #4]
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	370c      	adds	r7, #12
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
 8006baa:	bf00      	nop
 8006bac:	200009b0 	.word	0x200009b0

08006bb0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bba:	4b4e      	ldr	r3, [pc, #312]	; (8006cf4 <xTaskIncrementTick+0x144>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f040 808e 	bne.w	8006ce0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006bc4:	4b4c      	ldr	r3, [pc, #304]	; (8006cf8 <xTaskIncrementTick+0x148>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006bcc:	4a4a      	ldr	r2, [pc, #296]	; (8006cf8 <xTaskIncrementTick+0x148>)
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d120      	bne.n	8006c1a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006bd8:	4b48      	ldr	r3, [pc, #288]	; (8006cfc <xTaskIncrementTick+0x14c>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00a      	beq.n	8006bf8 <xTaskIncrementTick+0x48>
	__asm volatile
 8006be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be6:	f383 8811 	msr	BASEPRI, r3
 8006bea:	f3bf 8f6f 	isb	sy
 8006bee:	f3bf 8f4f 	dsb	sy
 8006bf2:	603b      	str	r3, [r7, #0]
}
 8006bf4:	bf00      	nop
 8006bf6:	e7fe      	b.n	8006bf6 <xTaskIncrementTick+0x46>
 8006bf8:	4b40      	ldr	r3, [pc, #256]	; (8006cfc <xTaskIncrementTick+0x14c>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	60fb      	str	r3, [r7, #12]
 8006bfe:	4b40      	ldr	r3, [pc, #256]	; (8006d00 <xTaskIncrementTick+0x150>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a3e      	ldr	r2, [pc, #248]	; (8006cfc <xTaskIncrementTick+0x14c>)
 8006c04:	6013      	str	r3, [r2, #0]
 8006c06:	4a3e      	ldr	r2, [pc, #248]	; (8006d00 <xTaskIncrementTick+0x150>)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6013      	str	r3, [r2, #0]
 8006c0c:	4b3d      	ldr	r3, [pc, #244]	; (8006d04 <xTaskIncrementTick+0x154>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	3301      	adds	r3, #1
 8006c12:	4a3c      	ldr	r2, [pc, #240]	; (8006d04 <xTaskIncrementTick+0x154>)
 8006c14:	6013      	str	r3, [r2, #0]
 8006c16:	f000 fa63 	bl	80070e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006c1a:	4b3b      	ldr	r3, [pc, #236]	; (8006d08 <xTaskIncrementTick+0x158>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	693a      	ldr	r2, [r7, #16]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d348      	bcc.n	8006cb6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c24:	4b35      	ldr	r3, [pc, #212]	; (8006cfc <xTaskIncrementTick+0x14c>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d104      	bne.n	8006c38 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c2e:	4b36      	ldr	r3, [pc, #216]	; (8006d08 <xTaskIncrementTick+0x158>)
 8006c30:	f04f 32ff 	mov.w	r2, #4294967295
 8006c34:	601a      	str	r2, [r3, #0]
					break;
 8006c36:	e03e      	b.n	8006cb6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c38:	4b30      	ldr	r3, [pc, #192]	; (8006cfc <xTaskIncrementTick+0x14c>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d203      	bcs.n	8006c58 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006c50:	4a2d      	ldr	r2, [pc, #180]	; (8006d08 <xTaskIncrementTick+0x158>)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006c56:	e02e      	b.n	8006cb6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	3304      	adds	r3, #4
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7fe fef3 	bl	8005a48 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d004      	beq.n	8006c74 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	3318      	adds	r3, #24
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f7fe feea 	bl	8005a48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c78:	2201      	movs	r2, #1
 8006c7a:	409a      	lsls	r2, r3
 8006c7c:	4b23      	ldr	r3, [pc, #140]	; (8006d0c <xTaskIncrementTick+0x15c>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	4a22      	ldr	r2, [pc, #136]	; (8006d0c <xTaskIncrementTick+0x15c>)
 8006c84:	6013      	str	r3, [r2, #0]
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	4413      	add	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4a1f      	ldr	r2, [pc, #124]	; (8006d10 <xTaskIncrementTick+0x160>)
 8006c94:	441a      	add	r2, r3
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	3304      	adds	r3, #4
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	4610      	mov	r0, r2
 8006c9e:	f7fe fe76 	bl	800598e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ca6:	4b1b      	ldr	r3, [pc, #108]	; (8006d14 <xTaskIncrementTick+0x164>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d3b9      	bcc.n	8006c24 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cb4:	e7b6      	b.n	8006c24 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006cb6:	4b17      	ldr	r3, [pc, #92]	; (8006d14 <xTaskIncrementTick+0x164>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cbc:	4914      	ldr	r1, [pc, #80]	; (8006d10 <xTaskIncrementTick+0x160>)
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	4413      	add	r3, r2
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	440b      	add	r3, r1
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d901      	bls.n	8006cd2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006cd2:	4b11      	ldr	r3, [pc, #68]	; (8006d18 <xTaskIncrementTick+0x168>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d007      	beq.n	8006cea <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	617b      	str	r3, [r7, #20]
 8006cde:	e004      	b.n	8006cea <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006ce0:	4b0e      	ldr	r3, [pc, #56]	; (8006d1c <xTaskIncrementTick+0x16c>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	4a0d      	ldr	r2, [pc, #52]	; (8006d1c <xTaskIncrementTick+0x16c>)
 8006ce8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006cea:	697b      	ldr	r3, [r7, #20]
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3718      	adds	r7, #24
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	200009d4 	.word	0x200009d4
 8006cf8:	200009b0 	.word	0x200009b0
 8006cfc:	20000990 	.word	0x20000990
 8006d00:	20000994 	.word	0x20000994
 8006d04:	200009c4 	.word	0x200009c4
 8006d08:	200009cc 	.word	0x200009cc
 8006d0c:	200009b4 	.word	0x200009b4
 8006d10:	200008dc 	.word	0x200008dc
 8006d14:	200008d8 	.word	0x200008d8
 8006d18:	200009c0 	.word	0x200009c0
 8006d1c:	200009bc 	.word	0x200009bc

08006d20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006d20:	b480      	push	{r7}
 8006d22:	b087      	sub	sp, #28
 8006d24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006d26:	4b27      	ldr	r3, [pc, #156]	; (8006dc4 <vTaskSwitchContext+0xa4>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d003      	beq.n	8006d36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006d2e:	4b26      	ldr	r3, [pc, #152]	; (8006dc8 <vTaskSwitchContext+0xa8>)
 8006d30:	2201      	movs	r2, #1
 8006d32:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006d34:	e03f      	b.n	8006db6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006d36:	4b24      	ldr	r3, [pc, #144]	; (8006dc8 <vTaskSwitchContext+0xa8>)
 8006d38:	2200      	movs	r2, #0
 8006d3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d3c:	4b23      	ldr	r3, [pc, #140]	; (8006dcc <vTaskSwitchContext+0xac>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	fab3 f383 	clz	r3, r3
 8006d48:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006d4a:	7afb      	ldrb	r3, [r7, #11]
 8006d4c:	f1c3 031f 	rsb	r3, r3, #31
 8006d50:	617b      	str	r3, [r7, #20]
 8006d52:	491f      	ldr	r1, [pc, #124]	; (8006dd0 <vTaskSwitchContext+0xb0>)
 8006d54:	697a      	ldr	r2, [r7, #20]
 8006d56:	4613      	mov	r3, r2
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	4413      	add	r3, r2
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	440b      	add	r3, r1
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10a      	bne.n	8006d7c <vTaskSwitchContext+0x5c>
	__asm volatile
 8006d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6a:	f383 8811 	msr	BASEPRI, r3
 8006d6e:	f3bf 8f6f 	isb	sy
 8006d72:	f3bf 8f4f 	dsb	sy
 8006d76:	607b      	str	r3, [r7, #4]
}
 8006d78:	bf00      	nop
 8006d7a:	e7fe      	b.n	8006d7a <vTaskSwitchContext+0x5a>
 8006d7c:	697a      	ldr	r2, [r7, #20]
 8006d7e:	4613      	mov	r3, r2
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4413      	add	r3, r2
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	4a12      	ldr	r2, [pc, #72]	; (8006dd0 <vTaskSwitchContext+0xb0>)
 8006d88:	4413      	add	r3, r2
 8006d8a:	613b      	str	r3, [r7, #16]
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	685a      	ldr	r2, [r3, #4]
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	605a      	str	r2, [r3, #4]
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	685a      	ldr	r2, [r3, #4]
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	3308      	adds	r3, #8
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d104      	bne.n	8006dac <vTaskSwitchContext+0x8c>
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	685a      	ldr	r2, [r3, #4]
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	605a      	str	r2, [r3, #4]
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	4a08      	ldr	r2, [pc, #32]	; (8006dd4 <vTaskSwitchContext+0xb4>)
 8006db4:	6013      	str	r3, [r2, #0]
}
 8006db6:	bf00      	nop
 8006db8:	371c      	adds	r7, #28
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	200009d4 	.word	0x200009d4
 8006dc8:	200009c0 	.word	0x200009c0
 8006dcc:	200009b4 	.word	0x200009b4
 8006dd0:	200008dc 	.word	0x200008dc
 8006dd4:	200008d8 	.word	0x200008d8

08006dd8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d10a      	bne.n	8006dfe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dec:	f383 8811 	msr	BASEPRI, r3
 8006df0:	f3bf 8f6f 	isb	sy
 8006df4:	f3bf 8f4f 	dsb	sy
 8006df8:	60fb      	str	r3, [r7, #12]
}
 8006dfa:	bf00      	nop
 8006dfc:	e7fe      	b.n	8006dfc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006dfe:	4b07      	ldr	r3, [pc, #28]	; (8006e1c <vTaskPlaceOnEventList+0x44>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	3318      	adds	r3, #24
 8006e04:	4619      	mov	r1, r3
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f7fe fde5 	bl	80059d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e0c:	2101      	movs	r1, #1
 8006e0e:	6838      	ldr	r0, [r7, #0]
 8006e10:	f000 fc14 	bl	800763c <prvAddCurrentTaskToDelayedList>
}
 8006e14:	bf00      	nop
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	200008d8 	.word	0x200008d8

08006e20 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b086      	sub	sp, #24
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d10a      	bne.n	8006e48 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e36:	f383 8811 	msr	BASEPRI, r3
 8006e3a:	f3bf 8f6f 	isb	sy
 8006e3e:	f3bf 8f4f 	dsb	sy
 8006e42:	617b      	str	r3, [r7, #20]
}
 8006e44:	bf00      	nop
 8006e46:	e7fe      	b.n	8006e46 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e48:	4b0a      	ldr	r3, [pc, #40]	; (8006e74 <vTaskPlaceOnEventListRestricted+0x54>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	3318      	adds	r3, #24
 8006e4e:	4619      	mov	r1, r3
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f7fe fd9c 	bl	800598e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d002      	beq.n	8006e62 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8006e60:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006e62:	6879      	ldr	r1, [r7, #4]
 8006e64:	68b8      	ldr	r0, [r7, #8]
 8006e66:	f000 fbe9 	bl	800763c <prvAddCurrentTaskToDelayedList>
	}
 8006e6a:	bf00      	nop
 8006e6c:	3718      	adds	r7, #24
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	200008d8 	.word	0x200008d8

08006e78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b086      	sub	sp, #24
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10a      	bne.n	8006ea4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e92:	f383 8811 	msr	BASEPRI, r3
 8006e96:	f3bf 8f6f 	isb	sy
 8006e9a:	f3bf 8f4f 	dsb	sy
 8006e9e:	60fb      	str	r3, [r7, #12]
}
 8006ea0:	bf00      	nop
 8006ea2:	e7fe      	b.n	8006ea2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	3318      	adds	r3, #24
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7fe fdcd 	bl	8005a48 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006eae:	4b1d      	ldr	r3, [pc, #116]	; (8006f24 <xTaskRemoveFromEventList+0xac>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d11c      	bne.n	8006ef0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	3304      	adds	r3, #4
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7fe fdc4 	bl	8005a48 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	409a      	lsls	r2, r3
 8006ec8:	4b17      	ldr	r3, [pc, #92]	; (8006f28 <xTaskRemoveFromEventList+0xb0>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	4a16      	ldr	r2, [pc, #88]	; (8006f28 <xTaskRemoveFromEventList+0xb0>)
 8006ed0:	6013      	str	r3, [r2, #0]
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	4413      	add	r3, r2
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	4a13      	ldr	r2, [pc, #76]	; (8006f2c <xTaskRemoveFromEventList+0xb4>)
 8006ee0:	441a      	add	r2, r3
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	3304      	adds	r3, #4
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	4610      	mov	r0, r2
 8006eea:	f7fe fd50 	bl	800598e <vListInsertEnd>
 8006eee:	e005      	b.n	8006efc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	3318      	adds	r3, #24
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	480e      	ldr	r0, [pc, #56]	; (8006f30 <xTaskRemoveFromEventList+0xb8>)
 8006ef8:	f7fe fd49 	bl	800598e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f00:	4b0c      	ldr	r3, [pc, #48]	; (8006f34 <xTaskRemoveFromEventList+0xbc>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d905      	bls.n	8006f16 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006f0e:	4b0a      	ldr	r3, [pc, #40]	; (8006f38 <xTaskRemoveFromEventList+0xc0>)
 8006f10:	2201      	movs	r2, #1
 8006f12:	601a      	str	r2, [r3, #0]
 8006f14:	e001      	b.n	8006f1a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006f16:	2300      	movs	r3, #0
 8006f18:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006f1a:	697b      	ldr	r3, [r7, #20]
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3718      	adds	r7, #24
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	200009d4 	.word	0x200009d4
 8006f28:	200009b4 	.word	0x200009b4
 8006f2c:	200008dc 	.word	0x200008dc
 8006f30:	20000998 	.word	0x20000998
 8006f34:	200008d8 	.word	0x200008d8
 8006f38:	200009c0 	.word	0x200009c0

08006f3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006f44:	4b06      	ldr	r3, [pc, #24]	; (8006f60 <vTaskInternalSetTimeOutState+0x24>)
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006f4c:	4b05      	ldr	r3, [pc, #20]	; (8006f64 <vTaskInternalSetTimeOutState+0x28>)
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	605a      	str	r2, [r3, #4]
}
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr
 8006f60:	200009c4 	.word	0x200009c4
 8006f64:	200009b0 	.word	0x200009b0

08006f68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b088      	sub	sp, #32
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d10a      	bne.n	8006f8e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7c:	f383 8811 	msr	BASEPRI, r3
 8006f80:	f3bf 8f6f 	isb	sy
 8006f84:	f3bf 8f4f 	dsb	sy
 8006f88:	613b      	str	r3, [r7, #16]
}
 8006f8a:	bf00      	nop
 8006f8c:	e7fe      	b.n	8006f8c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10a      	bne.n	8006faa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f98:	f383 8811 	msr	BASEPRI, r3
 8006f9c:	f3bf 8f6f 	isb	sy
 8006fa0:	f3bf 8f4f 	dsb	sy
 8006fa4:	60fb      	str	r3, [r7, #12]
}
 8006fa6:	bf00      	nop
 8006fa8:	e7fe      	b.n	8006fa8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006faa:	f001 f893 	bl	80080d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006fae:	4b19      	ldr	r3, [pc, #100]	; (8007014 <xTaskCheckForTimeOut+0xac>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	69ba      	ldr	r2, [r7, #24]
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	617b      	str	r3, [r7, #20]
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	4b15      	ldr	r3, [pc, #84]	; (8007018 <xTaskCheckForTimeOut+0xb0>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d007      	beq.n	8006fda <xTaskCheckForTimeOut+0x72>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	69ba      	ldr	r2, [r7, #24]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d302      	bcc.n	8006fda <xTaskCheckForTimeOut+0x72>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	61fb      	str	r3, [r7, #28]
 8006fd8:	e015      	b.n	8007006 <xTaskCheckForTimeOut+0x9e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	697a      	ldr	r2, [r7, #20]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d20b      	bcs.n	8006ffc <xTaskCheckForTimeOut+0x94>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	1ad2      	subs	r2, r2, r3
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f7ff ffa3 	bl	8006f3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	61fb      	str	r3, [r7, #28]
 8006ffa:	e004      	b.n	8007006 <xTaskCheckForTimeOut+0x9e>
		}
		else
		{
			*pxTicksToWait = 0;
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	2200      	movs	r2, #0
 8007000:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007002:	2301      	movs	r3, #1
 8007004:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007006:	f001 f895 	bl	8008134 <vPortExitCritical>

	return xReturn;
 800700a:	69fb      	ldr	r3, [r7, #28]
}
 800700c:	4618      	mov	r0, r3
 800700e:	3720      	adds	r7, #32
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}
 8007014:	200009b0 	.word	0x200009b0
 8007018:	200009c4 	.word	0x200009c4

0800701c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800701c:	b480      	push	{r7}
 800701e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007020:	4b03      	ldr	r3, [pc, #12]	; (8007030 <vTaskMissedYield+0x14>)
 8007022:	2201      	movs	r2, #1
 8007024:	601a      	str	r2, [r3, #0]
}
 8007026:	bf00      	nop
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr
 8007030:	200009c0 	.word	0x200009c0

08007034 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b082      	sub	sp, #8
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800703c:	f000 f848 	bl	80070d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007040:	4b06      	ldr	r3, [pc, #24]	; (800705c <prvIdleTask+0x28>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2b01      	cmp	r3, #1
 8007046:	d9f9      	bls.n	800703c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007048:	4b05      	ldr	r3, [pc, #20]	; (8007060 <prvIdleTask+0x2c>)
 800704a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800704e:	601a      	str	r2, [r3, #0]
 8007050:	f3bf 8f4f 	dsb	sy
 8007054:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007058:	e7f0      	b.n	800703c <prvIdleTask+0x8>
 800705a:	bf00      	nop
 800705c:	200008dc 	.word	0x200008dc
 8007060:	e000ed04 	.word	0xe000ed04

08007064 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800706a:	2300      	movs	r3, #0
 800706c:	607b      	str	r3, [r7, #4]
 800706e:	e00c      	b.n	800708a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	4613      	mov	r3, r2
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	4413      	add	r3, r2
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	4a0f      	ldr	r2, [pc, #60]	; (80070b8 <prvInitialiseTaskLists+0x54>)
 800707c:	4413      	add	r3, r2
 800707e:	4618      	mov	r0, r3
 8007080:	f7fe fc58 	bl	8005934 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	3301      	adds	r3, #1
 8007088:	607b      	str	r3, [r7, #4]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2b06      	cmp	r3, #6
 800708e:	d9ef      	bls.n	8007070 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007090:	480a      	ldr	r0, [pc, #40]	; (80070bc <prvInitialiseTaskLists+0x58>)
 8007092:	f7fe fc4f 	bl	8005934 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007096:	480a      	ldr	r0, [pc, #40]	; (80070c0 <prvInitialiseTaskLists+0x5c>)
 8007098:	f7fe fc4c 	bl	8005934 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800709c:	4809      	ldr	r0, [pc, #36]	; (80070c4 <prvInitialiseTaskLists+0x60>)
 800709e:	f7fe fc49 	bl	8005934 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80070a2:	4b09      	ldr	r3, [pc, #36]	; (80070c8 <prvInitialiseTaskLists+0x64>)
 80070a4:	4a05      	ldr	r2, [pc, #20]	; (80070bc <prvInitialiseTaskLists+0x58>)
 80070a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80070a8:	4b08      	ldr	r3, [pc, #32]	; (80070cc <prvInitialiseTaskLists+0x68>)
 80070aa:	4a05      	ldr	r2, [pc, #20]	; (80070c0 <prvInitialiseTaskLists+0x5c>)
 80070ac:	601a      	str	r2, [r3, #0]
}
 80070ae:	bf00      	nop
 80070b0:	3708      	adds	r7, #8
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	200008dc 	.word	0x200008dc
 80070bc:	20000968 	.word	0x20000968
 80070c0:	2000097c 	.word	0x2000097c
 80070c4:	20000998 	.word	0x20000998
 80070c8:	20000990 	.word	0x20000990
 80070cc:	20000994 	.word	0x20000994

080070d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80070d0:	b480      	push	{r7}
 80070d2:	af00      	add	r7, sp, #0

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80070d4:	bf00      	nop
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
	...

080070e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070e6:	4b0c      	ldr	r3, [pc, #48]	; (8007118 <prvResetNextTaskUnblockTime+0x38>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d104      	bne.n	80070fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80070f0:	4b0a      	ldr	r3, [pc, #40]	; (800711c <prvResetNextTaskUnblockTime+0x3c>)
 80070f2:	f04f 32ff 	mov.w	r2, #4294967295
 80070f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80070f8:	e008      	b.n	800710c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070fa:	4b07      	ldr	r3, [pc, #28]	; (8007118 <prvResetNextTaskUnblockTime+0x38>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	4a04      	ldr	r2, [pc, #16]	; (800711c <prvResetNextTaskUnblockTime+0x3c>)
 800710a:	6013      	str	r3, [r2, #0]
}
 800710c:	bf00      	nop
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr
 8007118:	20000990 	.word	0x20000990
 800711c:	200009cc 	.word	0x200009cc

08007120 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007126:	4b0b      	ldr	r3, [pc, #44]	; (8007154 <xTaskGetSchedulerState+0x34>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d102      	bne.n	8007134 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800712e:	2301      	movs	r3, #1
 8007130:	607b      	str	r3, [r7, #4]
 8007132:	e008      	b.n	8007146 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007134:	4b08      	ldr	r3, [pc, #32]	; (8007158 <xTaskGetSchedulerState+0x38>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d102      	bne.n	8007142 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800713c:	2302      	movs	r3, #2
 800713e:	607b      	str	r3, [r7, #4]
 8007140:	e001      	b.n	8007146 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007142:	2300      	movs	r3, #0
 8007144:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007146:	687b      	ldr	r3, [r7, #4]
	}
 8007148:	4618      	mov	r0, r3
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr
 8007154:	200009b8 	.word	0x200009b8
 8007158:	200009d4 	.word	0x200009d4

0800715c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800715c:	b580      	push	{r7, lr}
 800715e:	b086      	sub	sp, #24
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007168:	2300      	movs	r3, #0
 800716a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d06e      	beq.n	8007250 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007172:	4b3a      	ldr	r3, [pc, #232]	; (800725c <xTaskPriorityDisinherit+0x100>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	693a      	ldr	r2, [r7, #16]
 8007178:	429a      	cmp	r2, r3
 800717a:	d00a      	beq.n	8007192 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800717c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007180:	f383 8811 	msr	BASEPRI, r3
 8007184:	f3bf 8f6f 	isb	sy
 8007188:	f3bf 8f4f 	dsb	sy
 800718c:	60fb      	str	r3, [r7, #12]
}
 800718e:	bf00      	nop
 8007190:	e7fe      	b.n	8007190 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007196:	2b00      	cmp	r3, #0
 8007198:	d10a      	bne.n	80071b0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800719a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719e:	f383 8811 	msr	BASEPRI, r3
 80071a2:	f3bf 8f6f 	isb	sy
 80071a6:	f3bf 8f4f 	dsb	sy
 80071aa:	60bb      	str	r3, [r7, #8]
}
 80071ac:	bf00      	nop
 80071ae:	e7fe      	b.n	80071ae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071b4:	1e5a      	subs	r2, r3, #1
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d044      	beq.n	8007250 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d140      	bne.n	8007250 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	3304      	adds	r3, #4
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7fe fc38 	bl	8005a48 <uxListRemove>
 80071d8:	4603      	mov	r3, r0
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d115      	bne.n	800720a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071e2:	491f      	ldr	r1, [pc, #124]	; (8007260 <xTaskPriorityDisinherit+0x104>)
 80071e4:	4613      	mov	r3, r2
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	4413      	add	r3, r2
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	440b      	add	r3, r1
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10a      	bne.n	800720a <xTaskPriorityDisinherit+0xae>
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f8:	2201      	movs	r2, #1
 80071fa:	fa02 f303 	lsl.w	r3, r2, r3
 80071fe:	43da      	mvns	r2, r3
 8007200:	4b18      	ldr	r3, [pc, #96]	; (8007264 <xTaskPriorityDisinherit+0x108>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4013      	ands	r3, r2
 8007206:	4a17      	ldr	r2, [pc, #92]	; (8007264 <xTaskPriorityDisinherit+0x108>)
 8007208:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007216:	f1c3 0207 	rsb	r2, r3, #7
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007222:	2201      	movs	r2, #1
 8007224:	409a      	lsls	r2, r3
 8007226:	4b0f      	ldr	r3, [pc, #60]	; (8007264 <xTaskPriorityDisinherit+0x108>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4313      	orrs	r3, r2
 800722c:	4a0d      	ldr	r2, [pc, #52]	; (8007264 <xTaskPriorityDisinherit+0x108>)
 800722e:	6013      	str	r3, [r2, #0]
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007234:	4613      	mov	r3, r2
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	4413      	add	r3, r2
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	4a08      	ldr	r2, [pc, #32]	; (8007260 <xTaskPriorityDisinherit+0x104>)
 800723e:	441a      	add	r2, r3
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	3304      	adds	r3, #4
 8007244:	4619      	mov	r1, r3
 8007246:	4610      	mov	r0, r2
 8007248:	f7fe fba1 	bl	800598e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800724c:	2301      	movs	r3, #1
 800724e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007250:	697b      	ldr	r3, [r7, #20]
	}
 8007252:	4618      	mov	r0, r3
 8007254:	3718      	adds	r7, #24
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	200008d8 	.word	0x200008d8
 8007260:	200008dc 	.word	0x200008dc
 8007264:	200009b4 	.word	0x200009b4

08007268 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8007268:	b580      	push	{r7, lr}
 800726a:	b086      	sub	sp, #24
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	607a      	str	r2, [r7, #4]
 8007274:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8007276:	f000 ff2d 	bl	80080d4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800727a:	4b26      	ldr	r3, [pc, #152]	; (8007314 <xTaskNotifyWait+0xac>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007282:	b2db      	uxtb	r3, r3
 8007284:	2b02      	cmp	r3, #2
 8007286:	d01a      	beq.n	80072be <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8007288:	4b22      	ldr	r3, [pc, #136]	; (8007314 <xTaskNotifyWait+0xac>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	43d2      	mvns	r2, r2
 8007292:	400a      	ands	r2, r1
 8007294:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007296:	4b1f      	ldr	r3, [pc, #124]	; (8007314 <xTaskNotifyWait+0xac>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d00b      	beq.n	80072be <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80072a6:	2101      	movs	r1, #1
 80072a8:	6838      	ldr	r0, [r7, #0]
 80072aa:	f000 f9c7 	bl	800763c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80072ae:	4b1a      	ldr	r3, [pc, #104]	; (8007318 <xTaskNotifyWait+0xb0>)
 80072b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072b4:	601a      	str	r2, [r3, #0]
 80072b6:	f3bf 8f4f 	dsb	sy
 80072ba:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80072be:	f000 ff39 	bl	8008134 <vPortExitCritical>

		taskENTER_CRITICAL();
 80072c2:	f000 ff07 	bl	80080d4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d004      	beq.n	80072d6 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80072cc:	4b11      	ldr	r3, [pc, #68]	; (8007314 <xTaskNotifyWait+0xac>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80072d6:	4b0f      	ldr	r3, [pc, #60]	; (8007314 <xTaskNotifyWait+0xac>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	d002      	beq.n	80072ea <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80072e4:	2300      	movs	r3, #0
 80072e6:	617b      	str	r3, [r7, #20]
 80072e8:	e008      	b.n	80072fc <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80072ea:	4b0a      	ldr	r3, [pc, #40]	; (8007314 <xTaskNotifyWait+0xac>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	43d2      	mvns	r2, r2
 80072f4:	400a      	ands	r2, r1
 80072f6:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 80072f8:	2301      	movs	r3, #1
 80072fa:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80072fc:	4b05      	ldr	r3, [pc, #20]	; (8007314 <xTaskNotifyWait+0xac>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2200      	movs	r2, #0
 8007302:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8007306:	f000 ff15 	bl	8008134 <vPortExitCritical>

		return xReturn;
 800730a:	697b      	ldr	r3, [r7, #20]
	}
 800730c:	4618      	mov	r0, r3
 800730e:	3718      	adds	r7, #24
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}
 8007314:	200008d8 	.word	0x200008d8
 8007318:	e000ed04 	.word	0xe000ed04

0800731c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800731c:	b580      	push	{r7, lr}
 800731e:	b08a      	sub	sp, #40	; 0x28
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	603b      	str	r3, [r7, #0]
 8007328:	4613      	mov	r3, r2
 800732a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800732c:	2301      	movs	r3, #1
 800732e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d10a      	bne.n	800734c <xTaskGenericNotify+0x30>
	__asm volatile
 8007336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733a:	f383 8811 	msr	BASEPRI, r3
 800733e:	f3bf 8f6f 	isb	sy
 8007342:	f3bf 8f4f 	dsb	sy
 8007346:	61bb      	str	r3, [r7, #24]
}
 8007348:	bf00      	nop
 800734a:	e7fe      	b.n	800734a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8007350:	f000 fec0 	bl	80080d4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d003      	beq.n	8007362 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800735a:	6a3b      	ldr	r3, [r7, #32]
 800735c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007362:	6a3b      	ldr	r3, [r7, #32]
 8007364:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007368:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800736a:	6a3b      	ldr	r3, [r7, #32]
 800736c:	2202      	movs	r2, #2
 800736e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8007372:	79fb      	ldrb	r3, [r7, #7]
 8007374:	2b04      	cmp	r3, #4
 8007376:	d828      	bhi.n	80073ca <xTaskGenericNotify+0xae>
 8007378:	a201      	add	r2, pc, #4	; (adr r2, 8007380 <xTaskGenericNotify+0x64>)
 800737a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800737e:	bf00      	nop
 8007380:	080073eb 	.word	0x080073eb
 8007384:	08007395 	.word	0x08007395
 8007388:	080073a3 	.word	0x080073a3
 800738c:	080073af 	.word	0x080073af
 8007390:	080073b7 	.word	0x080073b7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007394:	6a3b      	ldr	r3, [r7, #32]
 8007396:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	431a      	orrs	r2, r3
 800739c:	6a3b      	ldr	r3, [r7, #32]
 800739e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80073a0:	e026      	b.n	80073f0 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80073a2:	6a3b      	ldr	r3, [r7, #32]
 80073a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073a6:	1c5a      	adds	r2, r3, #1
 80073a8:	6a3b      	ldr	r3, [r7, #32]
 80073aa:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80073ac:	e020      	b.n	80073f0 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80073ae:	6a3b      	ldr	r3, [r7, #32]
 80073b0:	68ba      	ldr	r2, [r7, #8]
 80073b2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80073b4:	e01c      	b.n	80073f0 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80073b6:	7ffb      	ldrb	r3, [r7, #31]
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d003      	beq.n	80073c4 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80073bc:	6a3b      	ldr	r3, [r7, #32]
 80073be:	68ba      	ldr	r2, [r7, #8]
 80073c0:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80073c2:	e015      	b.n	80073f0 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 80073c4:	2300      	movs	r3, #0
 80073c6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80073c8:	e012      	b.n	80073f0 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80073ca:	6a3b      	ldr	r3, [r7, #32]
 80073cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d2:	d00c      	beq.n	80073ee <xTaskGenericNotify+0xd2>
	__asm volatile
 80073d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d8:	f383 8811 	msr	BASEPRI, r3
 80073dc:	f3bf 8f6f 	isb	sy
 80073e0:	f3bf 8f4f 	dsb	sy
 80073e4:	617b      	str	r3, [r7, #20]
}
 80073e6:	bf00      	nop
 80073e8:	e7fe      	b.n	80073e8 <xTaskGenericNotify+0xcc>
					break;
 80073ea:	bf00      	nop
 80073ec:	e000      	b.n	80073f0 <xTaskGenericNotify+0xd4>

					break;
 80073ee:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80073f0:	7ffb      	ldrb	r3, [r7, #31]
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d139      	bne.n	800746a <xTaskGenericNotify+0x14e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073f6:	6a3b      	ldr	r3, [r7, #32]
 80073f8:	3304      	adds	r3, #4
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7fe fb24 	bl	8005a48 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8007400:	6a3b      	ldr	r3, [r7, #32]
 8007402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007404:	2201      	movs	r2, #1
 8007406:	409a      	lsls	r2, r3
 8007408:	4b1b      	ldr	r3, [pc, #108]	; (8007478 <xTaskGenericNotify+0x15c>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4313      	orrs	r3, r2
 800740e:	4a1a      	ldr	r2, [pc, #104]	; (8007478 <xTaskGenericNotify+0x15c>)
 8007410:	6013      	str	r3, [r2, #0]
 8007412:	6a3b      	ldr	r3, [r7, #32]
 8007414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007416:	4613      	mov	r3, r2
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	4413      	add	r3, r2
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	4a17      	ldr	r2, [pc, #92]	; (800747c <xTaskGenericNotify+0x160>)
 8007420:	441a      	add	r2, r3
 8007422:	6a3b      	ldr	r3, [r7, #32]
 8007424:	3304      	adds	r3, #4
 8007426:	4619      	mov	r1, r3
 8007428:	4610      	mov	r0, r2
 800742a:	f7fe fab0 	bl	800598e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800742e:	6a3b      	ldr	r3, [r7, #32]
 8007430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00a      	beq.n	800744c <xTaskGenericNotify+0x130>
	__asm volatile
 8007436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743a:	f383 8811 	msr	BASEPRI, r3
 800743e:	f3bf 8f6f 	isb	sy
 8007442:	f3bf 8f4f 	dsb	sy
 8007446:	613b      	str	r3, [r7, #16]
}
 8007448:	bf00      	nop
 800744a:	e7fe      	b.n	800744a <xTaskGenericNotify+0x12e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800744c:	6a3b      	ldr	r3, [r7, #32]
 800744e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007450:	4b0b      	ldr	r3, [pc, #44]	; (8007480 <xTaskGenericNotify+0x164>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007456:	429a      	cmp	r2, r3
 8007458:	d907      	bls.n	800746a <xTaskGenericNotify+0x14e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800745a:	4b0a      	ldr	r3, [pc, #40]	; (8007484 <xTaskGenericNotify+0x168>)
 800745c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007460:	601a      	str	r2, [r3, #0]
 8007462:	f3bf 8f4f 	dsb	sy
 8007466:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800746a:	f000 fe63 	bl	8008134 <vPortExitCritical>

		return xReturn;
 800746e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007470:	4618      	mov	r0, r3
 8007472:	3728      	adds	r7, #40	; 0x28
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}
 8007478:	200009b4 	.word	0x200009b4
 800747c:	200008dc 	.word	0x200008dc
 8007480:	200008d8 	.word	0x200008d8
 8007484:	e000ed04 	.word	0xe000ed04

08007488 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007488:	b580      	push	{r7, lr}
 800748a:	b08e      	sub	sp, #56	; 0x38
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	603b      	str	r3, [r7, #0]
 8007494:	4613      	mov	r3, r2
 8007496:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007498:	2301      	movs	r3, #1
 800749a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d10a      	bne.n	80074b8 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80074a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80074b4:	bf00      	nop
 80074b6:	e7fe      	b.n	80074b6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80074b8:	f000 feee 	bl	8008298 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80074c0:	f3ef 8211 	mrs	r2, BASEPRI
 80074c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c8:	f383 8811 	msr	BASEPRI, r3
 80074cc:	f3bf 8f6f 	isb	sy
 80074d0:	f3bf 8f4f 	dsb	sy
 80074d4:	623a      	str	r2, [r7, #32]
 80074d6:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80074d8:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80074da:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d003      	beq.n	80074ea <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80074e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80074ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80074f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80074f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f6:	2202      	movs	r2, #2
 80074f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 80074fc:	79fb      	ldrb	r3, [r7, #7]
 80074fe:	2b04      	cmp	r3, #4
 8007500:	d828      	bhi.n	8007554 <xTaskGenericNotifyFromISR+0xcc>
 8007502:	a201      	add	r2, pc, #4	; (adr r2, 8007508 <xTaskGenericNotifyFromISR+0x80>)
 8007504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007508:	08007575 	.word	0x08007575
 800750c:	0800751d 	.word	0x0800751d
 8007510:	0800752b 	.word	0x0800752b
 8007514:	08007537 	.word	0x08007537
 8007518:	0800753f 	.word	0x0800753f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800751c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	431a      	orrs	r2, r3
 8007524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007526:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8007528:	e027      	b.n	800757a <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800752a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800752e:	1c5a      	adds	r2, r3, #1
 8007530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007532:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8007534:	e021      	b.n	800757a <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007538:	68ba      	ldr	r2, [r7, #8]
 800753a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800753c:	e01d      	b.n	800757a <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800753e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007542:	2b02      	cmp	r3, #2
 8007544:	d003      	beq.n	800754e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007548:	68ba      	ldr	r2, [r7, #8]
 800754a:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800754c:	e015      	b.n	800757a <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800754e:	2300      	movs	r3, #0
 8007550:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8007552:	e012      	b.n	800757a <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800755c:	d00c      	beq.n	8007578 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800755e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007562:	f383 8811 	msr	BASEPRI, r3
 8007566:	f3bf 8f6f 	isb	sy
 800756a:	f3bf 8f4f 	dsb	sy
 800756e:	61bb      	str	r3, [r7, #24]
}
 8007570:	bf00      	nop
 8007572:	e7fe      	b.n	8007572 <xTaskGenericNotifyFromISR+0xea>
					break;
 8007574:	bf00      	nop
 8007576:	e000      	b.n	800757a <xTaskGenericNotifyFromISR+0xf2>
					break;
 8007578:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800757a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800757e:	2b01      	cmp	r3, #1
 8007580:	d145      	bne.n	800760e <xTaskGenericNotifyFromISR+0x186>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00a      	beq.n	80075a0 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 800758a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758e:	f383 8811 	msr	BASEPRI, r3
 8007592:	f3bf 8f6f 	isb	sy
 8007596:	f3bf 8f4f 	dsb	sy
 800759a:	617b      	str	r3, [r7, #20]
}
 800759c:	bf00      	nop
 800759e:	e7fe      	b.n	800759e <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075a0:	4b20      	ldr	r3, [pc, #128]	; (8007624 <xTaskGenericNotifyFromISR+0x19c>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d11c      	bne.n	80075e2 <xTaskGenericNotifyFromISR+0x15a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075aa:	3304      	adds	r3, #4
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7fe fa4b 	bl	8005a48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80075b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b6:	2201      	movs	r2, #1
 80075b8:	409a      	lsls	r2, r3
 80075ba:	4b1b      	ldr	r3, [pc, #108]	; (8007628 <xTaskGenericNotifyFromISR+0x1a0>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4313      	orrs	r3, r2
 80075c0:	4a19      	ldr	r2, [pc, #100]	; (8007628 <xTaskGenericNotifyFromISR+0x1a0>)
 80075c2:	6013      	str	r3, [r2, #0]
 80075c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075c8:	4613      	mov	r3, r2
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	4413      	add	r3, r2
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	4a16      	ldr	r2, [pc, #88]	; (800762c <xTaskGenericNotifyFromISR+0x1a4>)
 80075d2:	441a      	add	r2, r3
 80075d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d6:	3304      	adds	r3, #4
 80075d8:	4619      	mov	r1, r3
 80075da:	4610      	mov	r0, r2
 80075dc:	f7fe f9d7 	bl	800598e <vListInsertEnd>
 80075e0:	e005      	b.n	80075ee <xTaskGenericNotifyFromISR+0x166>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80075e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e4:	3318      	adds	r3, #24
 80075e6:	4619      	mov	r1, r3
 80075e8:	4811      	ldr	r0, [pc, #68]	; (8007630 <xTaskGenericNotifyFromISR+0x1a8>)
 80075ea:	f7fe f9d0 	bl	800598e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80075ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075f2:	4b10      	ldr	r3, [pc, #64]	; (8007634 <xTaskGenericNotifyFromISR+0x1ac>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d908      	bls.n	800760e <xTaskGenericNotifyFromISR+0x186>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80075fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d002      	beq.n	8007608 <xTaskGenericNotifyFromISR+0x180>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007604:	2201      	movs	r2, #1
 8007606:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8007608:	4b0b      	ldr	r3, [pc, #44]	; (8007638 <xTaskGenericNotifyFromISR+0x1b0>)
 800760a:	2201      	movs	r2, #1
 800760c:	601a      	str	r2, [r3, #0]
 800760e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007610:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	f383 8811 	msr	BASEPRI, r3
}
 8007618:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800761a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800761c:	4618      	mov	r0, r3
 800761e:	3738      	adds	r7, #56	; 0x38
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	200009d4 	.word	0x200009d4
 8007628:	200009b4 	.word	0x200009b4
 800762c:	200008dc 	.word	0x200008dc
 8007630:	20000998 	.word	0x20000998
 8007634:	200008d8 	.word	0x200008d8
 8007638:	200009c0 	.word	0x200009c0

0800763c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007646:	4b21      	ldr	r3, [pc, #132]	; (80076cc <prvAddCurrentTaskToDelayedList+0x90>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800764c:	4b20      	ldr	r3, [pc, #128]	; (80076d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	3304      	adds	r3, #4
 8007652:	4618      	mov	r0, r3
 8007654:	f7fe f9f8 	bl	8005a48 <uxListRemove>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d10b      	bne.n	8007676 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800765e:	4b1c      	ldr	r3, [pc, #112]	; (80076d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007664:	2201      	movs	r2, #1
 8007666:	fa02 f303 	lsl.w	r3, r2, r3
 800766a:	43da      	mvns	r2, r3
 800766c:	4b19      	ldr	r3, [pc, #100]	; (80076d4 <prvAddCurrentTaskToDelayedList+0x98>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4013      	ands	r3, r2
 8007672:	4a18      	ldr	r2, [pc, #96]	; (80076d4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007674:	6013      	str	r3, [r2, #0]
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
 8007676:	68fa      	ldr	r2, [r7, #12]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4413      	add	r3, r2
 800767c:	60bb      	str	r3, [r7, #8]

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800767e:	4b14      	ldr	r3, [pc, #80]	; (80076d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68ba      	ldr	r2, [r7, #8]
 8007684:	605a      	str	r2, [r3, #4]

		if( xTimeToWake < xConstTickCount )
 8007686:	68ba      	ldr	r2, [r7, #8]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	429a      	cmp	r2, r3
 800768c:	d209      	bcs.n	80076a2 <prvAddCurrentTaskToDelayedList+0x66>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800768e:	4b12      	ldr	r3, [pc, #72]	; (80076d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	4b0f      	ldr	r3, [pc, #60]	; (80076d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	3304      	adds	r3, #4
 8007698:	4619      	mov	r1, r3
 800769a:	4610      	mov	r0, r2
 800769c:	f7fe f99b 	bl	80059d6 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80076a0:	e010      	b.n	80076c4 <prvAddCurrentTaskToDelayedList+0x88>
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076a2:	4b0e      	ldr	r3, [pc, #56]	; (80076dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	4b0a      	ldr	r3, [pc, #40]	; (80076d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	3304      	adds	r3, #4
 80076ac:	4619      	mov	r1, r3
 80076ae:	4610      	mov	r0, r2
 80076b0:	f7fe f991 	bl	80059d6 <vListInsert>
			if( xTimeToWake < xNextTaskUnblockTime )
 80076b4:	4b0a      	ldr	r3, [pc, #40]	; (80076e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68ba      	ldr	r2, [r7, #8]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d202      	bcs.n	80076c4 <prvAddCurrentTaskToDelayedList+0x88>
				xNextTaskUnblockTime = xTimeToWake;
 80076be:	4a08      	ldr	r2, [pc, #32]	; (80076e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	6013      	str	r3, [r2, #0]
}
 80076c4:	bf00      	nop
 80076c6:	3710      	adds	r7, #16
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}
 80076cc:	200009b0 	.word	0x200009b0
 80076d0:	200008d8 	.word	0x200008d8
 80076d4:	200009b4 	.word	0x200009b4
 80076d8:	20000994 	.word	0x20000994
 80076dc:	20000990 	.word	0x20000990
 80076e0:	200009cc 	.word	0x200009cc

080076e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b08a      	sub	sp, #40	; 0x28
 80076e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80076ea:	2300      	movs	r3, #0
 80076ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80076ee:	f000 fb85 	bl	8007dfc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80076f2:	4b1c      	ldr	r3, [pc, #112]	; (8007764 <xTimerCreateTimerTask+0x80>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d021      	beq.n	800773e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80076fa:	2300      	movs	r3, #0
 80076fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80076fe:	2300      	movs	r3, #0
 8007700:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007702:	1d3a      	adds	r2, r7, #4
 8007704:	f107 0108 	add.w	r1, r7, #8
 8007708:	f107 030c 	add.w	r3, r7, #12
 800770c:	4618      	mov	r0, r3
 800770e:	f7f9 fcb5 	bl	800107c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007712:	6879      	ldr	r1, [r7, #4]
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	68fa      	ldr	r2, [r7, #12]
 8007718:	9202      	str	r2, [sp, #8]
 800771a:	9301      	str	r3, [sp, #4]
 800771c:	2302      	movs	r3, #2
 800771e:	9300      	str	r3, [sp, #0]
 8007720:	2300      	movs	r3, #0
 8007722:	460a      	mov	r2, r1
 8007724:	4910      	ldr	r1, [pc, #64]	; (8007768 <xTimerCreateTimerTask+0x84>)
 8007726:	4811      	ldr	r0, [pc, #68]	; (800776c <xTimerCreateTimerTask+0x88>)
 8007728:	f7fe ff5a 	bl	80065e0 <xTaskCreateStatic>
 800772c:	4603      	mov	r3, r0
 800772e:	4a10      	ldr	r2, [pc, #64]	; (8007770 <xTimerCreateTimerTask+0x8c>)
 8007730:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007732:	4b0f      	ldr	r3, [pc, #60]	; (8007770 <xTimerCreateTimerTask+0x8c>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d001      	beq.n	800773e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800773a:	2301      	movs	r3, #1
 800773c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d10a      	bne.n	800775a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007748:	f383 8811 	msr	BASEPRI, r3
 800774c:	f3bf 8f6f 	isb	sy
 8007750:	f3bf 8f4f 	dsb	sy
 8007754:	613b      	str	r3, [r7, #16]
}
 8007756:	bf00      	nop
 8007758:	e7fe      	b.n	8007758 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800775a:	697b      	ldr	r3, [r7, #20]
}
 800775c:	4618      	mov	r0, r3
 800775e:	3718      	adds	r7, #24
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}
 8007764:	20000a08 	.word	0x20000a08
 8007768:	08009248 	.word	0x08009248
 800776c:	080079dd 	.word	0x080079dd
 8007770:	20000a0c 	.word	0x20000a0c

08007774 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007774:	b580      	push	{r7, lr}
 8007776:	b088      	sub	sp, #32
 8007778:	af02      	add	r7, sp, #8
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]
 8007780:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8007782:	2028      	movs	r0, #40	; 0x28
 8007784:	f000 fdc8 	bl	8008318 <pvPortMalloc>
 8007788:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d00d      	beq.n	80077ac <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	9301      	str	r3, [sp, #4]
 800779c:	6a3b      	ldr	r3, [r7, #32]
 800779e:	9300      	str	r3, [sp, #0]
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	68b9      	ldr	r1, [r7, #8]
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	f000 f843 	bl	8007832 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80077ac:	697b      	ldr	r3, [r7, #20]
	}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3718      	adds	r7, #24
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b08a      	sub	sp, #40	; 0x28
 80077ba:	af02      	add	r7, sp, #8
 80077bc:	60f8      	str	r0, [r7, #12]
 80077be:	60b9      	str	r1, [r7, #8]
 80077c0:	607a      	str	r2, [r7, #4]
 80077c2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80077c4:	2328      	movs	r3, #40	; 0x28
 80077c6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	2b28      	cmp	r3, #40	; 0x28
 80077cc:	d00a      	beq.n	80077e4 <xTimerCreateStatic+0x2e>
	__asm volatile
 80077ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d2:	f383 8811 	msr	BASEPRI, r3
 80077d6:	f3bf 8f6f 	isb	sy
 80077da:	f3bf 8f4f 	dsb	sy
 80077de:	61bb      	str	r3, [r7, #24]
}
 80077e0:	bf00      	nop
 80077e2:	e7fe      	b.n	80077e2 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80077e4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80077e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10a      	bne.n	8007802 <xTimerCreateStatic+0x4c>
	__asm volatile
 80077ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f0:	f383 8811 	msr	BASEPRI, r3
 80077f4:	f3bf 8f6f 	isb	sy
 80077f8:	f3bf 8f4f 	dsb	sy
 80077fc:	617b      	str	r3, [r7, #20]
}
 80077fe:	bf00      	nop
 8007800:	e7fe      	b.n	8007800 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8007802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007804:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8007806:	69fb      	ldr	r3, [r7, #28]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00d      	beq.n	8007828 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	2202      	movs	r2, #2
 8007810:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	9301      	str	r3, [sp, #4]
 8007818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781a:	9300      	str	r3, [sp, #0]
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	68b9      	ldr	r1, [r7, #8]
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f000 f805 	bl	8007832 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007828:	69fb      	ldr	r3, [r7, #28]
	}
 800782a:	4618      	mov	r0, r3
 800782c:	3720      	adds	r7, #32
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b086      	sub	sp, #24
 8007836:	af00      	add	r7, sp, #0
 8007838:	60f8      	str	r0, [r7, #12]
 800783a:	60b9      	str	r1, [r7, #8]
 800783c:	607a      	str	r2, [r7, #4]
 800783e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d10a      	bne.n	800785c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8007846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800784a:	f383 8811 	msr	BASEPRI, r3
 800784e:	f3bf 8f6f 	isb	sy
 8007852:	f3bf 8f4f 	dsb	sy
 8007856:	617b      	str	r3, [r7, #20]
}
 8007858:	bf00      	nop
 800785a:	e7fe      	b.n	800785a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800785c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785e:	2b00      	cmp	r3, #0
 8007860:	d01e      	beq.n	80078a0 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007862:	f000 facb 	bl	8007dfc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800786c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786e:	68ba      	ldr	r2, [r7, #8]
 8007870:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8007872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007874:	683a      	ldr	r2, [r7, #0]
 8007876:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787a:	6a3a      	ldr	r2, [r7, #32]
 800787c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800787e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007880:	3304      	adds	r3, #4
 8007882:	4618      	mov	r0, r3
 8007884:	f7fe f876 	bl	8005974 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d008      	beq.n	80078a0 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800788e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007890:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007894:	f043 0304 	orr.w	r3, r3, #4
 8007898:	b2da      	uxtb	r2, r3
 800789a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80078a0:	bf00      	nop
 80078a2:	3718      	adds	r7, #24
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b08a      	sub	sp, #40	; 0x28
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	607a      	str	r2, [r7, #4]
 80078b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80078b6:	2300      	movs	r3, #0
 80078b8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d10a      	bne.n	80078d6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80078c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c4:	f383 8811 	msr	BASEPRI, r3
 80078c8:	f3bf 8f6f 	isb	sy
 80078cc:	f3bf 8f4f 	dsb	sy
 80078d0:	623b      	str	r3, [r7, #32]
}
 80078d2:	bf00      	nop
 80078d4:	e7fe      	b.n	80078d4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80078d6:	4b1a      	ldr	r3, [pc, #104]	; (8007940 <xTimerGenericCommand+0x98>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d02a      	beq.n	8007934 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	2b05      	cmp	r3, #5
 80078ee:	dc18      	bgt.n	8007922 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80078f0:	f7ff fc16 	bl	8007120 <xTaskGetSchedulerState>
 80078f4:	4603      	mov	r3, r0
 80078f6:	2b02      	cmp	r3, #2
 80078f8:	d109      	bne.n	800790e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80078fa:	4b11      	ldr	r3, [pc, #68]	; (8007940 <xTimerGenericCommand+0x98>)
 80078fc:	6818      	ldr	r0, [r3, #0]
 80078fe:	f107 0114 	add.w	r1, r7, #20
 8007902:	2300      	movs	r3, #0
 8007904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007906:	f7fe fa03 	bl	8005d10 <xQueueGenericSend>
 800790a:	6278      	str	r0, [r7, #36]	; 0x24
 800790c:	e012      	b.n	8007934 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800790e:	4b0c      	ldr	r3, [pc, #48]	; (8007940 <xTimerGenericCommand+0x98>)
 8007910:	6818      	ldr	r0, [r3, #0]
 8007912:	f107 0114 	add.w	r1, r7, #20
 8007916:	2300      	movs	r3, #0
 8007918:	2200      	movs	r2, #0
 800791a:	f7fe f9f9 	bl	8005d10 <xQueueGenericSend>
 800791e:	6278      	str	r0, [r7, #36]	; 0x24
 8007920:	e008      	b.n	8007934 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007922:	4b07      	ldr	r3, [pc, #28]	; (8007940 <xTimerGenericCommand+0x98>)
 8007924:	6818      	ldr	r0, [r3, #0]
 8007926:	f107 0114 	add.w	r1, r7, #20
 800792a:	2300      	movs	r3, #0
 800792c:	683a      	ldr	r2, [r7, #0]
 800792e:	f7fe faed 	bl	8005f0c <xQueueGenericSendFromISR>
 8007932:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007936:	4618      	mov	r0, r3
 8007938:	3728      	adds	r7, #40	; 0x28
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	20000a08 	.word	0x20000a08

08007944 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b088      	sub	sp, #32
 8007948:	af02      	add	r7, sp, #8
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800794e:	4b22      	ldr	r3, [pc, #136]	; (80079d8 <prvProcessExpiredTimer+0x94>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	68db      	ldr	r3, [r3, #12]
 8007956:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	3304      	adds	r3, #4
 800795c:	4618      	mov	r0, r3
 800795e:	f7fe f873 	bl	8005a48 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007968:	f003 0304 	and.w	r3, r3, #4
 800796c:	2b00      	cmp	r3, #0
 800796e:	d022      	beq.n	80079b6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	699a      	ldr	r2, [r3, #24]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	18d1      	adds	r1, r2, r3
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	683a      	ldr	r2, [r7, #0]
 800797c:	6978      	ldr	r0, [r7, #20]
 800797e:	f000 f8d1 	bl	8007b24 <prvInsertTimerInActiveList>
 8007982:	4603      	mov	r3, r0
 8007984:	2b00      	cmp	r3, #0
 8007986:	d01f      	beq.n	80079c8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007988:	2300      	movs	r3, #0
 800798a:	9300      	str	r3, [sp, #0]
 800798c:	2300      	movs	r3, #0
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	2100      	movs	r1, #0
 8007992:	6978      	ldr	r0, [r7, #20]
 8007994:	f7ff ff88 	bl	80078a8 <xTimerGenericCommand>
 8007998:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d113      	bne.n	80079c8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80079a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a4:	f383 8811 	msr	BASEPRI, r3
 80079a8:	f3bf 8f6f 	isb	sy
 80079ac:	f3bf 8f4f 	dsb	sy
 80079b0:	60fb      	str	r3, [r7, #12]
}
 80079b2:	bf00      	nop
 80079b4:	e7fe      	b.n	80079b4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80079bc:	f023 0301 	bic.w	r3, r3, #1
 80079c0:	b2da      	uxtb	r2, r3
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	6a1b      	ldr	r3, [r3, #32]
 80079cc:	6978      	ldr	r0, [r7, #20]
 80079ce:	4798      	blx	r3
}
 80079d0:	bf00      	nop
 80079d2:	3718      	adds	r7, #24
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	20000a00 	.word	0x20000a00

080079dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80079e4:	f107 0308 	add.w	r3, r7, #8
 80079e8:	4618      	mov	r0, r3
 80079ea:	f000 f857 	bl	8007a9c <prvGetNextExpireTime>
 80079ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	4619      	mov	r1, r3
 80079f4:	68f8      	ldr	r0, [r7, #12]
 80079f6:	f000 f803 	bl	8007a00 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80079fa:	f000 f8d5 	bl	8007ba8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80079fe:	e7f1      	b.n	80079e4 <prvTimerTask+0x8>

08007a00 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007a0a:	f7ff f817 	bl	8006a3c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a0e:	f107 0308 	add.w	r3, r7, #8
 8007a12:	4618      	mov	r0, r3
 8007a14:	f000 f866 	bl	8007ae4 <prvSampleTimeNow>
 8007a18:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d130      	bne.n	8007a82 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d10a      	bne.n	8007a3c <prvProcessTimerOrBlockTask+0x3c>
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d806      	bhi.n	8007a3c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007a2e:	f7ff f813 	bl	8006a58 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007a32:	68f9      	ldr	r1, [r7, #12]
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f7ff ff85 	bl	8007944 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007a3a:	e024      	b.n	8007a86 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d008      	beq.n	8007a54 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007a42:	4b13      	ldr	r3, [pc, #76]	; (8007a90 <prvProcessTimerOrBlockTask+0x90>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d101      	bne.n	8007a50 <prvProcessTimerOrBlockTask+0x50>
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	e000      	b.n	8007a52 <prvProcessTimerOrBlockTask+0x52>
 8007a50:	2300      	movs	r3, #0
 8007a52:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007a54:	4b0f      	ldr	r3, [pc, #60]	; (8007a94 <prvProcessTimerOrBlockTask+0x94>)
 8007a56:	6818      	ldr	r0, [r3, #0]
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	1ad3      	subs	r3, r2, r3
 8007a5e:	683a      	ldr	r2, [r7, #0]
 8007a60:	4619      	mov	r1, r3
 8007a62:	f7fe fd89 	bl	8006578 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007a66:	f7fe fff7 	bl	8006a58 <xTaskResumeAll>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d10a      	bne.n	8007a86 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007a70:	4b09      	ldr	r3, [pc, #36]	; (8007a98 <prvProcessTimerOrBlockTask+0x98>)
 8007a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a76:	601a      	str	r2, [r3, #0]
 8007a78:	f3bf 8f4f 	dsb	sy
 8007a7c:	f3bf 8f6f 	isb	sy
}
 8007a80:	e001      	b.n	8007a86 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007a82:	f7fe ffe9 	bl	8006a58 <xTaskResumeAll>
}
 8007a86:	bf00      	nop
 8007a88:	3710      	adds	r7, #16
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	20000a04 	.word	0x20000a04
 8007a94:	20000a08 	.word	0x20000a08
 8007a98:	e000ed04 	.word	0xe000ed04

08007a9c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b085      	sub	sp, #20
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007aa4:	4b0e      	ldr	r3, [pc, #56]	; (8007ae0 <prvGetNextExpireTime+0x44>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d101      	bne.n	8007ab2 <prvGetNextExpireTime+0x16>
 8007aae:	2201      	movs	r2, #1
 8007ab0:	e000      	b.n	8007ab4 <prvGetNextExpireTime+0x18>
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d105      	bne.n	8007acc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ac0:	4b07      	ldr	r3, [pc, #28]	; (8007ae0 <prvGetNextExpireTime+0x44>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	60fb      	str	r3, [r7, #12]
 8007aca:	e001      	b.n	8007ad0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007acc:	2300      	movs	r3, #0
 8007ace:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3714      	adds	r7, #20
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr
 8007ade:	bf00      	nop
 8007ae0:	20000a00 	.word	0x20000a00

08007ae4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007aec:	f7ff f850 	bl	8006b90 <xTaskGetTickCount>
 8007af0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007af2:	4b0b      	ldr	r3, [pc, #44]	; (8007b20 <prvSampleTimeNow+0x3c>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	68fa      	ldr	r2, [r7, #12]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d205      	bcs.n	8007b08 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007afc:	f000 f91a 	bl	8007d34 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2201      	movs	r2, #1
 8007b04:	601a      	str	r2, [r3, #0]
 8007b06:	e002      	b.n	8007b0e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007b0e:	4a04      	ldr	r2, [pc, #16]	; (8007b20 <prvSampleTimeNow+0x3c>)
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007b14:	68fb      	ldr	r3, [r7, #12]
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3710      	adds	r7, #16
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	20000a10 	.word	0x20000a10

08007b24 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b086      	sub	sp, #24
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	60b9      	str	r1, [r7, #8]
 8007b2e:	607a      	str	r2, [r7, #4]
 8007b30:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007b32:	2300      	movs	r3, #0
 8007b34:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	68ba      	ldr	r2, [r7, #8]
 8007b3a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	68fa      	ldr	r2, [r7, #12]
 8007b40:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007b42:	68ba      	ldr	r2, [r7, #8]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d812      	bhi.n	8007b70 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	1ad2      	subs	r2, r2, r3
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	699b      	ldr	r3, [r3, #24]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d302      	bcc.n	8007b5e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	617b      	str	r3, [r7, #20]
 8007b5c:	e01b      	b.n	8007b96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007b5e:	4b10      	ldr	r3, [pc, #64]	; (8007ba0 <prvInsertTimerInActiveList+0x7c>)
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	3304      	adds	r3, #4
 8007b66:	4619      	mov	r1, r3
 8007b68:	4610      	mov	r0, r2
 8007b6a:	f7fd ff34 	bl	80059d6 <vListInsert>
 8007b6e:	e012      	b.n	8007b96 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d206      	bcs.n	8007b86 <prvInsertTimerInActiveList+0x62>
 8007b78:	68ba      	ldr	r2, [r7, #8]
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d302      	bcc.n	8007b86 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007b80:	2301      	movs	r3, #1
 8007b82:	617b      	str	r3, [r7, #20]
 8007b84:	e007      	b.n	8007b96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b86:	4b07      	ldr	r3, [pc, #28]	; (8007ba4 <prvInsertTimerInActiveList+0x80>)
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	3304      	adds	r3, #4
 8007b8e:	4619      	mov	r1, r3
 8007b90:	4610      	mov	r0, r2
 8007b92:	f7fd ff20 	bl	80059d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007b96:	697b      	ldr	r3, [r7, #20]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3718      	adds	r7, #24
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}
 8007ba0:	20000a04 	.word	0x20000a04
 8007ba4:	20000a00 	.word	0x20000a00

08007ba8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b08c      	sub	sp, #48	; 0x30
 8007bac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007bae:	e0ae      	b.n	8007d0e <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f2c0 80aa 	blt.w	8007d0c <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbe:	695b      	ldr	r3, [r3, #20]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d004      	beq.n	8007bce <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc6:	3304      	adds	r3, #4
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f7fd ff3d 	bl	8005a48 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007bce:	1d3b      	adds	r3, r7, #4
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f7ff ff87 	bl	8007ae4 <prvSampleTimeNow>
 8007bd6:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	2b09      	cmp	r3, #9
 8007bdc:	f200 8097 	bhi.w	8007d0e <prvProcessReceivedCommands+0x166>
 8007be0:	a201      	add	r2, pc, #4	; (adr r2, 8007be8 <prvProcessReceivedCommands+0x40>)
 8007be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be6:	bf00      	nop
 8007be8:	08007c11 	.word	0x08007c11
 8007bec:	08007c11 	.word	0x08007c11
 8007bf0:	08007c11 	.word	0x08007c11
 8007bf4:	08007c85 	.word	0x08007c85
 8007bf8:	08007c99 	.word	0x08007c99
 8007bfc:	08007ce3 	.word	0x08007ce3
 8007c00:	08007c11 	.word	0x08007c11
 8007c04:	08007c11 	.word	0x08007c11
 8007c08:	08007c85 	.word	0x08007c85
 8007c0c:	08007c99 	.word	0x08007c99
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c16:	f043 0301 	orr.w	r3, r3, #1
 8007c1a:	b2da      	uxtb	r2, r3
 8007c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007c22:	68fa      	ldr	r2, [r7, #12]
 8007c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c26:	699b      	ldr	r3, [r3, #24]
 8007c28:	18d1      	adds	r1, r2, r3
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6a3a      	ldr	r2, [r7, #32]
 8007c2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c30:	f7ff ff78 	bl	8007b24 <prvInsertTimerInActiveList>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d069      	beq.n	8007d0e <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3c:	6a1b      	ldr	r3, [r3, #32]
 8007c3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c40:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c48:	f003 0304 	and.w	r3, r3, #4
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d05e      	beq.n	8007d0e <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c54:	699b      	ldr	r3, [r3, #24]
 8007c56:	441a      	add	r2, r3
 8007c58:	2300      	movs	r3, #0
 8007c5a:	9300      	str	r3, [sp, #0]
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	2100      	movs	r1, #0
 8007c60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c62:	f7ff fe21 	bl	80078a8 <xTimerGenericCommand>
 8007c66:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d14f      	bne.n	8007d0e <prvProcessReceivedCommands+0x166>
	__asm volatile
 8007c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c72:	f383 8811 	msr	BASEPRI, r3
 8007c76:	f3bf 8f6f 	isb	sy
 8007c7a:	f3bf 8f4f 	dsb	sy
 8007c7e:	61bb      	str	r3, [r7, #24]
}
 8007c80:	bf00      	nop
 8007c82:	e7fe      	b.n	8007c82 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c8a:	f023 0301 	bic.w	r3, r3, #1
 8007c8e:	b2da      	uxtb	r2, r3
 8007c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8007c96:	e03a      	b.n	8007d0e <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c9e:	f043 0301 	orr.w	r3, r3, #1
 8007ca2:	b2da      	uxtb	r2, r3
 8007ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007caa:	68fa      	ldr	r2, [r7, #12]
 8007cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb2:	699b      	ldr	r3, [r3, #24]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d10a      	bne.n	8007cce <prvProcessReceivedCommands+0x126>
	__asm volatile
 8007cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cbc:	f383 8811 	msr	BASEPRI, r3
 8007cc0:	f3bf 8f6f 	isb	sy
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	617b      	str	r3, [r7, #20]
}
 8007cca:	bf00      	nop
 8007ccc:	e7fe      	b.n	8007ccc <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd0:	699a      	ldr	r2, [r3, #24]
 8007cd2:	6a3b      	ldr	r3, [r7, #32]
 8007cd4:	18d1      	adds	r1, r2, r3
 8007cd6:	6a3b      	ldr	r3, [r7, #32]
 8007cd8:	6a3a      	ldr	r2, [r7, #32]
 8007cda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007cdc:	f7ff ff22 	bl	8007b24 <prvInsertTimerInActiveList>
					break;
 8007ce0:	e015      	b.n	8007d0e <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007ce8:	f003 0302 	and.w	r3, r3, #2
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d103      	bne.n	8007cf8 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8007cf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007cf2:	f000 fbdd 	bl	80084b0 <vPortFree>
 8007cf6:	e00a      	b.n	8007d0e <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007cfe:	f023 0301 	bic.w	r3, r3, #1
 8007d02:	b2da      	uxtb	r2, r3
 8007d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007d0a:	e000      	b.n	8007d0e <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007d0c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d0e:	4b08      	ldr	r3, [pc, #32]	; (8007d30 <prvProcessReceivedCommands+0x188>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f107 0108 	add.w	r1, r7, #8
 8007d16:	2200      	movs	r2, #0
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f7fe f993 	bl	8006044 <xQueueReceive>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	f47f af45 	bne.w	8007bb0 <prvProcessReceivedCommands+0x8>
	}
}
 8007d26:	bf00      	nop
 8007d28:	bf00      	nop
 8007d2a:	3728      	adds	r7, #40	; 0x28
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}
 8007d30:	20000a08 	.word	0x20000a08

08007d34 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b088      	sub	sp, #32
 8007d38:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d3a:	e048      	b.n	8007dce <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d3c:	4b2d      	ldr	r3, [pc, #180]	; (8007df4 <prvSwitchTimerLists+0xc0>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d46:	4b2b      	ldr	r3, [pc, #172]	; (8007df4 <prvSwitchTimerLists+0xc0>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	3304      	adds	r3, #4
 8007d54:	4618      	mov	r0, r3
 8007d56:	f7fd fe77 	bl	8005a48 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6a1b      	ldr	r3, [r3, #32]
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007d68:	f003 0304 	and.w	r3, r3, #4
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d02e      	beq.n	8007dce <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	699b      	ldr	r3, [r3, #24]
 8007d74:	693a      	ldr	r2, [r7, #16]
 8007d76:	4413      	add	r3, r2
 8007d78:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007d7a:	68ba      	ldr	r2, [r7, #8]
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d90e      	bls.n	8007da0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	68ba      	ldr	r2, [r7, #8]
 8007d86:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	68fa      	ldr	r2, [r7, #12]
 8007d8c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d8e:	4b19      	ldr	r3, [pc, #100]	; (8007df4 <prvSwitchTimerLists+0xc0>)
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	3304      	adds	r3, #4
 8007d96:	4619      	mov	r1, r3
 8007d98:	4610      	mov	r0, r2
 8007d9a:	f7fd fe1c 	bl	80059d6 <vListInsert>
 8007d9e:	e016      	b.n	8007dce <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007da0:	2300      	movs	r3, #0
 8007da2:	9300      	str	r3, [sp, #0]
 8007da4:	2300      	movs	r3, #0
 8007da6:	693a      	ldr	r2, [r7, #16]
 8007da8:	2100      	movs	r1, #0
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	f7ff fd7c 	bl	80078a8 <xTimerGenericCommand>
 8007db0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d10a      	bne.n	8007dce <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dbc:	f383 8811 	msr	BASEPRI, r3
 8007dc0:	f3bf 8f6f 	isb	sy
 8007dc4:	f3bf 8f4f 	dsb	sy
 8007dc8:	603b      	str	r3, [r7, #0]
}
 8007dca:	bf00      	nop
 8007dcc:	e7fe      	b.n	8007dcc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007dce:	4b09      	ldr	r3, [pc, #36]	; (8007df4 <prvSwitchTimerLists+0xc0>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d1b1      	bne.n	8007d3c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007dd8:	4b06      	ldr	r3, [pc, #24]	; (8007df4 <prvSwitchTimerLists+0xc0>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007dde:	4b06      	ldr	r3, [pc, #24]	; (8007df8 <prvSwitchTimerLists+0xc4>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a04      	ldr	r2, [pc, #16]	; (8007df4 <prvSwitchTimerLists+0xc0>)
 8007de4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007de6:	4a04      	ldr	r2, [pc, #16]	; (8007df8 <prvSwitchTimerLists+0xc4>)
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	6013      	str	r3, [r2, #0]
}
 8007dec:	bf00      	nop
 8007dee:	3718      	adds	r7, #24
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}
 8007df4:	20000a00 	.word	0x20000a00
 8007df8:	20000a04 	.word	0x20000a04

08007dfc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007e02:	f000 f967 	bl	80080d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007e06:	4b15      	ldr	r3, [pc, #84]	; (8007e5c <prvCheckForValidListAndQueue+0x60>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d120      	bne.n	8007e50 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007e0e:	4814      	ldr	r0, [pc, #80]	; (8007e60 <prvCheckForValidListAndQueue+0x64>)
 8007e10:	f7fd fd90 	bl	8005934 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007e14:	4813      	ldr	r0, [pc, #76]	; (8007e64 <prvCheckForValidListAndQueue+0x68>)
 8007e16:	f7fd fd8d 	bl	8005934 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007e1a:	4b13      	ldr	r3, [pc, #76]	; (8007e68 <prvCheckForValidListAndQueue+0x6c>)
 8007e1c:	4a10      	ldr	r2, [pc, #64]	; (8007e60 <prvCheckForValidListAndQueue+0x64>)
 8007e1e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007e20:	4b12      	ldr	r3, [pc, #72]	; (8007e6c <prvCheckForValidListAndQueue+0x70>)
 8007e22:	4a10      	ldr	r2, [pc, #64]	; (8007e64 <prvCheckForValidListAndQueue+0x68>)
 8007e24:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007e26:	2300      	movs	r3, #0
 8007e28:	9300      	str	r3, [sp, #0]
 8007e2a:	4b11      	ldr	r3, [pc, #68]	; (8007e70 <prvCheckForValidListAndQueue+0x74>)
 8007e2c:	4a11      	ldr	r2, [pc, #68]	; (8007e74 <prvCheckForValidListAndQueue+0x78>)
 8007e2e:	210c      	movs	r1, #12
 8007e30:	200a      	movs	r0, #10
 8007e32:	f7fd fe9b 	bl	8005b6c <xQueueGenericCreateStatic>
 8007e36:	4603      	mov	r3, r0
 8007e38:	4a08      	ldr	r2, [pc, #32]	; (8007e5c <prvCheckForValidListAndQueue+0x60>)
 8007e3a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007e3c:	4b07      	ldr	r3, [pc, #28]	; (8007e5c <prvCheckForValidListAndQueue+0x60>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d005      	beq.n	8007e50 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007e44:	4b05      	ldr	r3, [pc, #20]	; (8007e5c <prvCheckForValidListAndQueue+0x60>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	490b      	ldr	r1, [pc, #44]	; (8007e78 <prvCheckForValidListAndQueue+0x7c>)
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7fe fb6a 	bl	8006524 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e50:	f000 f970 	bl	8008134 <vPortExitCritical>
}
 8007e54:	bf00      	nop
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	20000a08 	.word	0x20000a08
 8007e60:	200009d8 	.word	0x200009d8
 8007e64:	200009ec 	.word	0x200009ec
 8007e68:	20000a00 	.word	0x20000a00
 8007e6c:	20000a04 	.word	0x20000a04
 8007e70:	20000a8c 	.word	0x20000a8c
 8007e74:	20000a14 	.word	0x20000a14
 8007e78:	08009250 	.word	0x08009250

08007e7c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b085      	sub	sp, #20
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	3b04      	subs	r3, #4
 8007e8c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007e94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	3b04      	subs	r3, #4
 8007e9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	f023 0201 	bic.w	r2, r3, #1
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	3b04      	subs	r3, #4
 8007eaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007eac:	4a0c      	ldr	r2, [pc, #48]	; (8007ee0 <pxPortInitialiseStack+0x64>)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	3b14      	subs	r3, #20
 8007eb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	3b04      	subs	r3, #4
 8007ec2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f06f 0202 	mvn.w	r2, #2
 8007eca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	3b20      	subs	r3, #32
 8007ed0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3714      	adds	r7, #20
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr
 8007ee0:	08007ee5 	.word	0x08007ee5

08007ee4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b085      	sub	sp, #20
 8007ee8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007eea:	2300      	movs	r3, #0
 8007eec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007eee:	4b12      	ldr	r3, [pc, #72]	; (8007f38 <prvTaskExitError+0x54>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ef6:	d00a      	beq.n	8007f0e <prvTaskExitError+0x2a>
	__asm volatile
 8007ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007efc:	f383 8811 	msr	BASEPRI, r3
 8007f00:	f3bf 8f6f 	isb	sy
 8007f04:	f3bf 8f4f 	dsb	sy
 8007f08:	60fb      	str	r3, [r7, #12]
}
 8007f0a:	bf00      	nop
 8007f0c:	e7fe      	b.n	8007f0c <prvTaskExitError+0x28>
	__asm volatile
 8007f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f12:	f383 8811 	msr	BASEPRI, r3
 8007f16:	f3bf 8f6f 	isb	sy
 8007f1a:	f3bf 8f4f 	dsb	sy
 8007f1e:	60bb      	str	r3, [r7, #8]
}
 8007f20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f22:	bf00      	nop
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d0fc      	beq.n	8007f24 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f2a:	bf00      	nop
 8007f2c:	bf00      	nop
 8007f2e:	3714      	adds	r7, #20
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr
 8007f38:	2000000c 	.word	0x2000000c
 8007f3c:	00000000 	.word	0x00000000

08007f40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f40:	4b07      	ldr	r3, [pc, #28]	; (8007f60 <pxCurrentTCBConst2>)
 8007f42:	6819      	ldr	r1, [r3, #0]
 8007f44:	6808      	ldr	r0, [r1, #0]
 8007f46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f4a:	f380 8809 	msr	PSP, r0
 8007f4e:	f3bf 8f6f 	isb	sy
 8007f52:	f04f 0000 	mov.w	r0, #0
 8007f56:	f380 8811 	msr	BASEPRI, r0
 8007f5a:	4770      	bx	lr
 8007f5c:	f3af 8000 	nop.w

08007f60 <pxCurrentTCBConst2>:
 8007f60:	200008d8 	.word	0x200008d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f64:	bf00      	nop
 8007f66:	bf00      	nop

08007f68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007f68:	4808      	ldr	r0, [pc, #32]	; (8007f8c <prvPortStartFirstTask+0x24>)
 8007f6a:	6800      	ldr	r0, [r0, #0]
 8007f6c:	6800      	ldr	r0, [r0, #0]
 8007f6e:	f380 8808 	msr	MSP, r0
 8007f72:	f04f 0000 	mov.w	r0, #0
 8007f76:	f380 8814 	msr	CONTROL, r0
 8007f7a:	b662      	cpsie	i
 8007f7c:	b661      	cpsie	f
 8007f7e:	f3bf 8f4f 	dsb	sy
 8007f82:	f3bf 8f6f 	isb	sy
 8007f86:	df00      	svc	0
 8007f88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007f8a:	bf00      	nop
 8007f8c:	e000ed08 	.word	0xe000ed08

08007f90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b086      	sub	sp, #24
 8007f94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007f96:	4b46      	ldr	r3, [pc, #280]	; (80080b0 <xPortStartScheduler+0x120>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a46      	ldr	r2, [pc, #280]	; (80080b4 <xPortStartScheduler+0x124>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d10a      	bne.n	8007fb6 <xPortStartScheduler+0x26>
	__asm volatile
 8007fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa4:	f383 8811 	msr	BASEPRI, r3
 8007fa8:	f3bf 8f6f 	isb	sy
 8007fac:	f3bf 8f4f 	dsb	sy
 8007fb0:	613b      	str	r3, [r7, #16]
}
 8007fb2:	bf00      	nop
 8007fb4:	e7fe      	b.n	8007fb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007fb6:	4b3e      	ldr	r3, [pc, #248]	; (80080b0 <xPortStartScheduler+0x120>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a3f      	ldr	r2, [pc, #252]	; (80080b8 <xPortStartScheduler+0x128>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d10a      	bne.n	8007fd6 <xPortStartScheduler+0x46>
	__asm volatile
 8007fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc4:	f383 8811 	msr	BASEPRI, r3
 8007fc8:	f3bf 8f6f 	isb	sy
 8007fcc:	f3bf 8f4f 	dsb	sy
 8007fd0:	60fb      	str	r3, [r7, #12]
}
 8007fd2:	bf00      	nop
 8007fd4:	e7fe      	b.n	8007fd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007fd6:	4b39      	ldr	r3, [pc, #228]	; (80080bc <xPortStartScheduler+0x12c>)
 8007fd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	22ff      	movs	r2, #255	; 0xff
 8007fe6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ff0:	78fb      	ldrb	r3, [r7, #3]
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007ff8:	b2da      	uxtb	r2, r3
 8007ffa:	4b31      	ldr	r3, [pc, #196]	; (80080c0 <xPortStartScheduler+0x130>)
 8007ffc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007ffe:	4b31      	ldr	r3, [pc, #196]	; (80080c4 <xPortStartScheduler+0x134>)
 8008000:	2207      	movs	r2, #7
 8008002:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008004:	e009      	b.n	800801a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008006:	4b2f      	ldr	r3, [pc, #188]	; (80080c4 <xPortStartScheduler+0x134>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	3b01      	subs	r3, #1
 800800c:	4a2d      	ldr	r2, [pc, #180]	; (80080c4 <xPortStartScheduler+0x134>)
 800800e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008010:	78fb      	ldrb	r3, [r7, #3]
 8008012:	b2db      	uxtb	r3, r3
 8008014:	005b      	lsls	r3, r3, #1
 8008016:	b2db      	uxtb	r3, r3
 8008018:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800801a:	78fb      	ldrb	r3, [r7, #3]
 800801c:	b2db      	uxtb	r3, r3
 800801e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008022:	2b80      	cmp	r3, #128	; 0x80
 8008024:	d0ef      	beq.n	8008006 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008026:	4b27      	ldr	r3, [pc, #156]	; (80080c4 <xPortStartScheduler+0x134>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f1c3 0307 	rsb	r3, r3, #7
 800802e:	2b04      	cmp	r3, #4
 8008030:	d00a      	beq.n	8008048 <xPortStartScheduler+0xb8>
	__asm volatile
 8008032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008036:	f383 8811 	msr	BASEPRI, r3
 800803a:	f3bf 8f6f 	isb	sy
 800803e:	f3bf 8f4f 	dsb	sy
 8008042:	60bb      	str	r3, [r7, #8]
}
 8008044:	bf00      	nop
 8008046:	e7fe      	b.n	8008046 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008048:	4b1e      	ldr	r3, [pc, #120]	; (80080c4 <xPortStartScheduler+0x134>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	021b      	lsls	r3, r3, #8
 800804e:	4a1d      	ldr	r2, [pc, #116]	; (80080c4 <xPortStartScheduler+0x134>)
 8008050:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008052:	4b1c      	ldr	r3, [pc, #112]	; (80080c4 <xPortStartScheduler+0x134>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800805a:	4a1a      	ldr	r2, [pc, #104]	; (80080c4 <xPortStartScheduler+0x134>)
 800805c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	b2da      	uxtb	r2, r3
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008066:	4b18      	ldr	r3, [pc, #96]	; (80080c8 <xPortStartScheduler+0x138>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a17      	ldr	r2, [pc, #92]	; (80080c8 <xPortStartScheduler+0x138>)
 800806c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008070:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008072:	4b15      	ldr	r3, [pc, #84]	; (80080c8 <xPortStartScheduler+0x138>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a14      	ldr	r2, [pc, #80]	; (80080c8 <xPortStartScheduler+0x138>)
 8008078:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800807c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800807e:	f000 f8dd 	bl	800823c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008082:	4b12      	ldr	r3, [pc, #72]	; (80080cc <xPortStartScheduler+0x13c>)
 8008084:	2200      	movs	r2, #0
 8008086:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008088:	f000 f8fc 	bl	8008284 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800808c:	4b10      	ldr	r3, [pc, #64]	; (80080d0 <xPortStartScheduler+0x140>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a0f      	ldr	r2, [pc, #60]	; (80080d0 <xPortStartScheduler+0x140>)
 8008092:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008096:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008098:	f7ff ff66 	bl	8007f68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800809c:	f7fe fe40 	bl	8006d20 <vTaskSwitchContext>
	prvTaskExitError();
 80080a0:	f7ff ff20 	bl	8007ee4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80080a4:	2300      	movs	r3, #0
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3718      	adds	r7, #24
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	e000ed00 	.word	0xe000ed00
 80080b4:	410fc271 	.word	0x410fc271
 80080b8:	410fc270 	.word	0x410fc270
 80080bc:	e000e400 	.word	0xe000e400
 80080c0:	20000ad4 	.word	0x20000ad4
 80080c4:	20000ad8 	.word	0x20000ad8
 80080c8:	e000ed20 	.word	0xe000ed20
 80080cc:	2000000c 	.word	0x2000000c
 80080d0:	e000ef34 	.word	0xe000ef34

080080d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
	__asm volatile
 80080da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080de:	f383 8811 	msr	BASEPRI, r3
 80080e2:	f3bf 8f6f 	isb	sy
 80080e6:	f3bf 8f4f 	dsb	sy
 80080ea:	607b      	str	r3, [r7, #4]
}
 80080ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80080ee:	4b0f      	ldr	r3, [pc, #60]	; (800812c <vPortEnterCritical+0x58>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	3301      	adds	r3, #1
 80080f4:	4a0d      	ldr	r2, [pc, #52]	; (800812c <vPortEnterCritical+0x58>)
 80080f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80080f8:	4b0c      	ldr	r3, [pc, #48]	; (800812c <vPortEnterCritical+0x58>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d10f      	bne.n	8008120 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008100:	4b0b      	ldr	r3, [pc, #44]	; (8008130 <vPortEnterCritical+0x5c>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	b2db      	uxtb	r3, r3
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00a      	beq.n	8008120 <vPortEnterCritical+0x4c>
	__asm volatile
 800810a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810e:	f383 8811 	msr	BASEPRI, r3
 8008112:	f3bf 8f6f 	isb	sy
 8008116:	f3bf 8f4f 	dsb	sy
 800811a:	603b      	str	r3, [r7, #0]
}
 800811c:	bf00      	nop
 800811e:	e7fe      	b.n	800811e <vPortEnterCritical+0x4a>
	}
}
 8008120:	bf00      	nop
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr
 800812c:	2000000c 	.word	0x2000000c
 8008130:	e000ed04 	.word	0xe000ed04

08008134 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800813a:	4b12      	ldr	r3, [pc, #72]	; (8008184 <vPortExitCritical+0x50>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d10a      	bne.n	8008158 <vPortExitCritical+0x24>
	__asm volatile
 8008142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008146:	f383 8811 	msr	BASEPRI, r3
 800814a:	f3bf 8f6f 	isb	sy
 800814e:	f3bf 8f4f 	dsb	sy
 8008152:	607b      	str	r3, [r7, #4]
}
 8008154:	bf00      	nop
 8008156:	e7fe      	b.n	8008156 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008158:	4b0a      	ldr	r3, [pc, #40]	; (8008184 <vPortExitCritical+0x50>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	3b01      	subs	r3, #1
 800815e:	4a09      	ldr	r2, [pc, #36]	; (8008184 <vPortExitCritical+0x50>)
 8008160:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008162:	4b08      	ldr	r3, [pc, #32]	; (8008184 <vPortExitCritical+0x50>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d105      	bne.n	8008176 <vPortExitCritical+0x42>
 800816a:	2300      	movs	r3, #0
 800816c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	f383 8811 	msr	BASEPRI, r3
}
 8008174:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008176:	bf00      	nop
 8008178:	370c      	adds	r7, #12
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr
 8008182:	bf00      	nop
 8008184:	2000000c 	.word	0x2000000c
	...

08008190 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008190:	f3ef 8009 	mrs	r0, PSP
 8008194:	f3bf 8f6f 	isb	sy
 8008198:	4b15      	ldr	r3, [pc, #84]	; (80081f0 <pxCurrentTCBConst>)
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	f01e 0f10 	tst.w	lr, #16
 80081a0:	bf08      	it	eq
 80081a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80081a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081aa:	6010      	str	r0, [r2, #0]
 80081ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80081b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80081b4:	f380 8811 	msr	BASEPRI, r0
 80081b8:	f3bf 8f4f 	dsb	sy
 80081bc:	f3bf 8f6f 	isb	sy
 80081c0:	f7fe fdae 	bl	8006d20 <vTaskSwitchContext>
 80081c4:	f04f 0000 	mov.w	r0, #0
 80081c8:	f380 8811 	msr	BASEPRI, r0
 80081cc:	bc09      	pop	{r0, r3}
 80081ce:	6819      	ldr	r1, [r3, #0]
 80081d0:	6808      	ldr	r0, [r1, #0]
 80081d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081d6:	f01e 0f10 	tst.w	lr, #16
 80081da:	bf08      	it	eq
 80081dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80081e0:	f380 8809 	msr	PSP, r0
 80081e4:	f3bf 8f6f 	isb	sy
 80081e8:	4770      	bx	lr
 80081ea:	bf00      	nop
 80081ec:	f3af 8000 	nop.w

080081f0 <pxCurrentTCBConst>:
 80081f0:	200008d8 	.word	0x200008d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80081f4:	bf00      	nop
 80081f6:	bf00      	nop

080081f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
	__asm volatile
 80081fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008202:	f383 8811 	msr	BASEPRI, r3
 8008206:	f3bf 8f6f 	isb	sy
 800820a:	f3bf 8f4f 	dsb	sy
 800820e:	607b      	str	r3, [r7, #4]
}
 8008210:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008212:	f7fe fccd 	bl	8006bb0 <xTaskIncrementTick>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d003      	beq.n	8008224 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800821c:	4b06      	ldr	r3, [pc, #24]	; (8008238 <SysTick_Handler+0x40>)
 800821e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008222:	601a      	str	r2, [r3, #0]
 8008224:	2300      	movs	r3, #0
 8008226:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	f383 8811 	msr	BASEPRI, r3
}
 800822e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008230:	bf00      	nop
 8008232:	3708      	adds	r7, #8
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}
 8008238:	e000ed04 	.word	0xe000ed04

0800823c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800823c:	b480      	push	{r7}
 800823e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008240:	4b0b      	ldr	r3, [pc, #44]	; (8008270 <vPortSetupTimerInterrupt+0x34>)
 8008242:	2200      	movs	r2, #0
 8008244:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008246:	4b0b      	ldr	r3, [pc, #44]	; (8008274 <vPortSetupTimerInterrupt+0x38>)
 8008248:	2200      	movs	r2, #0
 800824a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800824c:	4b0a      	ldr	r3, [pc, #40]	; (8008278 <vPortSetupTimerInterrupt+0x3c>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a0a      	ldr	r2, [pc, #40]	; (800827c <vPortSetupTimerInterrupt+0x40>)
 8008252:	fba2 2303 	umull	r2, r3, r2, r3
 8008256:	099b      	lsrs	r3, r3, #6
 8008258:	4a09      	ldr	r2, [pc, #36]	; (8008280 <vPortSetupTimerInterrupt+0x44>)
 800825a:	3b01      	subs	r3, #1
 800825c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800825e:	4b04      	ldr	r3, [pc, #16]	; (8008270 <vPortSetupTimerInterrupt+0x34>)
 8008260:	2207      	movs	r2, #7
 8008262:	601a      	str	r2, [r3, #0]
}
 8008264:	bf00      	nop
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop
 8008270:	e000e010 	.word	0xe000e010
 8008274:	e000e018 	.word	0xe000e018
 8008278:	20000000 	.word	0x20000000
 800827c:	10624dd3 	.word	0x10624dd3
 8008280:	e000e014 	.word	0xe000e014

08008284 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008284:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008294 <vPortEnableVFP+0x10>
 8008288:	6801      	ldr	r1, [r0, #0]
 800828a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800828e:	6001      	str	r1, [r0, #0]
 8008290:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008292:	bf00      	nop
 8008294:	e000ed88 	.word	0xe000ed88

08008298 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008298:	b480      	push	{r7}
 800829a:	b085      	sub	sp, #20
 800829c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800829e:	f3ef 8305 	mrs	r3, IPSR
 80082a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2b0f      	cmp	r3, #15
 80082a8:	d914      	bls.n	80082d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80082aa:	4a17      	ldr	r2, [pc, #92]	; (8008308 <vPortValidateInterruptPriority+0x70>)
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	4413      	add	r3, r2
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80082b4:	4b15      	ldr	r3, [pc, #84]	; (800830c <vPortValidateInterruptPriority+0x74>)
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	7afa      	ldrb	r2, [r7, #11]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d20a      	bcs.n	80082d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80082be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c2:	f383 8811 	msr	BASEPRI, r3
 80082c6:	f3bf 8f6f 	isb	sy
 80082ca:	f3bf 8f4f 	dsb	sy
 80082ce:	607b      	str	r3, [r7, #4]
}
 80082d0:	bf00      	nop
 80082d2:	e7fe      	b.n	80082d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80082d4:	4b0e      	ldr	r3, [pc, #56]	; (8008310 <vPortValidateInterruptPriority+0x78>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80082dc:	4b0d      	ldr	r3, [pc, #52]	; (8008314 <vPortValidateInterruptPriority+0x7c>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d90a      	bls.n	80082fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80082e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e8:	f383 8811 	msr	BASEPRI, r3
 80082ec:	f3bf 8f6f 	isb	sy
 80082f0:	f3bf 8f4f 	dsb	sy
 80082f4:	603b      	str	r3, [r7, #0]
}
 80082f6:	bf00      	nop
 80082f8:	e7fe      	b.n	80082f8 <vPortValidateInterruptPriority+0x60>
	}
 80082fa:	bf00      	nop
 80082fc:	3714      	adds	r7, #20
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr
 8008306:	bf00      	nop
 8008308:	e000e3f0 	.word	0xe000e3f0
 800830c:	20000ad4 	.word	0x20000ad4
 8008310:	e000ed0c 	.word	0xe000ed0c
 8008314:	20000ad8 	.word	0x20000ad8

08008318 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b08a      	sub	sp, #40	; 0x28
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008320:	2300      	movs	r3, #0
 8008322:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008324:	f7fe fb8a 	bl	8006a3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008328:	4b5b      	ldr	r3, [pc, #364]	; (8008498 <pvPortMalloc+0x180>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d101      	bne.n	8008334 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008330:	f000 f920 	bl	8008574 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008334:	4b59      	ldr	r3, [pc, #356]	; (800849c <pvPortMalloc+0x184>)
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	4013      	ands	r3, r2
 800833c:	2b00      	cmp	r3, #0
 800833e:	f040 8093 	bne.w	8008468 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d01d      	beq.n	8008384 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008348:	2208      	movs	r2, #8
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4413      	add	r3, r2
 800834e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f003 0307 	and.w	r3, r3, #7
 8008356:	2b00      	cmp	r3, #0
 8008358:	d014      	beq.n	8008384 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f023 0307 	bic.w	r3, r3, #7
 8008360:	3308      	adds	r3, #8
 8008362:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f003 0307 	and.w	r3, r3, #7
 800836a:	2b00      	cmp	r3, #0
 800836c:	d00a      	beq.n	8008384 <pvPortMalloc+0x6c>
	__asm volatile
 800836e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008372:	f383 8811 	msr	BASEPRI, r3
 8008376:	f3bf 8f6f 	isb	sy
 800837a:	f3bf 8f4f 	dsb	sy
 800837e:	617b      	str	r3, [r7, #20]
}
 8008380:	bf00      	nop
 8008382:	e7fe      	b.n	8008382 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d06e      	beq.n	8008468 <pvPortMalloc+0x150>
 800838a:	4b45      	ldr	r3, [pc, #276]	; (80084a0 <pvPortMalloc+0x188>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	429a      	cmp	r2, r3
 8008392:	d869      	bhi.n	8008468 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008394:	4b43      	ldr	r3, [pc, #268]	; (80084a4 <pvPortMalloc+0x18c>)
 8008396:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008398:	4b42      	ldr	r3, [pc, #264]	; (80084a4 <pvPortMalloc+0x18c>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800839e:	e004      	b.n	80083aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80083a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80083a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d903      	bls.n	80083bc <pvPortMalloc+0xa4>
 80083b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d1f1      	bne.n	80083a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80083bc:	4b36      	ldr	r3, [pc, #216]	; (8008498 <pvPortMalloc+0x180>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d050      	beq.n	8008468 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80083c6:	6a3b      	ldr	r3, [r7, #32]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2208      	movs	r2, #8
 80083cc:	4413      	add	r3, r2
 80083ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80083d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	6a3b      	ldr	r3, [r7, #32]
 80083d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80083d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083da:	685a      	ldr	r2, [r3, #4]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	1ad2      	subs	r2, r2, r3
 80083e0:	2308      	movs	r3, #8
 80083e2:	005b      	lsls	r3, r3, #1
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d91f      	bls.n	8008428 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80083e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4413      	add	r3, r2
 80083ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083f0:	69bb      	ldr	r3, [r7, #24]
 80083f2:	f003 0307 	and.w	r3, r3, #7
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00a      	beq.n	8008410 <pvPortMalloc+0xf8>
	__asm volatile
 80083fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083fe:	f383 8811 	msr	BASEPRI, r3
 8008402:	f3bf 8f6f 	isb	sy
 8008406:	f3bf 8f4f 	dsb	sy
 800840a:	613b      	str	r3, [r7, #16]
}
 800840c:	bf00      	nop
 800840e:	e7fe      	b.n	800840e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008412:	685a      	ldr	r2, [r3, #4]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	1ad2      	subs	r2, r2, r3
 8008418:	69bb      	ldr	r3, [r7, #24]
 800841a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800841c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008422:	69b8      	ldr	r0, [r7, #24]
 8008424:	f000 f908 	bl	8008638 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008428:	4b1d      	ldr	r3, [pc, #116]	; (80084a0 <pvPortMalloc+0x188>)
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	1ad3      	subs	r3, r2, r3
 8008432:	4a1b      	ldr	r2, [pc, #108]	; (80084a0 <pvPortMalloc+0x188>)
 8008434:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008436:	4b1a      	ldr	r3, [pc, #104]	; (80084a0 <pvPortMalloc+0x188>)
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	4b1b      	ldr	r3, [pc, #108]	; (80084a8 <pvPortMalloc+0x190>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	429a      	cmp	r2, r3
 8008440:	d203      	bcs.n	800844a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008442:	4b17      	ldr	r3, [pc, #92]	; (80084a0 <pvPortMalloc+0x188>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a18      	ldr	r2, [pc, #96]	; (80084a8 <pvPortMalloc+0x190>)
 8008448:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800844a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844c:	685a      	ldr	r2, [r3, #4]
 800844e:	4b13      	ldr	r3, [pc, #76]	; (800849c <pvPortMalloc+0x184>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	431a      	orrs	r2, r3
 8008454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008456:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845a:	2200      	movs	r2, #0
 800845c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800845e:	4b13      	ldr	r3, [pc, #76]	; (80084ac <pvPortMalloc+0x194>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	3301      	adds	r3, #1
 8008464:	4a11      	ldr	r2, [pc, #68]	; (80084ac <pvPortMalloc+0x194>)
 8008466:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008468:	f7fe faf6 	bl	8006a58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800846c:	69fb      	ldr	r3, [r7, #28]
 800846e:	f003 0307 	and.w	r3, r3, #7
 8008472:	2b00      	cmp	r3, #0
 8008474:	d00a      	beq.n	800848c <pvPortMalloc+0x174>
	__asm volatile
 8008476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847a:	f383 8811 	msr	BASEPRI, r3
 800847e:	f3bf 8f6f 	isb	sy
 8008482:	f3bf 8f4f 	dsb	sy
 8008486:	60fb      	str	r3, [r7, #12]
}
 8008488:	bf00      	nop
 800848a:	e7fe      	b.n	800848a <pvPortMalloc+0x172>
	return pvReturn;
 800848c:	69fb      	ldr	r3, [r7, #28]
}
 800848e:	4618      	mov	r0, r3
 8008490:	3728      	adds	r7, #40	; 0x28
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	200046e4 	.word	0x200046e4
 800849c:	200046f8 	.word	0x200046f8
 80084a0:	200046e8 	.word	0x200046e8
 80084a4:	200046dc 	.word	0x200046dc
 80084a8:	200046ec 	.word	0x200046ec
 80084ac:	200046f0 	.word	0x200046f0

080084b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b086      	sub	sp, #24
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d04d      	beq.n	800855e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80084c2:	2308      	movs	r3, #8
 80084c4:	425b      	negs	r3, r3
 80084c6:	697a      	ldr	r2, [r7, #20]
 80084c8:	4413      	add	r3, r2
 80084ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	685a      	ldr	r2, [r3, #4]
 80084d4:	4b24      	ldr	r3, [pc, #144]	; (8008568 <vPortFree+0xb8>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4013      	ands	r3, r2
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d10a      	bne.n	80084f4 <vPortFree+0x44>
	__asm volatile
 80084de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e2:	f383 8811 	msr	BASEPRI, r3
 80084e6:	f3bf 8f6f 	isb	sy
 80084ea:	f3bf 8f4f 	dsb	sy
 80084ee:	60fb      	str	r3, [r7, #12]
}
 80084f0:	bf00      	nop
 80084f2:	e7fe      	b.n	80084f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d00a      	beq.n	8008512 <vPortFree+0x62>
	__asm volatile
 80084fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008500:	f383 8811 	msr	BASEPRI, r3
 8008504:	f3bf 8f6f 	isb	sy
 8008508:	f3bf 8f4f 	dsb	sy
 800850c:	60bb      	str	r3, [r7, #8]
}
 800850e:	bf00      	nop
 8008510:	e7fe      	b.n	8008510 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	685a      	ldr	r2, [r3, #4]
 8008516:	4b14      	ldr	r3, [pc, #80]	; (8008568 <vPortFree+0xb8>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4013      	ands	r3, r2
 800851c:	2b00      	cmp	r3, #0
 800851e:	d01e      	beq.n	800855e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d11a      	bne.n	800855e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	685a      	ldr	r2, [r3, #4]
 800852c:	4b0e      	ldr	r3, [pc, #56]	; (8008568 <vPortFree+0xb8>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	43db      	mvns	r3, r3
 8008532:	401a      	ands	r2, r3
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008538:	f7fe fa80 	bl	8006a3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	685a      	ldr	r2, [r3, #4]
 8008540:	4b0a      	ldr	r3, [pc, #40]	; (800856c <vPortFree+0xbc>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4413      	add	r3, r2
 8008546:	4a09      	ldr	r2, [pc, #36]	; (800856c <vPortFree+0xbc>)
 8008548:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800854a:	6938      	ldr	r0, [r7, #16]
 800854c:	f000 f874 	bl	8008638 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008550:	4b07      	ldr	r3, [pc, #28]	; (8008570 <vPortFree+0xc0>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	3301      	adds	r3, #1
 8008556:	4a06      	ldr	r2, [pc, #24]	; (8008570 <vPortFree+0xc0>)
 8008558:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800855a:	f7fe fa7d 	bl	8006a58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800855e:	bf00      	nop
 8008560:	3718      	adds	r7, #24
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	200046f8 	.word	0x200046f8
 800856c:	200046e8 	.word	0x200046e8
 8008570:	200046f4 	.word	0x200046f4

08008574 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008574:	b480      	push	{r7}
 8008576:	b085      	sub	sp, #20
 8008578:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800857a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800857e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008580:	4b27      	ldr	r3, [pc, #156]	; (8008620 <prvHeapInit+0xac>)
 8008582:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f003 0307 	and.w	r3, r3, #7
 800858a:	2b00      	cmp	r3, #0
 800858c:	d00c      	beq.n	80085a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	3307      	adds	r3, #7
 8008592:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f023 0307 	bic.w	r3, r3, #7
 800859a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800859c:	68ba      	ldr	r2, [r7, #8]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	1ad3      	subs	r3, r2, r3
 80085a2:	4a1f      	ldr	r2, [pc, #124]	; (8008620 <prvHeapInit+0xac>)
 80085a4:	4413      	add	r3, r2
 80085a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80085ac:	4a1d      	ldr	r2, [pc, #116]	; (8008624 <prvHeapInit+0xb0>)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80085b2:	4b1c      	ldr	r3, [pc, #112]	; (8008624 <prvHeapInit+0xb0>)
 80085b4:	2200      	movs	r2, #0
 80085b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	68ba      	ldr	r2, [r7, #8]
 80085bc:	4413      	add	r3, r2
 80085be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80085c0:	2208      	movs	r2, #8
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	1a9b      	subs	r3, r3, r2
 80085c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f023 0307 	bic.w	r3, r3, #7
 80085ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	4a15      	ldr	r2, [pc, #84]	; (8008628 <prvHeapInit+0xb4>)
 80085d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80085d6:	4b14      	ldr	r3, [pc, #80]	; (8008628 <prvHeapInit+0xb4>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	2200      	movs	r2, #0
 80085dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80085de:	4b12      	ldr	r3, [pc, #72]	; (8008628 <prvHeapInit+0xb4>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2200      	movs	r2, #0
 80085e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	68fa      	ldr	r2, [r7, #12]
 80085ee:	1ad2      	subs	r2, r2, r3
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80085f4:	4b0c      	ldr	r3, [pc, #48]	; (8008628 <prvHeapInit+0xb4>)
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	4a0a      	ldr	r2, [pc, #40]	; (800862c <prvHeapInit+0xb8>)
 8008602:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	4a09      	ldr	r2, [pc, #36]	; (8008630 <prvHeapInit+0xbc>)
 800860a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800860c:	4b09      	ldr	r3, [pc, #36]	; (8008634 <prvHeapInit+0xc0>)
 800860e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008612:	601a      	str	r2, [r3, #0]
}
 8008614:	bf00      	nop
 8008616:	3714      	adds	r7, #20
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr
 8008620:	20000adc 	.word	0x20000adc
 8008624:	200046dc 	.word	0x200046dc
 8008628:	200046e4 	.word	0x200046e4
 800862c:	200046ec 	.word	0x200046ec
 8008630:	200046e8 	.word	0x200046e8
 8008634:	200046f8 	.word	0x200046f8

08008638 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008638:	b480      	push	{r7}
 800863a:	b085      	sub	sp, #20
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008640:	4b28      	ldr	r3, [pc, #160]	; (80086e4 <prvInsertBlockIntoFreeList+0xac>)
 8008642:	60fb      	str	r3, [r7, #12]
 8008644:	e002      	b.n	800864c <prvInsertBlockIntoFreeList+0x14>
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	60fb      	str	r3, [r7, #12]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	687a      	ldr	r2, [r7, #4]
 8008652:	429a      	cmp	r2, r3
 8008654:	d8f7      	bhi.n	8008646 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	68ba      	ldr	r2, [r7, #8]
 8008660:	4413      	add	r3, r2
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	429a      	cmp	r2, r3
 8008666:	d108      	bne.n	800867a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	685a      	ldr	r2, [r3, #4]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	441a      	add	r2, r3
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	68ba      	ldr	r2, [r7, #8]
 8008684:	441a      	add	r2, r3
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	429a      	cmp	r2, r3
 800868c:	d118      	bne.n	80086c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	4b15      	ldr	r3, [pc, #84]	; (80086e8 <prvInsertBlockIntoFreeList+0xb0>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	429a      	cmp	r2, r3
 8008698:	d00d      	beq.n	80086b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	685a      	ldr	r2, [r3, #4]
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	441a      	add	r2, r3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	601a      	str	r2, [r3, #0]
 80086b4:	e008      	b.n	80086c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80086b6:	4b0c      	ldr	r3, [pc, #48]	; (80086e8 <prvInsertBlockIntoFreeList+0xb0>)
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	601a      	str	r2, [r3, #0]
 80086be:	e003      	b.n	80086c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d002      	beq.n	80086d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086d6:	bf00      	nop
 80086d8:	3714      	adds	r7, #20
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr
 80086e2:	bf00      	nop
 80086e4:	200046dc 	.word	0x200046dc
 80086e8:	200046e4 	.word	0x200046e4

080086ec <__errno>:
 80086ec:	4b01      	ldr	r3, [pc, #4]	; (80086f4 <__errno+0x8>)
 80086ee:	6818      	ldr	r0, [r3, #0]
 80086f0:	4770      	bx	lr
 80086f2:	bf00      	nop
 80086f4:	20000010 	.word	0x20000010

080086f8 <__libc_init_array>:
 80086f8:	b570      	push	{r4, r5, r6, lr}
 80086fa:	4d0d      	ldr	r5, [pc, #52]	; (8008730 <__libc_init_array+0x38>)
 80086fc:	4c0d      	ldr	r4, [pc, #52]	; (8008734 <__libc_init_array+0x3c>)
 80086fe:	1b64      	subs	r4, r4, r5
 8008700:	10a4      	asrs	r4, r4, #2
 8008702:	2600      	movs	r6, #0
 8008704:	42a6      	cmp	r6, r4
 8008706:	d109      	bne.n	800871c <__libc_init_array+0x24>
 8008708:	4d0b      	ldr	r5, [pc, #44]	; (8008738 <__libc_init_array+0x40>)
 800870a:	4c0c      	ldr	r4, [pc, #48]	; (800873c <__libc_init_array+0x44>)
 800870c:	f000 fc8e 	bl	800902c <_init>
 8008710:	1b64      	subs	r4, r4, r5
 8008712:	10a4      	asrs	r4, r4, #2
 8008714:	2600      	movs	r6, #0
 8008716:	42a6      	cmp	r6, r4
 8008718:	d105      	bne.n	8008726 <__libc_init_array+0x2e>
 800871a:	bd70      	pop	{r4, r5, r6, pc}
 800871c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008720:	4798      	blx	r3
 8008722:	3601      	adds	r6, #1
 8008724:	e7ee      	b.n	8008704 <__libc_init_array+0xc>
 8008726:	f855 3b04 	ldr.w	r3, [r5], #4
 800872a:	4798      	blx	r3
 800872c:	3601      	adds	r6, #1
 800872e:	e7f2      	b.n	8008716 <__libc_init_array+0x1e>
 8008730:	080092ac 	.word	0x080092ac
 8008734:	080092ac 	.word	0x080092ac
 8008738:	080092ac 	.word	0x080092ac
 800873c:	080092b0 	.word	0x080092b0

08008740 <memcpy>:
 8008740:	440a      	add	r2, r1
 8008742:	4291      	cmp	r1, r2
 8008744:	f100 33ff 	add.w	r3, r0, #4294967295
 8008748:	d100      	bne.n	800874c <memcpy+0xc>
 800874a:	4770      	bx	lr
 800874c:	b510      	push	{r4, lr}
 800874e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008752:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008756:	4291      	cmp	r1, r2
 8008758:	d1f9      	bne.n	800874e <memcpy+0xe>
 800875a:	bd10      	pop	{r4, pc}

0800875c <memset>:
 800875c:	4402      	add	r2, r0
 800875e:	4603      	mov	r3, r0
 8008760:	4293      	cmp	r3, r2
 8008762:	d100      	bne.n	8008766 <memset+0xa>
 8008764:	4770      	bx	lr
 8008766:	f803 1b01 	strb.w	r1, [r3], #1
 800876a:	e7f9      	b.n	8008760 <memset+0x4>

0800876c <siprintf>:
 800876c:	b40e      	push	{r1, r2, r3}
 800876e:	b500      	push	{lr}
 8008770:	b09c      	sub	sp, #112	; 0x70
 8008772:	ab1d      	add	r3, sp, #116	; 0x74
 8008774:	9002      	str	r0, [sp, #8]
 8008776:	9006      	str	r0, [sp, #24]
 8008778:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800877c:	4809      	ldr	r0, [pc, #36]	; (80087a4 <siprintf+0x38>)
 800877e:	9107      	str	r1, [sp, #28]
 8008780:	9104      	str	r1, [sp, #16]
 8008782:	4909      	ldr	r1, [pc, #36]	; (80087a8 <siprintf+0x3c>)
 8008784:	f853 2b04 	ldr.w	r2, [r3], #4
 8008788:	9105      	str	r1, [sp, #20]
 800878a:	6800      	ldr	r0, [r0, #0]
 800878c:	9301      	str	r3, [sp, #4]
 800878e:	a902      	add	r1, sp, #8
 8008790:	f000 f868 	bl	8008864 <_svfiprintf_r>
 8008794:	9b02      	ldr	r3, [sp, #8]
 8008796:	2200      	movs	r2, #0
 8008798:	701a      	strb	r2, [r3, #0]
 800879a:	b01c      	add	sp, #112	; 0x70
 800879c:	f85d eb04 	ldr.w	lr, [sp], #4
 80087a0:	b003      	add	sp, #12
 80087a2:	4770      	bx	lr
 80087a4:	20000010 	.word	0x20000010
 80087a8:	ffff0208 	.word	0xffff0208

080087ac <__ssputs_r>:
 80087ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087b0:	688e      	ldr	r6, [r1, #8]
 80087b2:	429e      	cmp	r6, r3
 80087b4:	4682      	mov	sl, r0
 80087b6:	460c      	mov	r4, r1
 80087b8:	4690      	mov	r8, r2
 80087ba:	461f      	mov	r7, r3
 80087bc:	d838      	bhi.n	8008830 <__ssputs_r+0x84>
 80087be:	898a      	ldrh	r2, [r1, #12]
 80087c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80087c4:	d032      	beq.n	800882c <__ssputs_r+0x80>
 80087c6:	6825      	ldr	r5, [r4, #0]
 80087c8:	6909      	ldr	r1, [r1, #16]
 80087ca:	eba5 0901 	sub.w	r9, r5, r1
 80087ce:	6965      	ldr	r5, [r4, #20]
 80087d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80087d8:	3301      	adds	r3, #1
 80087da:	444b      	add	r3, r9
 80087dc:	106d      	asrs	r5, r5, #1
 80087de:	429d      	cmp	r5, r3
 80087e0:	bf38      	it	cc
 80087e2:	461d      	movcc	r5, r3
 80087e4:	0553      	lsls	r3, r2, #21
 80087e6:	d531      	bpl.n	800884c <__ssputs_r+0xa0>
 80087e8:	4629      	mov	r1, r5
 80087ea:	f000 fb55 	bl	8008e98 <_malloc_r>
 80087ee:	4606      	mov	r6, r0
 80087f0:	b950      	cbnz	r0, 8008808 <__ssputs_r+0x5c>
 80087f2:	230c      	movs	r3, #12
 80087f4:	f8ca 3000 	str.w	r3, [sl]
 80087f8:	89a3      	ldrh	r3, [r4, #12]
 80087fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087fe:	81a3      	strh	r3, [r4, #12]
 8008800:	f04f 30ff 	mov.w	r0, #4294967295
 8008804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008808:	6921      	ldr	r1, [r4, #16]
 800880a:	464a      	mov	r2, r9
 800880c:	f7ff ff98 	bl	8008740 <memcpy>
 8008810:	89a3      	ldrh	r3, [r4, #12]
 8008812:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800881a:	81a3      	strh	r3, [r4, #12]
 800881c:	6126      	str	r6, [r4, #16]
 800881e:	6165      	str	r5, [r4, #20]
 8008820:	444e      	add	r6, r9
 8008822:	eba5 0509 	sub.w	r5, r5, r9
 8008826:	6026      	str	r6, [r4, #0]
 8008828:	60a5      	str	r5, [r4, #8]
 800882a:	463e      	mov	r6, r7
 800882c:	42be      	cmp	r6, r7
 800882e:	d900      	bls.n	8008832 <__ssputs_r+0x86>
 8008830:	463e      	mov	r6, r7
 8008832:	6820      	ldr	r0, [r4, #0]
 8008834:	4632      	mov	r2, r6
 8008836:	4641      	mov	r1, r8
 8008838:	f000 faa8 	bl	8008d8c <memmove>
 800883c:	68a3      	ldr	r3, [r4, #8]
 800883e:	1b9b      	subs	r3, r3, r6
 8008840:	60a3      	str	r3, [r4, #8]
 8008842:	6823      	ldr	r3, [r4, #0]
 8008844:	4433      	add	r3, r6
 8008846:	6023      	str	r3, [r4, #0]
 8008848:	2000      	movs	r0, #0
 800884a:	e7db      	b.n	8008804 <__ssputs_r+0x58>
 800884c:	462a      	mov	r2, r5
 800884e:	f000 fb97 	bl	8008f80 <_realloc_r>
 8008852:	4606      	mov	r6, r0
 8008854:	2800      	cmp	r0, #0
 8008856:	d1e1      	bne.n	800881c <__ssputs_r+0x70>
 8008858:	6921      	ldr	r1, [r4, #16]
 800885a:	4650      	mov	r0, sl
 800885c:	f000 fab0 	bl	8008dc0 <_free_r>
 8008860:	e7c7      	b.n	80087f2 <__ssputs_r+0x46>
	...

08008864 <_svfiprintf_r>:
 8008864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008868:	4698      	mov	r8, r3
 800886a:	898b      	ldrh	r3, [r1, #12]
 800886c:	061b      	lsls	r3, r3, #24
 800886e:	b09d      	sub	sp, #116	; 0x74
 8008870:	4607      	mov	r7, r0
 8008872:	460d      	mov	r5, r1
 8008874:	4614      	mov	r4, r2
 8008876:	d50e      	bpl.n	8008896 <_svfiprintf_r+0x32>
 8008878:	690b      	ldr	r3, [r1, #16]
 800887a:	b963      	cbnz	r3, 8008896 <_svfiprintf_r+0x32>
 800887c:	2140      	movs	r1, #64	; 0x40
 800887e:	f000 fb0b 	bl	8008e98 <_malloc_r>
 8008882:	6028      	str	r0, [r5, #0]
 8008884:	6128      	str	r0, [r5, #16]
 8008886:	b920      	cbnz	r0, 8008892 <_svfiprintf_r+0x2e>
 8008888:	230c      	movs	r3, #12
 800888a:	603b      	str	r3, [r7, #0]
 800888c:	f04f 30ff 	mov.w	r0, #4294967295
 8008890:	e0d1      	b.n	8008a36 <_svfiprintf_r+0x1d2>
 8008892:	2340      	movs	r3, #64	; 0x40
 8008894:	616b      	str	r3, [r5, #20]
 8008896:	2300      	movs	r3, #0
 8008898:	9309      	str	r3, [sp, #36]	; 0x24
 800889a:	2320      	movs	r3, #32
 800889c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80088a4:	2330      	movs	r3, #48	; 0x30
 80088a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008a50 <_svfiprintf_r+0x1ec>
 80088aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088ae:	f04f 0901 	mov.w	r9, #1
 80088b2:	4623      	mov	r3, r4
 80088b4:	469a      	mov	sl, r3
 80088b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088ba:	b10a      	cbz	r2, 80088c0 <_svfiprintf_r+0x5c>
 80088bc:	2a25      	cmp	r2, #37	; 0x25
 80088be:	d1f9      	bne.n	80088b4 <_svfiprintf_r+0x50>
 80088c0:	ebba 0b04 	subs.w	fp, sl, r4
 80088c4:	d00b      	beq.n	80088de <_svfiprintf_r+0x7a>
 80088c6:	465b      	mov	r3, fp
 80088c8:	4622      	mov	r2, r4
 80088ca:	4629      	mov	r1, r5
 80088cc:	4638      	mov	r0, r7
 80088ce:	f7ff ff6d 	bl	80087ac <__ssputs_r>
 80088d2:	3001      	adds	r0, #1
 80088d4:	f000 80aa 	beq.w	8008a2c <_svfiprintf_r+0x1c8>
 80088d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088da:	445a      	add	r2, fp
 80088dc:	9209      	str	r2, [sp, #36]	; 0x24
 80088de:	f89a 3000 	ldrb.w	r3, [sl]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	f000 80a2 	beq.w	8008a2c <_svfiprintf_r+0x1c8>
 80088e8:	2300      	movs	r3, #0
 80088ea:	f04f 32ff 	mov.w	r2, #4294967295
 80088ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088f2:	f10a 0a01 	add.w	sl, sl, #1
 80088f6:	9304      	str	r3, [sp, #16]
 80088f8:	9307      	str	r3, [sp, #28]
 80088fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088fe:	931a      	str	r3, [sp, #104]	; 0x68
 8008900:	4654      	mov	r4, sl
 8008902:	2205      	movs	r2, #5
 8008904:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008908:	4851      	ldr	r0, [pc, #324]	; (8008a50 <_svfiprintf_r+0x1ec>)
 800890a:	f7f7 fc61 	bl	80001d0 <memchr>
 800890e:	9a04      	ldr	r2, [sp, #16]
 8008910:	b9d8      	cbnz	r0, 800894a <_svfiprintf_r+0xe6>
 8008912:	06d0      	lsls	r0, r2, #27
 8008914:	bf44      	itt	mi
 8008916:	2320      	movmi	r3, #32
 8008918:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800891c:	0711      	lsls	r1, r2, #28
 800891e:	bf44      	itt	mi
 8008920:	232b      	movmi	r3, #43	; 0x2b
 8008922:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008926:	f89a 3000 	ldrb.w	r3, [sl]
 800892a:	2b2a      	cmp	r3, #42	; 0x2a
 800892c:	d015      	beq.n	800895a <_svfiprintf_r+0xf6>
 800892e:	9a07      	ldr	r2, [sp, #28]
 8008930:	4654      	mov	r4, sl
 8008932:	2000      	movs	r0, #0
 8008934:	f04f 0c0a 	mov.w	ip, #10
 8008938:	4621      	mov	r1, r4
 800893a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800893e:	3b30      	subs	r3, #48	; 0x30
 8008940:	2b09      	cmp	r3, #9
 8008942:	d94e      	bls.n	80089e2 <_svfiprintf_r+0x17e>
 8008944:	b1b0      	cbz	r0, 8008974 <_svfiprintf_r+0x110>
 8008946:	9207      	str	r2, [sp, #28]
 8008948:	e014      	b.n	8008974 <_svfiprintf_r+0x110>
 800894a:	eba0 0308 	sub.w	r3, r0, r8
 800894e:	fa09 f303 	lsl.w	r3, r9, r3
 8008952:	4313      	orrs	r3, r2
 8008954:	9304      	str	r3, [sp, #16]
 8008956:	46a2      	mov	sl, r4
 8008958:	e7d2      	b.n	8008900 <_svfiprintf_r+0x9c>
 800895a:	9b03      	ldr	r3, [sp, #12]
 800895c:	1d19      	adds	r1, r3, #4
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	9103      	str	r1, [sp, #12]
 8008962:	2b00      	cmp	r3, #0
 8008964:	bfbb      	ittet	lt
 8008966:	425b      	neglt	r3, r3
 8008968:	f042 0202 	orrlt.w	r2, r2, #2
 800896c:	9307      	strge	r3, [sp, #28]
 800896e:	9307      	strlt	r3, [sp, #28]
 8008970:	bfb8      	it	lt
 8008972:	9204      	strlt	r2, [sp, #16]
 8008974:	7823      	ldrb	r3, [r4, #0]
 8008976:	2b2e      	cmp	r3, #46	; 0x2e
 8008978:	d10c      	bne.n	8008994 <_svfiprintf_r+0x130>
 800897a:	7863      	ldrb	r3, [r4, #1]
 800897c:	2b2a      	cmp	r3, #42	; 0x2a
 800897e:	d135      	bne.n	80089ec <_svfiprintf_r+0x188>
 8008980:	9b03      	ldr	r3, [sp, #12]
 8008982:	1d1a      	adds	r2, r3, #4
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	9203      	str	r2, [sp, #12]
 8008988:	2b00      	cmp	r3, #0
 800898a:	bfb8      	it	lt
 800898c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008990:	3402      	adds	r4, #2
 8008992:	9305      	str	r3, [sp, #20]
 8008994:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008a60 <_svfiprintf_r+0x1fc>
 8008998:	7821      	ldrb	r1, [r4, #0]
 800899a:	2203      	movs	r2, #3
 800899c:	4650      	mov	r0, sl
 800899e:	f7f7 fc17 	bl	80001d0 <memchr>
 80089a2:	b140      	cbz	r0, 80089b6 <_svfiprintf_r+0x152>
 80089a4:	2340      	movs	r3, #64	; 0x40
 80089a6:	eba0 000a 	sub.w	r0, r0, sl
 80089aa:	fa03 f000 	lsl.w	r0, r3, r0
 80089ae:	9b04      	ldr	r3, [sp, #16]
 80089b0:	4303      	orrs	r3, r0
 80089b2:	3401      	adds	r4, #1
 80089b4:	9304      	str	r3, [sp, #16]
 80089b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089ba:	4826      	ldr	r0, [pc, #152]	; (8008a54 <_svfiprintf_r+0x1f0>)
 80089bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089c0:	2206      	movs	r2, #6
 80089c2:	f7f7 fc05 	bl	80001d0 <memchr>
 80089c6:	2800      	cmp	r0, #0
 80089c8:	d038      	beq.n	8008a3c <_svfiprintf_r+0x1d8>
 80089ca:	4b23      	ldr	r3, [pc, #140]	; (8008a58 <_svfiprintf_r+0x1f4>)
 80089cc:	bb1b      	cbnz	r3, 8008a16 <_svfiprintf_r+0x1b2>
 80089ce:	9b03      	ldr	r3, [sp, #12]
 80089d0:	3307      	adds	r3, #7
 80089d2:	f023 0307 	bic.w	r3, r3, #7
 80089d6:	3308      	adds	r3, #8
 80089d8:	9303      	str	r3, [sp, #12]
 80089da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089dc:	4433      	add	r3, r6
 80089de:	9309      	str	r3, [sp, #36]	; 0x24
 80089e0:	e767      	b.n	80088b2 <_svfiprintf_r+0x4e>
 80089e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80089e6:	460c      	mov	r4, r1
 80089e8:	2001      	movs	r0, #1
 80089ea:	e7a5      	b.n	8008938 <_svfiprintf_r+0xd4>
 80089ec:	2300      	movs	r3, #0
 80089ee:	3401      	adds	r4, #1
 80089f0:	9305      	str	r3, [sp, #20]
 80089f2:	4619      	mov	r1, r3
 80089f4:	f04f 0c0a 	mov.w	ip, #10
 80089f8:	4620      	mov	r0, r4
 80089fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089fe:	3a30      	subs	r2, #48	; 0x30
 8008a00:	2a09      	cmp	r2, #9
 8008a02:	d903      	bls.n	8008a0c <_svfiprintf_r+0x1a8>
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d0c5      	beq.n	8008994 <_svfiprintf_r+0x130>
 8008a08:	9105      	str	r1, [sp, #20]
 8008a0a:	e7c3      	b.n	8008994 <_svfiprintf_r+0x130>
 8008a0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a10:	4604      	mov	r4, r0
 8008a12:	2301      	movs	r3, #1
 8008a14:	e7f0      	b.n	80089f8 <_svfiprintf_r+0x194>
 8008a16:	ab03      	add	r3, sp, #12
 8008a18:	9300      	str	r3, [sp, #0]
 8008a1a:	462a      	mov	r2, r5
 8008a1c:	4b0f      	ldr	r3, [pc, #60]	; (8008a5c <_svfiprintf_r+0x1f8>)
 8008a1e:	a904      	add	r1, sp, #16
 8008a20:	4638      	mov	r0, r7
 8008a22:	f3af 8000 	nop.w
 8008a26:	1c42      	adds	r2, r0, #1
 8008a28:	4606      	mov	r6, r0
 8008a2a:	d1d6      	bne.n	80089da <_svfiprintf_r+0x176>
 8008a2c:	89ab      	ldrh	r3, [r5, #12]
 8008a2e:	065b      	lsls	r3, r3, #25
 8008a30:	f53f af2c 	bmi.w	800888c <_svfiprintf_r+0x28>
 8008a34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a36:	b01d      	add	sp, #116	; 0x74
 8008a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a3c:	ab03      	add	r3, sp, #12
 8008a3e:	9300      	str	r3, [sp, #0]
 8008a40:	462a      	mov	r2, r5
 8008a42:	4b06      	ldr	r3, [pc, #24]	; (8008a5c <_svfiprintf_r+0x1f8>)
 8008a44:	a904      	add	r1, sp, #16
 8008a46:	4638      	mov	r0, r7
 8008a48:	f000 f87a 	bl	8008b40 <_printf_i>
 8008a4c:	e7eb      	b.n	8008a26 <_svfiprintf_r+0x1c2>
 8008a4e:	bf00      	nop
 8008a50:	08009270 	.word	0x08009270
 8008a54:	0800927a 	.word	0x0800927a
 8008a58:	00000000 	.word	0x00000000
 8008a5c:	080087ad 	.word	0x080087ad
 8008a60:	08009276 	.word	0x08009276

08008a64 <_printf_common>:
 8008a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a68:	4616      	mov	r6, r2
 8008a6a:	4699      	mov	r9, r3
 8008a6c:	688a      	ldr	r2, [r1, #8]
 8008a6e:	690b      	ldr	r3, [r1, #16]
 8008a70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a74:	4293      	cmp	r3, r2
 8008a76:	bfb8      	it	lt
 8008a78:	4613      	movlt	r3, r2
 8008a7a:	6033      	str	r3, [r6, #0]
 8008a7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a80:	4607      	mov	r7, r0
 8008a82:	460c      	mov	r4, r1
 8008a84:	b10a      	cbz	r2, 8008a8a <_printf_common+0x26>
 8008a86:	3301      	adds	r3, #1
 8008a88:	6033      	str	r3, [r6, #0]
 8008a8a:	6823      	ldr	r3, [r4, #0]
 8008a8c:	0699      	lsls	r1, r3, #26
 8008a8e:	bf42      	ittt	mi
 8008a90:	6833      	ldrmi	r3, [r6, #0]
 8008a92:	3302      	addmi	r3, #2
 8008a94:	6033      	strmi	r3, [r6, #0]
 8008a96:	6825      	ldr	r5, [r4, #0]
 8008a98:	f015 0506 	ands.w	r5, r5, #6
 8008a9c:	d106      	bne.n	8008aac <_printf_common+0x48>
 8008a9e:	f104 0a19 	add.w	sl, r4, #25
 8008aa2:	68e3      	ldr	r3, [r4, #12]
 8008aa4:	6832      	ldr	r2, [r6, #0]
 8008aa6:	1a9b      	subs	r3, r3, r2
 8008aa8:	42ab      	cmp	r3, r5
 8008aaa:	dc26      	bgt.n	8008afa <_printf_common+0x96>
 8008aac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ab0:	1e13      	subs	r3, r2, #0
 8008ab2:	6822      	ldr	r2, [r4, #0]
 8008ab4:	bf18      	it	ne
 8008ab6:	2301      	movne	r3, #1
 8008ab8:	0692      	lsls	r2, r2, #26
 8008aba:	d42b      	bmi.n	8008b14 <_printf_common+0xb0>
 8008abc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ac0:	4649      	mov	r1, r9
 8008ac2:	4638      	mov	r0, r7
 8008ac4:	47c0      	blx	r8
 8008ac6:	3001      	adds	r0, #1
 8008ac8:	d01e      	beq.n	8008b08 <_printf_common+0xa4>
 8008aca:	6823      	ldr	r3, [r4, #0]
 8008acc:	68e5      	ldr	r5, [r4, #12]
 8008ace:	6832      	ldr	r2, [r6, #0]
 8008ad0:	f003 0306 	and.w	r3, r3, #6
 8008ad4:	2b04      	cmp	r3, #4
 8008ad6:	bf08      	it	eq
 8008ad8:	1aad      	subeq	r5, r5, r2
 8008ada:	68a3      	ldr	r3, [r4, #8]
 8008adc:	6922      	ldr	r2, [r4, #16]
 8008ade:	bf0c      	ite	eq
 8008ae0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ae4:	2500      	movne	r5, #0
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	bfc4      	itt	gt
 8008aea:	1a9b      	subgt	r3, r3, r2
 8008aec:	18ed      	addgt	r5, r5, r3
 8008aee:	2600      	movs	r6, #0
 8008af0:	341a      	adds	r4, #26
 8008af2:	42b5      	cmp	r5, r6
 8008af4:	d11a      	bne.n	8008b2c <_printf_common+0xc8>
 8008af6:	2000      	movs	r0, #0
 8008af8:	e008      	b.n	8008b0c <_printf_common+0xa8>
 8008afa:	2301      	movs	r3, #1
 8008afc:	4652      	mov	r2, sl
 8008afe:	4649      	mov	r1, r9
 8008b00:	4638      	mov	r0, r7
 8008b02:	47c0      	blx	r8
 8008b04:	3001      	adds	r0, #1
 8008b06:	d103      	bne.n	8008b10 <_printf_common+0xac>
 8008b08:	f04f 30ff 	mov.w	r0, #4294967295
 8008b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b10:	3501      	adds	r5, #1
 8008b12:	e7c6      	b.n	8008aa2 <_printf_common+0x3e>
 8008b14:	18e1      	adds	r1, r4, r3
 8008b16:	1c5a      	adds	r2, r3, #1
 8008b18:	2030      	movs	r0, #48	; 0x30
 8008b1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b1e:	4422      	add	r2, r4
 8008b20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b28:	3302      	adds	r3, #2
 8008b2a:	e7c7      	b.n	8008abc <_printf_common+0x58>
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	4622      	mov	r2, r4
 8008b30:	4649      	mov	r1, r9
 8008b32:	4638      	mov	r0, r7
 8008b34:	47c0      	blx	r8
 8008b36:	3001      	adds	r0, #1
 8008b38:	d0e6      	beq.n	8008b08 <_printf_common+0xa4>
 8008b3a:	3601      	adds	r6, #1
 8008b3c:	e7d9      	b.n	8008af2 <_printf_common+0x8e>
	...

08008b40 <_printf_i>:
 8008b40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b44:	7e0f      	ldrb	r7, [r1, #24]
 8008b46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b48:	2f78      	cmp	r7, #120	; 0x78
 8008b4a:	4691      	mov	r9, r2
 8008b4c:	4680      	mov	r8, r0
 8008b4e:	460c      	mov	r4, r1
 8008b50:	469a      	mov	sl, r3
 8008b52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b56:	d807      	bhi.n	8008b68 <_printf_i+0x28>
 8008b58:	2f62      	cmp	r7, #98	; 0x62
 8008b5a:	d80a      	bhi.n	8008b72 <_printf_i+0x32>
 8008b5c:	2f00      	cmp	r7, #0
 8008b5e:	f000 80d8 	beq.w	8008d12 <_printf_i+0x1d2>
 8008b62:	2f58      	cmp	r7, #88	; 0x58
 8008b64:	f000 80a3 	beq.w	8008cae <_printf_i+0x16e>
 8008b68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b70:	e03a      	b.n	8008be8 <_printf_i+0xa8>
 8008b72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b76:	2b15      	cmp	r3, #21
 8008b78:	d8f6      	bhi.n	8008b68 <_printf_i+0x28>
 8008b7a:	a101      	add	r1, pc, #4	; (adr r1, 8008b80 <_printf_i+0x40>)
 8008b7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b80:	08008bd9 	.word	0x08008bd9
 8008b84:	08008bed 	.word	0x08008bed
 8008b88:	08008b69 	.word	0x08008b69
 8008b8c:	08008b69 	.word	0x08008b69
 8008b90:	08008b69 	.word	0x08008b69
 8008b94:	08008b69 	.word	0x08008b69
 8008b98:	08008bed 	.word	0x08008bed
 8008b9c:	08008b69 	.word	0x08008b69
 8008ba0:	08008b69 	.word	0x08008b69
 8008ba4:	08008b69 	.word	0x08008b69
 8008ba8:	08008b69 	.word	0x08008b69
 8008bac:	08008cf9 	.word	0x08008cf9
 8008bb0:	08008c1d 	.word	0x08008c1d
 8008bb4:	08008cdb 	.word	0x08008cdb
 8008bb8:	08008b69 	.word	0x08008b69
 8008bbc:	08008b69 	.word	0x08008b69
 8008bc0:	08008d1b 	.word	0x08008d1b
 8008bc4:	08008b69 	.word	0x08008b69
 8008bc8:	08008c1d 	.word	0x08008c1d
 8008bcc:	08008b69 	.word	0x08008b69
 8008bd0:	08008b69 	.word	0x08008b69
 8008bd4:	08008ce3 	.word	0x08008ce3
 8008bd8:	682b      	ldr	r3, [r5, #0]
 8008bda:	1d1a      	adds	r2, r3, #4
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	602a      	str	r2, [r5, #0]
 8008be0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008be4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008be8:	2301      	movs	r3, #1
 8008bea:	e0a3      	b.n	8008d34 <_printf_i+0x1f4>
 8008bec:	6820      	ldr	r0, [r4, #0]
 8008bee:	6829      	ldr	r1, [r5, #0]
 8008bf0:	0606      	lsls	r6, r0, #24
 8008bf2:	f101 0304 	add.w	r3, r1, #4
 8008bf6:	d50a      	bpl.n	8008c0e <_printf_i+0xce>
 8008bf8:	680e      	ldr	r6, [r1, #0]
 8008bfa:	602b      	str	r3, [r5, #0]
 8008bfc:	2e00      	cmp	r6, #0
 8008bfe:	da03      	bge.n	8008c08 <_printf_i+0xc8>
 8008c00:	232d      	movs	r3, #45	; 0x2d
 8008c02:	4276      	negs	r6, r6
 8008c04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c08:	485e      	ldr	r0, [pc, #376]	; (8008d84 <_printf_i+0x244>)
 8008c0a:	230a      	movs	r3, #10
 8008c0c:	e019      	b.n	8008c42 <_printf_i+0x102>
 8008c0e:	680e      	ldr	r6, [r1, #0]
 8008c10:	602b      	str	r3, [r5, #0]
 8008c12:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c16:	bf18      	it	ne
 8008c18:	b236      	sxthne	r6, r6
 8008c1a:	e7ef      	b.n	8008bfc <_printf_i+0xbc>
 8008c1c:	682b      	ldr	r3, [r5, #0]
 8008c1e:	6820      	ldr	r0, [r4, #0]
 8008c20:	1d19      	adds	r1, r3, #4
 8008c22:	6029      	str	r1, [r5, #0]
 8008c24:	0601      	lsls	r1, r0, #24
 8008c26:	d501      	bpl.n	8008c2c <_printf_i+0xec>
 8008c28:	681e      	ldr	r6, [r3, #0]
 8008c2a:	e002      	b.n	8008c32 <_printf_i+0xf2>
 8008c2c:	0646      	lsls	r6, r0, #25
 8008c2e:	d5fb      	bpl.n	8008c28 <_printf_i+0xe8>
 8008c30:	881e      	ldrh	r6, [r3, #0]
 8008c32:	4854      	ldr	r0, [pc, #336]	; (8008d84 <_printf_i+0x244>)
 8008c34:	2f6f      	cmp	r7, #111	; 0x6f
 8008c36:	bf0c      	ite	eq
 8008c38:	2308      	moveq	r3, #8
 8008c3a:	230a      	movne	r3, #10
 8008c3c:	2100      	movs	r1, #0
 8008c3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c42:	6865      	ldr	r5, [r4, #4]
 8008c44:	60a5      	str	r5, [r4, #8]
 8008c46:	2d00      	cmp	r5, #0
 8008c48:	bfa2      	ittt	ge
 8008c4a:	6821      	ldrge	r1, [r4, #0]
 8008c4c:	f021 0104 	bicge.w	r1, r1, #4
 8008c50:	6021      	strge	r1, [r4, #0]
 8008c52:	b90e      	cbnz	r6, 8008c58 <_printf_i+0x118>
 8008c54:	2d00      	cmp	r5, #0
 8008c56:	d04d      	beq.n	8008cf4 <_printf_i+0x1b4>
 8008c58:	4615      	mov	r5, r2
 8008c5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008c5e:	fb03 6711 	mls	r7, r3, r1, r6
 8008c62:	5dc7      	ldrb	r7, [r0, r7]
 8008c64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008c68:	4637      	mov	r7, r6
 8008c6a:	42bb      	cmp	r3, r7
 8008c6c:	460e      	mov	r6, r1
 8008c6e:	d9f4      	bls.n	8008c5a <_printf_i+0x11a>
 8008c70:	2b08      	cmp	r3, #8
 8008c72:	d10b      	bne.n	8008c8c <_printf_i+0x14c>
 8008c74:	6823      	ldr	r3, [r4, #0]
 8008c76:	07de      	lsls	r6, r3, #31
 8008c78:	d508      	bpl.n	8008c8c <_printf_i+0x14c>
 8008c7a:	6923      	ldr	r3, [r4, #16]
 8008c7c:	6861      	ldr	r1, [r4, #4]
 8008c7e:	4299      	cmp	r1, r3
 8008c80:	bfde      	ittt	le
 8008c82:	2330      	movle	r3, #48	; 0x30
 8008c84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c8c:	1b52      	subs	r2, r2, r5
 8008c8e:	6122      	str	r2, [r4, #16]
 8008c90:	f8cd a000 	str.w	sl, [sp]
 8008c94:	464b      	mov	r3, r9
 8008c96:	aa03      	add	r2, sp, #12
 8008c98:	4621      	mov	r1, r4
 8008c9a:	4640      	mov	r0, r8
 8008c9c:	f7ff fee2 	bl	8008a64 <_printf_common>
 8008ca0:	3001      	adds	r0, #1
 8008ca2:	d14c      	bne.n	8008d3e <_printf_i+0x1fe>
 8008ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ca8:	b004      	add	sp, #16
 8008caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cae:	4835      	ldr	r0, [pc, #212]	; (8008d84 <_printf_i+0x244>)
 8008cb0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008cb4:	6829      	ldr	r1, [r5, #0]
 8008cb6:	6823      	ldr	r3, [r4, #0]
 8008cb8:	f851 6b04 	ldr.w	r6, [r1], #4
 8008cbc:	6029      	str	r1, [r5, #0]
 8008cbe:	061d      	lsls	r5, r3, #24
 8008cc0:	d514      	bpl.n	8008cec <_printf_i+0x1ac>
 8008cc2:	07df      	lsls	r7, r3, #31
 8008cc4:	bf44      	itt	mi
 8008cc6:	f043 0320 	orrmi.w	r3, r3, #32
 8008cca:	6023      	strmi	r3, [r4, #0]
 8008ccc:	b91e      	cbnz	r6, 8008cd6 <_printf_i+0x196>
 8008cce:	6823      	ldr	r3, [r4, #0]
 8008cd0:	f023 0320 	bic.w	r3, r3, #32
 8008cd4:	6023      	str	r3, [r4, #0]
 8008cd6:	2310      	movs	r3, #16
 8008cd8:	e7b0      	b.n	8008c3c <_printf_i+0xfc>
 8008cda:	6823      	ldr	r3, [r4, #0]
 8008cdc:	f043 0320 	orr.w	r3, r3, #32
 8008ce0:	6023      	str	r3, [r4, #0]
 8008ce2:	2378      	movs	r3, #120	; 0x78
 8008ce4:	4828      	ldr	r0, [pc, #160]	; (8008d88 <_printf_i+0x248>)
 8008ce6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008cea:	e7e3      	b.n	8008cb4 <_printf_i+0x174>
 8008cec:	0659      	lsls	r1, r3, #25
 8008cee:	bf48      	it	mi
 8008cf0:	b2b6      	uxthmi	r6, r6
 8008cf2:	e7e6      	b.n	8008cc2 <_printf_i+0x182>
 8008cf4:	4615      	mov	r5, r2
 8008cf6:	e7bb      	b.n	8008c70 <_printf_i+0x130>
 8008cf8:	682b      	ldr	r3, [r5, #0]
 8008cfa:	6826      	ldr	r6, [r4, #0]
 8008cfc:	6961      	ldr	r1, [r4, #20]
 8008cfe:	1d18      	adds	r0, r3, #4
 8008d00:	6028      	str	r0, [r5, #0]
 8008d02:	0635      	lsls	r5, r6, #24
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	d501      	bpl.n	8008d0c <_printf_i+0x1cc>
 8008d08:	6019      	str	r1, [r3, #0]
 8008d0a:	e002      	b.n	8008d12 <_printf_i+0x1d2>
 8008d0c:	0670      	lsls	r0, r6, #25
 8008d0e:	d5fb      	bpl.n	8008d08 <_printf_i+0x1c8>
 8008d10:	8019      	strh	r1, [r3, #0]
 8008d12:	2300      	movs	r3, #0
 8008d14:	6123      	str	r3, [r4, #16]
 8008d16:	4615      	mov	r5, r2
 8008d18:	e7ba      	b.n	8008c90 <_printf_i+0x150>
 8008d1a:	682b      	ldr	r3, [r5, #0]
 8008d1c:	1d1a      	adds	r2, r3, #4
 8008d1e:	602a      	str	r2, [r5, #0]
 8008d20:	681d      	ldr	r5, [r3, #0]
 8008d22:	6862      	ldr	r2, [r4, #4]
 8008d24:	2100      	movs	r1, #0
 8008d26:	4628      	mov	r0, r5
 8008d28:	f7f7 fa52 	bl	80001d0 <memchr>
 8008d2c:	b108      	cbz	r0, 8008d32 <_printf_i+0x1f2>
 8008d2e:	1b40      	subs	r0, r0, r5
 8008d30:	6060      	str	r0, [r4, #4]
 8008d32:	6863      	ldr	r3, [r4, #4]
 8008d34:	6123      	str	r3, [r4, #16]
 8008d36:	2300      	movs	r3, #0
 8008d38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d3c:	e7a8      	b.n	8008c90 <_printf_i+0x150>
 8008d3e:	6923      	ldr	r3, [r4, #16]
 8008d40:	462a      	mov	r2, r5
 8008d42:	4649      	mov	r1, r9
 8008d44:	4640      	mov	r0, r8
 8008d46:	47d0      	blx	sl
 8008d48:	3001      	adds	r0, #1
 8008d4a:	d0ab      	beq.n	8008ca4 <_printf_i+0x164>
 8008d4c:	6823      	ldr	r3, [r4, #0]
 8008d4e:	079b      	lsls	r3, r3, #30
 8008d50:	d413      	bmi.n	8008d7a <_printf_i+0x23a>
 8008d52:	68e0      	ldr	r0, [r4, #12]
 8008d54:	9b03      	ldr	r3, [sp, #12]
 8008d56:	4298      	cmp	r0, r3
 8008d58:	bfb8      	it	lt
 8008d5a:	4618      	movlt	r0, r3
 8008d5c:	e7a4      	b.n	8008ca8 <_printf_i+0x168>
 8008d5e:	2301      	movs	r3, #1
 8008d60:	4632      	mov	r2, r6
 8008d62:	4649      	mov	r1, r9
 8008d64:	4640      	mov	r0, r8
 8008d66:	47d0      	blx	sl
 8008d68:	3001      	adds	r0, #1
 8008d6a:	d09b      	beq.n	8008ca4 <_printf_i+0x164>
 8008d6c:	3501      	adds	r5, #1
 8008d6e:	68e3      	ldr	r3, [r4, #12]
 8008d70:	9903      	ldr	r1, [sp, #12]
 8008d72:	1a5b      	subs	r3, r3, r1
 8008d74:	42ab      	cmp	r3, r5
 8008d76:	dcf2      	bgt.n	8008d5e <_printf_i+0x21e>
 8008d78:	e7eb      	b.n	8008d52 <_printf_i+0x212>
 8008d7a:	2500      	movs	r5, #0
 8008d7c:	f104 0619 	add.w	r6, r4, #25
 8008d80:	e7f5      	b.n	8008d6e <_printf_i+0x22e>
 8008d82:	bf00      	nop
 8008d84:	08009281 	.word	0x08009281
 8008d88:	08009292 	.word	0x08009292

08008d8c <memmove>:
 8008d8c:	4288      	cmp	r0, r1
 8008d8e:	b510      	push	{r4, lr}
 8008d90:	eb01 0402 	add.w	r4, r1, r2
 8008d94:	d902      	bls.n	8008d9c <memmove+0x10>
 8008d96:	4284      	cmp	r4, r0
 8008d98:	4623      	mov	r3, r4
 8008d9a:	d807      	bhi.n	8008dac <memmove+0x20>
 8008d9c:	1e43      	subs	r3, r0, #1
 8008d9e:	42a1      	cmp	r1, r4
 8008da0:	d008      	beq.n	8008db4 <memmove+0x28>
 8008da2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008da6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008daa:	e7f8      	b.n	8008d9e <memmove+0x12>
 8008dac:	4402      	add	r2, r0
 8008dae:	4601      	mov	r1, r0
 8008db0:	428a      	cmp	r2, r1
 8008db2:	d100      	bne.n	8008db6 <memmove+0x2a>
 8008db4:	bd10      	pop	{r4, pc}
 8008db6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008dba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008dbe:	e7f7      	b.n	8008db0 <memmove+0x24>

08008dc0 <_free_r>:
 8008dc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008dc2:	2900      	cmp	r1, #0
 8008dc4:	d044      	beq.n	8008e50 <_free_r+0x90>
 8008dc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dca:	9001      	str	r0, [sp, #4]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	f1a1 0404 	sub.w	r4, r1, #4
 8008dd2:	bfb8      	it	lt
 8008dd4:	18e4      	addlt	r4, r4, r3
 8008dd6:	f000 f913 	bl	8009000 <__malloc_lock>
 8008dda:	4a1e      	ldr	r2, [pc, #120]	; (8008e54 <_free_r+0x94>)
 8008ddc:	9801      	ldr	r0, [sp, #4]
 8008dde:	6813      	ldr	r3, [r2, #0]
 8008de0:	b933      	cbnz	r3, 8008df0 <_free_r+0x30>
 8008de2:	6063      	str	r3, [r4, #4]
 8008de4:	6014      	str	r4, [r2, #0]
 8008de6:	b003      	add	sp, #12
 8008de8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008dec:	f000 b90e 	b.w	800900c <__malloc_unlock>
 8008df0:	42a3      	cmp	r3, r4
 8008df2:	d908      	bls.n	8008e06 <_free_r+0x46>
 8008df4:	6825      	ldr	r5, [r4, #0]
 8008df6:	1961      	adds	r1, r4, r5
 8008df8:	428b      	cmp	r3, r1
 8008dfa:	bf01      	itttt	eq
 8008dfc:	6819      	ldreq	r1, [r3, #0]
 8008dfe:	685b      	ldreq	r3, [r3, #4]
 8008e00:	1949      	addeq	r1, r1, r5
 8008e02:	6021      	streq	r1, [r4, #0]
 8008e04:	e7ed      	b.n	8008de2 <_free_r+0x22>
 8008e06:	461a      	mov	r2, r3
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	b10b      	cbz	r3, 8008e10 <_free_r+0x50>
 8008e0c:	42a3      	cmp	r3, r4
 8008e0e:	d9fa      	bls.n	8008e06 <_free_r+0x46>
 8008e10:	6811      	ldr	r1, [r2, #0]
 8008e12:	1855      	adds	r5, r2, r1
 8008e14:	42a5      	cmp	r5, r4
 8008e16:	d10b      	bne.n	8008e30 <_free_r+0x70>
 8008e18:	6824      	ldr	r4, [r4, #0]
 8008e1a:	4421      	add	r1, r4
 8008e1c:	1854      	adds	r4, r2, r1
 8008e1e:	42a3      	cmp	r3, r4
 8008e20:	6011      	str	r1, [r2, #0]
 8008e22:	d1e0      	bne.n	8008de6 <_free_r+0x26>
 8008e24:	681c      	ldr	r4, [r3, #0]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	6053      	str	r3, [r2, #4]
 8008e2a:	4421      	add	r1, r4
 8008e2c:	6011      	str	r1, [r2, #0]
 8008e2e:	e7da      	b.n	8008de6 <_free_r+0x26>
 8008e30:	d902      	bls.n	8008e38 <_free_r+0x78>
 8008e32:	230c      	movs	r3, #12
 8008e34:	6003      	str	r3, [r0, #0]
 8008e36:	e7d6      	b.n	8008de6 <_free_r+0x26>
 8008e38:	6825      	ldr	r5, [r4, #0]
 8008e3a:	1961      	adds	r1, r4, r5
 8008e3c:	428b      	cmp	r3, r1
 8008e3e:	bf04      	itt	eq
 8008e40:	6819      	ldreq	r1, [r3, #0]
 8008e42:	685b      	ldreq	r3, [r3, #4]
 8008e44:	6063      	str	r3, [r4, #4]
 8008e46:	bf04      	itt	eq
 8008e48:	1949      	addeq	r1, r1, r5
 8008e4a:	6021      	streq	r1, [r4, #0]
 8008e4c:	6054      	str	r4, [r2, #4]
 8008e4e:	e7ca      	b.n	8008de6 <_free_r+0x26>
 8008e50:	b003      	add	sp, #12
 8008e52:	bd30      	pop	{r4, r5, pc}
 8008e54:	200046fc 	.word	0x200046fc

08008e58 <sbrk_aligned>:
 8008e58:	b570      	push	{r4, r5, r6, lr}
 8008e5a:	4e0e      	ldr	r6, [pc, #56]	; (8008e94 <sbrk_aligned+0x3c>)
 8008e5c:	460c      	mov	r4, r1
 8008e5e:	6831      	ldr	r1, [r6, #0]
 8008e60:	4605      	mov	r5, r0
 8008e62:	b911      	cbnz	r1, 8008e6a <sbrk_aligned+0x12>
 8008e64:	f000 f8bc 	bl	8008fe0 <_sbrk_r>
 8008e68:	6030      	str	r0, [r6, #0]
 8008e6a:	4621      	mov	r1, r4
 8008e6c:	4628      	mov	r0, r5
 8008e6e:	f000 f8b7 	bl	8008fe0 <_sbrk_r>
 8008e72:	1c43      	adds	r3, r0, #1
 8008e74:	d00a      	beq.n	8008e8c <sbrk_aligned+0x34>
 8008e76:	1cc4      	adds	r4, r0, #3
 8008e78:	f024 0403 	bic.w	r4, r4, #3
 8008e7c:	42a0      	cmp	r0, r4
 8008e7e:	d007      	beq.n	8008e90 <sbrk_aligned+0x38>
 8008e80:	1a21      	subs	r1, r4, r0
 8008e82:	4628      	mov	r0, r5
 8008e84:	f000 f8ac 	bl	8008fe0 <_sbrk_r>
 8008e88:	3001      	adds	r0, #1
 8008e8a:	d101      	bne.n	8008e90 <sbrk_aligned+0x38>
 8008e8c:	f04f 34ff 	mov.w	r4, #4294967295
 8008e90:	4620      	mov	r0, r4
 8008e92:	bd70      	pop	{r4, r5, r6, pc}
 8008e94:	20004700 	.word	0x20004700

08008e98 <_malloc_r>:
 8008e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e9c:	1ccd      	adds	r5, r1, #3
 8008e9e:	f025 0503 	bic.w	r5, r5, #3
 8008ea2:	3508      	adds	r5, #8
 8008ea4:	2d0c      	cmp	r5, #12
 8008ea6:	bf38      	it	cc
 8008ea8:	250c      	movcc	r5, #12
 8008eaa:	2d00      	cmp	r5, #0
 8008eac:	4607      	mov	r7, r0
 8008eae:	db01      	blt.n	8008eb4 <_malloc_r+0x1c>
 8008eb0:	42a9      	cmp	r1, r5
 8008eb2:	d905      	bls.n	8008ec0 <_malloc_r+0x28>
 8008eb4:	230c      	movs	r3, #12
 8008eb6:	603b      	str	r3, [r7, #0]
 8008eb8:	2600      	movs	r6, #0
 8008eba:	4630      	mov	r0, r6
 8008ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ec0:	4e2e      	ldr	r6, [pc, #184]	; (8008f7c <_malloc_r+0xe4>)
 8008ec2:	f000 f89d 	bl	8009000 <__malloc_lock>
 8008ec6:	6833      	ldr	r3, [r6, #0]
 8008ec8:	461c      	mov	r4, r3
 8008eca:	bb34      	cbnz	r4, 8008f1a <_malloc_r+0x82>
 8008ecc:	4629      	mov	r1, r5
 8008ece:	4638      	mov	r0, r7
 8008ed0:	f7ff ffc2 	bl	8008e58 <sbrk_aligned>
 8008ed4:	1c43      	adds	r3, r0, #1
 8008ed6:	4604      	mov	r4, r0
 8008ed8:	d14d      	bne.n	8008f76 <_malloc_r+0xde>
 8008eda:	6834      	ldr	r4, [r6, #0]
 8008edc:	4626      	mov	r6, r4
 8008ede:	2e00      	cmp	r6, #0
 8008ee0:	d140      	bne.n	8008f64 <_malloc_r+0xcc>
 8008ee2:	6823      	ldr	r3, [r4, #0]
 8008ee4:	4631      	mov	r1, r6
 8008ee6:	4638      	mov	r0, r7
 8008ee8:	eb04 0803 	add.w	r8, r4, r3
 8008eec:	f000 f878 	bl	8008fe0 <_sbrk_r>
 8008ef0:	4580      	cmp	r8, r0
 8008ef2:	d13a      	bne.n	8008f6a <_malloc_r+0xd2>
 8008ef4:	6821      	ldr	r1, [r4, #0]
 8008ef6:	3503      	adds	r5, #3
 8008ef8:	1a6d      	subs	r5, r5, r1
 8008efa:	f025 0503 	bic.w	r5, r5, #3
 8008efe:	3508      	adds	r5, #8
 8008f00:	2d0c      	cmp	r5, #12
 8008f02:	bf38      	it	cc
 8008f04:	250c      	movcc	r5, #12
 8008f06:	4629      	mov	r1, r5
 8008f08:	4638      	mov	r0, r7
 8008f0a:	f7ff ffa5 	bl	8008e58 <sbrk_aligned>
 8008f0e:	3001      	adds	r0, #1
 8008f10:	d02b      	beq.n	8008f6a <_malloc_r+0xd2>
 8008f12:	6823      	ldr	r3, [r4, #0]
 8008f14:	442b      	add	r3, r5
 8008f16:	6023      	str	r3, [r4, #0]
 8008f18:	e00e      	b.n	8008f38 <_malloc_r+0xa0>
 8008f1a:	6822      	ldr	r2, [r4, #0]
 8008f1c:	1b52      	subs	r2, r2, r5
 8008f1e:	d41e      	bmi.n	8008f5e <_malloc_r+0xc6>
 8008f20:	2a0b      	cmp	r2, #11
 8008f22:	d916      	bls.n	8008f52 <_malloc_r+0xba>
 8008f24:	1961      	adds	r1, r4, r5
 8008f26:	42a3      	cmp	r3, r4
 8008f28:	6025      	str	r5, [r4, #0]
 8008f2a:	bf18      	it	ne
 8008f2c:	6059      	strne	r1, [r3, #4]
 8008f2e:	6863      	ldr	r3, [r4, #4]
 8008f30:	bf08      	it	eq
 8008f32:	6031      	streq	r1, [r6, #0]
 8008f34:	5162      	str	r2, [r4, r5]
 8008f36:	604b      	str	r3, [r1, #4]
 8008f38:	4638      	mov	r0, r7
 8008f3a:	f104 060b 	add.w	r6, r4, #11
 8008f3e:	f000 f865 	bl	800900c <__malloc_unlock>
 8008f42:	f026 0607 	bic.w	r6, r6, #7
 8008f46:	1d23      	adds	r3, r4, #4
 8008f48:	1af2      	subs	r2, r6, r3
 8008f4a:	d0b6      	beq.n	8008eba <_malloc_r+0x22>
 8008f4c:	1b9b      	subs	r3, r3, r6
 8008f4e:	50a3      	str	r3, [r4, r2]
 8008f50:	e7b3      	b.n	8008eba <_malloc_r+0x22>
 8008f52:	6862      	ldr	r2, [r4, #4]
 8008f54:	42a3      	cmp	r3, r4
 8008f56:	bf0c      	ite	eq
 8008f58:	6032      	streq	r2, [r6, #0]
 8008f5a:	605a      	strne	r2, [r3, #4]
 8008f5c:	e7ec      	b.n	8008f38 <_malloc_r+0xa0>
 8008f5e:	4623      	mov	r3, r4
 8008f60:	6864      	ldr	r4, [r4, #4]
 8008f62:	e7b2      	b.n	8008eca <_malloc_r+0x32>
 8008f64:	4634      	mov	r4, r6
 8008f66:	6876      	ldr	r6, [r6, #4]
 8008f68:	e7b9      	b.n	8008ede <_malloc_r+0x46>
 8008f6a:	230c      	movs	r3, #12
 8008f6c:	603b      	str	r3, [r7, #0]
 8008f6e:	4638      	mov	r0, r7
 8008f70:	f000 f84c 	bl	800900c <__malloc_unlock>
 8008f74:	e7a1      	b.n	8008eba <_malloc_r+0x22>
 8008f76:	6025      	str	r5, [r4, #0]
 8008f78:	e7de      	b.n	8008f38 <_malloc_r+0xa0>
 8008f7a:	bf00      	nop
 8008f7c:	200046fc 	.word	0x200046fc

08008f80 <_realloc_r>:
 8008f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f84:	4680      	mov	r8, r0
 8008f86:	4614      	mov	r4, r2
 8008f88:	460e      	mov	r6, r1
 8008f8a:	b921      	cbnz	r1, 8008f96 <_realloc_r+0x16>
 8008f8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f90:	4611      	mov	r1, r2
 8008f92:	f7ff bf81 	b.w	8008e98 <_malloc_r>
 8008f96:	b92a      	cbnz	r2, 8008fa4 <_realloc_r+0x24>
 8008f98:	f7ff ff12 	bl	8008dc0 <_free_r>
 8008f9c:	4625      	mov	r5, r4
 8008f9e:	4628      	mov	r0, r5
 8008fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fa4:	f000 f838 	bl	8009018 <_malloc_usable_size_r>
 8008fa8:	4284      	cmp	r4, r0
 8008faa:	4607      	mov	r7, r0
 8008fac:	d802      	bhi.n	8008fb4 <_realloc_r+0x34>
 8008fae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008fb2:	d812      	bhi.n	8008fda <_realloc_r+0x5a>
 8008fb4:	4621      	mov	r1, r4
 8008fb6:	4640      	mov	r0, r8
 8008fb8:	f7ff ff6e 	bl	8008e98 <_malloc_r>
 8008fbc:	4605      	mov	r5, r0
 8008fbe:	2800      	cmp	r0, #0
 8008fc0:	d0ed      	beq.n	8008f9e <_realloc_r+0x1e>
 8008fc2:	42bc      	cmp	r4, r7
 8008fc4:	4622      	mov	r2, r4
 8008fc6:	4631      	mov	r1, r6
 8008fc8:	bf28      	it	cs
 8008fca:	463a      	movcs	r2, r7
 8008fcc:	f7ff fbb8 	bl	8008740 <memcpy>
 8008fd0:	4631      	mov	r1, r6
 8008fd2:	4640      	mov	r0, r8
 8008fd4:	f7ff fef4 	bl	8008dc0 <_free_r>
 8008fd8:	e7e1      	b.n	8008f9e <_realloc_r+0x1e>
 8008fda:	4635      	mov	r5, r6
 8008fdc:	e7df      	b.n	8008f9e <_realloc_r+0x1e>
	...

08008fe0 <_sbrk_r>:
 8008fe0:	b538      	push	{r3, r4, r5, lr}
 8008fe2:	4d06      	ldr	r5, [pc, #24]	; (8008ffc <_sbrk_r+0x1c>)
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	4604      	mov	r4, r0
 8008fe8:	4608      	mov	r0, r1
 8008fea:	602b      	str	r3, [r5, #0]
 8008fec:	f7f9 f866 	bl	80020bc <_sbrk>
 8008ff0:	1c43      	adds	r3, r0, #1
 8008ff2:	d102      	bne.n	8008ffa <_sbrk_r+0x1a>
 8008ff4:	682b      	ldr	r3, [r5, #0]
 8008ff6:	b103      	cbz	r3, 8008ffa <_sbrk_r+0x1a>
 8008ff8:	6023      	str	r3, [r4, #0]
 8008ffa:	bd38      	pop	{r3, r4, r5, pc}
 8008ffc:	20004704 	.word	0x20004704

08009000 <__malloc_lock>:
 8009000:	4801      	ldr	r0, [pc, #4]	; (8009008 <__malloc_lock+0x8>)
 8009002:	f000 b811 	b.w	8009028 <__retarget_lock_acquire_recursive>
 8009006:	bf00      	nop
 8009008:	20004708 	.word	0x20004708

0800900c <__malloc_unlock>:
 800900c:	4801      	ldr	r0, [pc, #4]	; (8009014 <__malloc_unlock+0x8>)
 800900e:	f000 b80c 	b.w	800902a <__retarget_lock_release_recursive>
 8009012:	bf00      	nop
 8009014:	20004708 	.word	0x20004708

08009018 <_malloc_usable_size_r>:
 8009018:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800901c:	1f18      	subs	r0, r3, #4
 800901e:	2b00      	cmp	r3, #0
 8009020:	bfbc      	itt	lt
 8009022:	580b      	ldrlt	r3, [r1, r0]
 8009024:	18c0      	addlt	r0, r0, r3
 8009026:	4770      	bx	lr

08009028 <__retarget_lock_acquire_recursive>:
 8009028:	4770      	bx	lr

0800902a <__retarget_lock_release_recursive>:
 800902a:	4770      	bx	lr

0800902c <_init>:
 800902c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800902e:	bf00      	nop
 8009030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009032:	bc08      	pop	{r3}
 8009034:	469e      	mov	lr, r3
 8009036:	4770      	bx	lr

08009038 <_fini>:
 8009038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800903a:	bf00      	nop
 800903c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800903e:	bc08      	pop	{r3}
 8009040:	469e      	mov	lr, r3
 8009042:	4770      	bx	lr
